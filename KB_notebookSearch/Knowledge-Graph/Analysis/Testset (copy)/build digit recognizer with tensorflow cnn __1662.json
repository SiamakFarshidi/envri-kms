{"name": "build digit recognizer with tensorflow cnn ", "full_name": " ", "stargazers_count": 0, "forks_count": 0, "description": "zeros_initializer 2. 1 Build model 4 Other tries 4. 2 Zero padding to 32 321. 3 Split training and test set 1. 99242 with data augmentation. conv2d use_bias True bias_initializer tf. 4 Normalizing inputs and one hot coding labels 2 Build forward propagation 2. 1 Loading input matrix creating input layer2. LeNet 5 Structure input 28 28 images zeropadding 2 2 32 32 conv_1 5 5 and 6 filters 28 28 6 act_1 activation avgpool_2 2 2 and non overlapping 14 14 6 conv_3 5 5 and 16 filters 10 10 16 act_2 activation avgpool_4 2 2 and non overlapping 5 5 16 conv_5 5 5 and 120 filters fully connected 120 1 act_3 activation fc_6 fully connected 84 1 act_4 activation output_layer act_4 10 1Note not implementing bias in conv 1 Preparing the data Preprocessing 1. 2 Building forward propagation processWhen implementing conv2d there s no need to set bias variables bcz the function sets bias computation automatically. 3 Data AugmentationGet 0. com exdb publis pdf lecun 01a. 2 Setting conv parameter matrix2. References Deep learning from Andrew Ng Convolution model ApplicationDeep learning from Andrew Ng Keras Tutorial Happy HouseLeNet 5 by Y. 2 Run CNN with more filters4. After implementing deep learning algorithm only fully connected layers introduced and data augmentation now let s try whether CNN could give us better output or not. 3 Build cost function 3 Run CNN 3. ", "id": "bogikidd/build-digit-recognizer-with-tensorflow-cnn", "size": "1662", "language": "python", "html_url": "https://www.kaggle.com/code/bogikidd/build-digit-recognizer-with-tensorflow-cnn", "git_url": "https://www.kaggle.com/code/bogikidd/build-digit-recognizer-with-tensorflow-cnn", "script": "compute_cost sklearn.model_selection tensorflow.python.framework zero_pad feature_norm numpy matplotlib.pyplot ops convert_to_one_hot initialize_parameters tensorflow create_placeholders pandas model train_test_split random_mini_batches forward_propagation ", "entities": "(('function sets', 'computation'), 'build') (('2 5 2 5 16 conv_5 5 5 120 filters', '1 data'), 'input') (('Loading input 1 matrix', 'input'), 'layer2') (('CNN', 'better output'), 'let') ", "extra": "['test']", "label": "Perfect_files", "potential_description_queries": ["algorithm", "augmentation", "coding", "computation", "conv", "cost", "could", "data", "forward", "function", "hot", "input", "learning", "let", "matrix", "model", "need", "no", "non", "not", "output", "padding", "parameter", "pdf", "propagation", "set", "test", "training", "try"], "potential_description_queries_len": 29, "potential_script_queries": ["numpy", "python", "tensorflow"], "potential_script_queries_len": 3, "potential_entities_queries": [], "potential_entities_queries_len": 0, "potential_extra_queries": [], "potential_extra_queries_len": 0, "all_components_potential_queries_len": 31}