{"name": "pytorch cnn from scratch ", "full_name": " h3 Read data h3 set up the model h3 Train the model ", "stargazers_count": 0, "forks_count": 0, "description": "RandomRotation 20 30self. Compose composes several transforms together Convert a tensor to PIL Image Python Imaging Library randomly flips randomly flips rotates the image by angle in 1 20 DataLoader combines a dataset and a sampler and provides an iterable over the given dataset there are 128 samples per batch to load DataLoader shuffles train data every epoch and doesnt shuffle valid data Base class for my neural network ancestor constructor call nn. conv5 x celu Read data Simple custom generator set up the model Train the model Accuracy Check CSV submission Hyper parameters Device configuration gpu or cpu Splitting data into train and val 10 of train data are used for validation torchvision. transforms provides common image transformations transforms. Conv2d applies a 2D convolution out_channels of previous layer should be equal to in_channels of current layer BatchNorm2d normalizes outputs of each layer pooling function is 2D max 2D average pooling linear transformation to the incoming data first convolutional layer then batchnorm then activation then pooling layer LeakyReLU as activation function Cross entropy as loss function AdaMax is used as gradient descent optimization algorithm Forward pass backpropagation method for grad calculating Backward and optimize value of Loss function after each epochs Test the model eval mode batchnorm uses moving mean variance instead of mini batch mean variance Save the model checkpoint. ", "id": "danilaot/pytorch-cnn-from-scratch", "size": "207", "language": "python", "html_url": "https://www.kaggle.com/code/danilaot/pytorch-cnn-from-scratch", "git_url": "https://www.kaggle.com/code/danilaot/pytorch-cnn-from-scratch", "script": "torch.nn.functional torch.utils.data __init__ sklearn.model_selection SimpleCNN(nn.Module) torch.nn forward numpy matplotlib.pyplot __getitem__ TensorDataset pandas Dataset MyDataset(Dataset) __len__ train_test_split DataLoader torchvision.transforms ", "entities": "(('batch instead mini mean variance', 'model checkpoint'), 'apply') (('transforms', 'image transformations common transforms'), 'provide') (('network ancestor neural constructor', 'nn'), 'convert') (('Accuracy Check CSV submission Hyper', 'validation torchvision'), 'conv5') ", "extra": "['test']", "label": "Perfect_files", "potential_description_queries": ["algorithm", "average", "backpropagation", "batch", "call", "convolution", "convolutional", "current", "custom", "data", "dataset", "entropy", "epoch", "equal", "eval", "every", "function", "generator", "gpu", "grad", "gradient", "image", "layer", "linear", "load", "max", "mean", "method", "mini", "mode", "model", "my", "network", "neural", "optimization", "optimize", "per", "pooling", "sampler", "set", "several", "shuffle", "submission", "tensor", "train", "transformation", "up", "val", "valid", "validation", "value", "variance"], "potential_description_queries_len": 52, "potential_script_queries": ["forward", "nn", "numpy", "torch"], "potential_script_queries_len": 4, "potential_entities_queries": ["mini", "submission"], "potential_entities_queries_len": 2, "potential_extra_queries": ["test"], "potential_extra_queries_len": 1, "all_components_potential_queries_len": 57}