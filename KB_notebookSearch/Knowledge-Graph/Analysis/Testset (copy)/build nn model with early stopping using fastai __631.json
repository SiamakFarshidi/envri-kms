{"name": "build nn model with early stopping using fastai ", "full_name": " h1 Drop col h1 Add sentiment score to df h1 TfIdf on description h1 Image metadata h1 Start fastai nn process h1 Start training fastai NN h2 finetune ", "stargazers_count": 0, "forks_count": 0, "description": "07 _ evaluate_classification val_preds data. sum k torch. com benhamner Metrics def get_learner data layers save_name best_nn return tabular_learner data layers layers metrics accuracy callback_fns partial SaveModelCallback monitor val_loss name save_name def get_learner_no_cb data layers return tabular_learner data layers layers metrics accuracy QuadraticKappaScore class QuadraticKappaScore ConfusionMatrix Compute the rate of agreement Cohens Kappa. I haven t done much hyperparameters tuning so feel free to do so. sum w expected self. sum dim 0 sum1 self. fit_one_cycle 6 1e 01 pct_start 0. tabular module to build a simple baseline neural net with 2 hidden layers feature embeddings 1cycle LR you can switch to constant LR if you want and SaveModelCallback to save best models during training. plot_losses coeff 1. com myltykritik simple lgbm image features The following 3 functions have been taken from Ben Hamner s github repository https github. Drop col Add sentiment score to df TfIdf on description Image metadata Start fastai nn process Start training fastai NN finetune Any results you write to the current directory are saved as output. explained_variance_ratio_ from fastai. com scikit learn scikit learn blob bac89c2 sklearn metrics classification. float32 w w w. items coeff learn get_learner data layers model_name 2 learn. fit_one_cycle 5 max_lr 3e 05 learn. items new_coeff test_preds Store predictions for Kaggle Submission. explained_variance_ratio_. 06 _ evaluate_classification val_preds data. metric 1 k Fit TFIDF print svd. com skooch petfinder simple lgbm baseline of turning this into a regression problem with OptimizedRounder to further finetune predictions. plot_losses TODO need a better way to find these numbers new_coeff 1. Based on Eric s notebook https www. collect_env import show_install learn get_learner data layers model_name 1 learn. 16 coeff 2 coeff 3 0. py def on_epoch_end self kwargs w torch. transpose 0 1 2 sum0 self. sum dim 1 expected torch. load model_name 1 learn. FROM https www. einsum i j ij sum0 sum1 sum0. n_classes w w torch. ", "id": "anhquan0412/build-nn-model-with-early-stopping-using-fastai", "size": "631", "language": "python", "html_url": "https://www.kaggle.com/code/anhquan0412/build-nn-model-with-early-stopping-using-fastai", "git_url": "https://www.kaggle.com/code/anhquan0412/build-nn-model-with-early-stopping-using-fastai", "script": "sklearn.metrics __init__ fastai.tabular get_learner cohen_kappa_score _kappa_loss predict plot_pred TfidfVectorizer get_learner_no_cb evaluate_classification on_epoch_end collections fastai.utils.collect_env mean_squared_error numpy OptimizedRounder(object) sklearn.feature_extraction.text QuadraticKappaScore(ConfusionMatrix) confusion_matrix as sk_cmatrix sqrt sklearn.decomposition fastai.callbacks.tracker quadratic_weighted_kappa sklearn.model_selection confusion_matrix functools coefficients histogram partial Counter fit accuracy_score get_databunch TruncatedSVD rmse scipy StratifiedKFold math metric ", "entities": "(('val_loss get_learner_no_cb data callback_fns partial SaveModelCallback save_name def layers', 'agreement Cohens Kappa'), 'return') (('collect_env import show_install', 'get_learner data layers'), 'learn') (('following 3 functions', 'Ben repository https github github'), 'feature') (('scikit', 'sklearn metrics classification'), 'learn') (('you', 'output'), 'score') (('you', 'training'), 'feature') (('model_name', 'get_learner data layers'), 'learn') (('I', 'so feel'), 'do') (('plot_losses TODO', 'numbers'), 'need') ", "extra": "['test']", "label": "Perfect_files", "potential_description_queries": ["accuracy", "baseline", "best", "blob", "build", "coeff", "col", "current", "data", "def", "description", "df", "dim", "directory", "expected", "fastai", "feature", "find", "float32", "following", "image", "import", "learn", "lgbm", "load", "metadata", "metric", "module", "name", "need", "neural", "nn", "notebook", "partial", "print", "problem", "py", "regression", "repository", "return", "save", "scikit", "score", "sentiment", "sklearn", "sum", "tabular", "training", "transpose", "tuning", "write"], "potential_description_queries_len": 51, "potential_script_queries": ["fit", "histogram", "math", "numpy", "predict", "rmse", "scipy", "sqrt"], "potential_script_queries_len": 8, "potential_entities_queries": ["def", "partial"], "potential_entities_queries_len": 2, "potential_extra_queries": ["test"], "potential_extra_queries_len": 1, "all_components_potential_queries_len": 57}