{"name": "baseline lstm with keras 0 7 ", "full_name": " h1 Data Prepration for LSTM h1 LSTM Model with Keras h1 Submission File Creation h1 Future Improvements ", "stargazers_count": 0, "forks_count": 0, "description": "We want to have each day as row and 30490 items sales as columns features Therefore take the transpose of dt Remove the first six colums id item_id dept_id cat_id store_id state_id columns to end up only days as rows Here a dataframe is created to store the knowledge if an event exist in the next day Firstly fill with zeros the dataframe Now 1 is assigned the day before an event exist. Each run can create different results. I have wanted to see how much the result differs You can share any ideas for improvement as a comment we can discuss more detail This Python 3 environment comes with many helpful analytics libraries installed It is defined by the kaggle python Docker image https github. daysBeforeEventTest will be used as input for predicting We will forecast the days 1913 1941 daysBeforeEvent will be used for training as a feature. Since it is not i did not consider for now. read_csv To reduce memory usage Reduce memory usage and compare with the previous one to be sure Take the transpose so that we have one day for each row and 30490 items sales as columns Remove id item_id dept_id cat_id store_id state_id columns Create dataframe with zeros for 1969 days in the calendar 1 is assigned to the days before the event_name_1. I could not find a proper way to add those kind of features. com kaggle docker python For example here s several helpful packages to load linear algebra data processing CSV file I O e. Other days will remain as 0. Concatenate daysBeforeEvent feature with our main dataframe dt Here is the important part. Data preprocessing may be applied. The type of the LSTM can be regarded as Multivariate and Multiple Input Series Multi step is not used. Past days is a parameter which can be set to see the effect. The model is trained using past sales values for each 30490 item and a feature which represents if there exists an event at the following day. png LSTM Model with Keras Take last days 14 for this notebook timestep parameter in order to predict firts unknown day s sales. Multi step LSTM can be used for prediction of more than one day for example 28 days at once or 14 days 7 days 2 days etc. Before concatanation with our main data dt indexes are made same and column name is changed to oneDayBeforeEvent Feature Scaling Scale the features using min max scaler in range 0 1 \u0130mportant if extra features are added like oneDayBeforeEvent use only sales values for predictions we only predict sales this is why 0 30490 columns are choosen Convert to np array to be able to feed the LSTM model Importing the Keras libraries and packages Initialising the RNN Adding the first LSTM layer and some Dropout regularisation Adding a third LSTM layer and some Dropout regularisation Adding a third LSTM layer and some Dropout regularisation Adding the output layer Compiling the RNN Fitting the RNN to the Training set. X_train and y_train data is created. if first day was an event this row will cause an exception because x 1. 14 days our prediction to predict last 1941th day sales. png attachment resim. In order to predict 1916th day 13 days from our input data and 1 day from our prediction are used. 12 days from input data 2 days from our prediction to predict 1917th day 11 days from input data 3 days from our prediction to predict 1918th day. More feature can be added. calendar won t be used anymore. Any ideas for feature addition are very welcome. For each X_train item 14 past days sales and 14 daysBeforeEvent feature are included. Data Prepration for LSTM In this notebook LSTM is used for forecasting future sales. But including those features for each item can increase the column size from 30491 to 60981 maybe more. For y_train we are predicting one day sales of 30490 items therefore one element of y_train s shape is 1 30490 Creation of X_train and y_train resim. Choosing correct neuron sizes batch size and layer size can be achieved. The shape of the data is not exactly what we want. In addition outliers can be handled if any especially if sell prices data is used. For this notebook sales of past 14 days and event feature are used for predicting 15th day sales. I did not add seed value but may be this can be added. So one element of X_train s shape is 14 30491. We are using last 14 days in order to predict day 1915 sales. After that we slide the window one by one. Before using values for prediction again use min max transformation Here is again an important part. Since event_name_2 is rare it was not added. Future Improvements Here only sales of past days and oneDayBeforeEvent feature are used for prediction. Since the daysBeforeEvent feature is used for predicting after the model trained as input we seperate the 28 days as daysBeforeEventTest For training the first 1914 days if startDay is zero otherwise 1913 startDay will be used. There are lots of zero values especially in the first year. Since there are lots of zero values in first days startDay parameter can be used ignore unwanted days from the beginning. Maybe lag features sell prices can be included. png Submission File Creation Here the submission file creation is done. But I could not find a way how to deal with them. Below timesteps is set to 14 to use past 14 days sales. ", "id": "bountyhunters/baseline-lstm-with-keras-0-7", "size": "3746", "language": "python", "html_url": "https://www.kaggle.com/code/bountyhunters/baseline-lstm-with-keras-0-7", "git_url": "https://www.kaggle.com/code/bountyhunters/baseline-lstm-with-keras-0-7", "script": "keras.layers LSTM numpy downcast_dtypes sklearn.preprocessing Dense pandas keras.models Sequential Dropout MinMaxScaler ", "entities": "(('which', 'following day'), 'train') (('So one element', 'shape'), 'be') (('event feature', 'day 15th sales'), 'use') (('day event', 'dataframe'), 'want') (('columns Create dataframe', 'event_name_1'), 'reduce') (('I', 'features'), 'find') (('Here only sales', 'oneDayBeforeEvent prediction'), 'use') (('why 0 30490 columns', 'Training set'), 'make') (('Multiple Input Series Multi step', 'Multivariate'), 'regard') (('I', 'how them'), 'find') (('LSTM', 'future sales'), 'Prepration') (('which', 'effect'), 'be') (('1941 daysBeforeEvent', 'feature'), 'use') (('therefore one element', '1 30490 X_train resim'), 'predict') (('prices especially data', 'addition'), 'handle') (('we', 'one one'), 'slide') (('14 prediction', 'day last 1941th sales'), 'day') (('Concatenate daysBeforeEvent', 'dataframe main dt'), 'feature') (('row', 'exception'), 'be') (('It', 'kaggle python Docker image https github'), 'want') (('timesteps', 'days past 14 sales'), 'set') (('Multi step', 'example'), 'use') (('ideas', 'feature addition'), 'be') (('startDay parameter', 'unwanted days beginning'), 'use') (('1 day', 'prediction'), 'in') (('Choosing', 'neuron sizes batch correct size'), 'achieve') (('we', 'exactly what'), 'be') (('days 14 past sales', 'X_train item'), 'include') (('We', 'day 1915 sales'), 'use') (('png LSTM Model', 'firts unknown sales'), 'take') (('this', 'seed value'), 'add') (('otherwise 1913 startDay', 'input'), 'seperate') ", "extra": "['test']", "label": "Perfect_files", "potential_description_queries": ["array", "batch", "cause", "column", "comment", "compare", "consider", "correct", "could", "create", "creation", "data", "dataframe", "day", "detail", "dt", "end", "environment", "event", "feature", "feed", "file", "fill", "find", "following", "forecast", "forecasting", "future", "id", "ignore", "image", "improvement", "including", "increase", "input", "item", "kaggle", "knowledge", "lag", "layer", "linear", "load", "main", "max", "memory", "min", "model", "name", "neuron", "next", "not", "notebook", "np", "order", "output", "parameter", "past", "png", "predict", "prediction", "preprocessing", "processing", "python", "range", "rare", "reduce", "result", "row", "run", "scaler", "set", "several", "shape", "six", "size", "slide", "step", "store", "submission", "those", "training", "transformation", "transpose", "type", "up", "usage", "value", "window"], "potential_description_queries_len": 88, "potential_script_queries": ["numpy"], "potential_script_queries_len": 1, "potential_entities_queries": ["correct", "main", "python"], "potential_entities_queries_len": 3, "potential_extra_queries": ["test"], "potential_extra_queries_len": 1, "all_components_potential_queries_len": 90}