{"name": "chest x ray pneumonia cnn transfer learning ", "full_name": " h1 Chest X Ray Pneumonia Image Classification w Convolutional Neural Networks and Transfer Learning h1 Overview h1 Content h1 Dataset Information h2 If you find this notebook useful support with an upvote h1 Importing Packages and Dataset h1 Exploring the Data h1 Preparing the Data h1 Custom CNN h1 Transfer Learning h1 Fine Tuning h1 Performance Metrics h1 References h2 If you find this notebook useful support with an upvote ", "stargazers_count": 0, "forks_count": 0, "description": "com tolgadincer labeled chest xray images Content Dataset Information Importing Packages and Dataset Exploring the Data Preparing the Data Custom Model Transfer Learning Fine Tuning Performance Metrics References Dataset Information This dataset contains 5 856 validated Chest X Ray images. Before we move on to the next section we will take a look at a few examples from each dataset. Then we include our last few layers including the one responsible for generating the output. Custom CNNLet s define our first model from scratch and see how it performs. With Keras Image Data Generator we can rescale the pixel values and apply random transformation techniques for data augmentation on the fly. Such capabilities are also confirmed by the high ROC AUC value. In this dataset version 3 there is one folder representing the train set and another one for the test set. Preparing the Data First we need to create a validation set. Now we are ready for the next stage creating and training the image classification models. We apply those generators on each dataset using the flow_from_dataframe method. Even without expertise on the medical field it s reasonable to assume that false negatives are more costly than false positives in this case. Transfer Learning The second approach called transfer learning consists of using a pretrained model as a feature extractor. io api applications https keras. This model was already trained in another dataset ImageNet. In this notebook the selected model was the ResNet152V2 available on the Keras Package link https keras. Now we are going to unfreeze a few of its last layers and continue the training tuning the weights from these layers according to our dataset. All chest X ray imaging was performed as part of patients routine clinical care. The train_datagen includes some transformations to augment the train set. org guide keras transfer_learning https www. com tutorial on keras flow from dataframe 1fd4493d237c https github. Chest X ray images anterior posterior were selected from retrospective cohorts of pediatric patients of one to five years old from Guangzhou Women and Children s Medical Center Guangzhou. The train folder is later split in the notebook into train validation sets. Now we re going to load the images from the folders and prepare them to feed our models. The val_datagen is used to simply rescale the validation and test sets. In order to account for any grading errors the evaluation set was also checked by a third expert. Both are slightly imbalanced having more samples from the positive class Pneumonia with the training set being a little more imbalanced. We begin by defining the data generators. com mrdbourke tensorflow deep learning blob main 03_convolutional_neural_networks_in_tensorflow. io api applications resnet resnet152v2 function. com tutorial on keras flow from dataframe 1fd4493d237c Setting callbakcs Input shape width height color channels Block One Block Two Block Three Head Final Layer Output Input shape width height color channels Head Final Layer Output Freeze all layers except for the Check which layers are tuneable trainable. The images are split into a training set and a testing set of independent patients. org api_docs python tf keras preprocessing image ImageDataGenerator https keras. Note I m using the third version of the Chest X Ray dataset link https www. Images are labeled as disease NORMAL BACTERIA VIRUS randomized patient ID image number of a patient. Performance Metrics The recall was close to 100. As expected the fine tuning approach has reached the best score. Chest X Ray Pneumonia Image Classification w Convolutional Neural Networks and Transfer Learning OverviewThe goal of this notebook is to use Convolutional Neural Networks on Chest X Ray images to determine which samples are from patients with Pneumonia. I use three different approaches for image classification 1 A simple CNN 2 Transfer Learning using a pretrained model with frozen layers as the base for feature extraction and 3 Fine Tuning unfreezing the last layers of the pretrained model. The diagnoses for the images were then graded by two expert physicians before being cleared for training the AI system. To do that we apply a simple stratified split on the original train dataset using 80 for actual training and 20 for validation purposes. Fine Tuning Our last approach is called Fine Tuning. We define two different generators. Reaching such recall with a relatively small dataset for training as this one while also reaching a pretty good recall is a good indicative of the model s capabilities. Apart from the transformations defined in each generator the images are also resized based on the target_size set. For the analysis of chest x ray images all chest radiographs were initially screened for quality control by removing all low quality or unreadable scans. io api applications resnet resnet152v2 function If you find this notebook useful support with an upvote https vijayabhaskar96. If you find this notebook useful support with an upvote Importing Packages and Dataset Exploring the Data Let s check the target distribution on each setThe distributions from these datasets are a little different from each other. What we do here is to set include_top to false removing the head responsible for assigning the classes in this other dataset and keep all the previous layers. We end this notebook by showing a few performance metrics. In the last section all the layers from the pretrained model were frozen preserving the weights calculated during its training on the ImageNet dataset. References https vijayabhaskar96. ", "id": "jonaspalucibarbosa/chest-x-ray-pneumonia-cnn-transfer-learning", "size": "6091", "language": "python", "html_url": "https://www.kaggle.com/code/jonaspalucibarbosa/chest-x-ray-pneumonia-cnn-transfer-learning", "git_url": "https://www.kaggle.com/code/jonaspalucibarbosa/chest-x-ray-pneumonia-cnn-transfer-learning", "script": "sklearn.metrics get_model tensorflow.random tensorflow.keras.preprocessing.image tensorflow.keras.models numpy.random seaborn numpy callbacks seed get_pretrained sklearn.model_selection sklearn metrics ImageDataGenerator matplotlib.pyplot tensorflow pandas set_seed tensorflow.keras accuracy_score Model layers matplotlib keras train_test_split ", "entities": "(('Then we', 'responsible output'), 'include') (('s', 'little other'), 'find') (('First we', 'validation set'), 'need') (('images', 'target_size also set'), 'resize') (('diagnoses', 'AI system'), 'grade') (('chest X ray imaging', 'clinical care'), 'perform') (('Now we', 'dataset'), 'go') (('false negatives', 'case'), 's') (('com tutorial', 'dataframe https 1fd4493d237c github'), 'flow') (('samples', 'Pneumonia'), 'be') (('do', 'previous layers'), 'be') (('We', 'flow_from_dataframe method'), 'apply') (('we', 'fly'), 'rescale') (('ResNet152V2', 'Keras Package link https available keras'), 'be') (('tuning fine approach', 'best score'), 'reach') (('Such capabilities', 'ROC AUC also high value'), 'confirm') (('model', 'already dataset'), 'train') (('you', 'upvote https'), 'io') (('Chest X ray images anterior posterior', 'Guangzhou one to five years old Women'), 'select') (('Performance recall', '100'), 'Metrics') (('images', 'testing independent patients'), 'split') (('layers', 'ImageNet dataset'), 'freeze') (('we', 'dataset'), 'take') (('train_datagen', 'train set'), 'include') (('Now we', 'models'), 'go') (('We', 'performance a few metrics'), 'end') (('dataset', 'Chest X Ray 5 856 validated images'), 'label') (('layers', 'Check'), 'flow') (('Reaching', 'good capabilities'), 'be') (('val_datagen', 'simply validation sets'), 'use') (('chest radiographs', 'low quality'), 'screen') (('next stage', 'image classification models'), 'be') (('train folder', 'train validation sets'), 'split') (('how it', 'scratch'), 'define') (('training set', 'class positive Pneumonia'), 'imbalanced') (('we', 'validation purposes'), 'apply') (('I', 'Chest X Ray dataset link https www'), 'note') (('disease NORMAL BACTERIA VIRUS', 'patient'), 'label') (('com mrdbourke', 'deep learning blob main 03_convolutional_neural_networks_in_tensorflow'), 'tensorflow') (('evaluation set', 'also third expert'), 'in') (('We', 'data generators'), 'begin') (('Transfer 1 simple CNN 2 Learning', 'pretrained model'), 'use') ", "extra": "['disease', 'patient', 'test']", "label": "Perfect_files", "potential_description_queries": ["account", "api", "apply", "approach", "augment", "augmentation", "best", "blob", "check", "chest", "classification", "close", "color", "control", "create", "data", "dataframe", "dataset", "define", "disease", "distribution", "end", "evaluation", "expected", "extraction", "feature", "feed", "field", "find", "flow", "folder", "function", "generator", "grading", "head", "height", "high", "image", "include", "including", "initially", "io", "labeled", "learning", "link", "little", "load", "look", "main", "medical", "model", "move", "need", "next", "notebook", "number", "order", "part", "patient", "performance", "pixel", "positive", "prepare", "preprocessing", "pretrained", "python", "random", "re", "recall", "rescale", "routine", "scratch", "second", "section", "selected", "set", "shape", "split", "stage", "support", "target", "tensorflow", "test", "testing", "tf", "those", "train", "training", "transfer", "transformation", "tuning", "tutorial", "validation", "version", "while", "width"], "potential_description_queries_len": 96, "potential_script_queries": ["matplotlib", "numpy", "seaborn", "sklearn"], "potential_script_queries_len": 4, "potential_entities_queries": ["classification", "high", "link", "positive"], "potential_entities_queries_len": 4, "potential_extra_queries": [], "potential_extra_queries_len": 0, "all_components_potential_queries_len": 99}