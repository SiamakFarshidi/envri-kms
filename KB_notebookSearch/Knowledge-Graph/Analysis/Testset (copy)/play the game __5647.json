{"name": "play the game ", "full_name": " h1 Introduction h1 Join the competition h1 Getting started h1 Defining agents h3 obs h3 config h1 Evaluating agents h1 Your turn h2 These agents are quite simple As the course progresses you ll create increasingly complex agents Continue to make your first competition submission ", "stargazers_count": 0, "forks_count": 0, "description": "_Which agent do you think performs better against the random agent the agent that always plays in the middle agent_middle or the agent that chooses the leftmost valid column agent_leftmost Let s find out It looks like the agent that chooses the leftmost valid column performs best Your turnThese agents are quite simple. Each player uses a different color usually red or yellow and the objective of the game is to be the first player to get four discs in a row. As the course progresses you ll create increasingly complex agents Continue to make your first competition submission https www. These agents will be smart enough to defeat many novice players In the final lesson you ll experiment with cutting edge algorithms from the field of reinforcement learning. _If you see a Submit Agent button instead of a Join Competition button you have already joined the competition and don t need to do so again. mark the piece assigned to the agent either 1 or 2 obs. com c connectx overview and click on the Join Competition button. You can use the player above to view the game in detail every move is captured and can be replayed. For instance for this game board obs. Join the competitionThroughout the course you ll test your agents performance by competing against agents that other users have created. The outcome of a single game is usually not enough information to figure out how well our agents are likely to perform. In the code cell below The first agent behaves identically to the random agent above. The second agent always selects the middle column whether it s valid or not Note that if any agent selects an invalid move it loses the game. _To view the details of this function click on the Code button below. columns number of columns in the game board 7 for Connect Four config. The next two lessons focus on traditional methods for building game AI. It returns an integer with the selected column where indexing starts at zero. So the returned value is one of 0 6 inclusive. _ This takes you to the rules acceptance page. These rules govern how many submissions you can make per day the maximum team size and other competition specific details. We use 1 to track player 1 s discs and 2 to track player 2 s discs. In the first lesson you ll learn how to set up the game environment and create your first agent. if the board has seven rows the column has fewer than seven discs. The third agent selects the leftmost valid column. board would be 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 2 2 0 0 0 0 2 1 2 0 0 0 0 1 1 1 0 0 0 0 2 1 2 0 2 0. So what are obs and config exactly obs obs contains two pieces of information obs. board is a Python list that shows the locations of the discs where the first row appears first followed by the second row and so on. com kernels fork 7677818. For fairness each agent goes first half of the time. Getting startedThe game environment comes equipped with agents that have already been implemented for you. We ll start with a few examples to provide some context. rows number of rows in the game board 6 for Connect Four config. To see a list of these default agents run The random agent selects uniformly at random from the set of valid moves. The agents that you build will come up with gameplay strategies much like humans do gradually and with experience. org wiki Connect_Four is a game where two players alternate turns dropping colored discs into a vertical grid. In the code cell below this agent plays one game round against a copy of itself. Your agent should be implemented as a Python function that accepts two arguments obs and config. Make sure that the code makes sense to you Evaluating agentsTo have the custom agents play one game round we use the same env. Then click on I Understand and Accept to indicate that you will abide by the competition rules. You must accept the competition rules in order to participate. _Try this now _As you ll soon see this information will prove incredibly useful for brainstorming ways to improve our agents. Defining agentsTo participate in the competition you ll create your own agents. Have questions or comments Visit the course discussion forum https www. Create the game environment Set debug True to see the errors if your agent refuses to run List of available default agents Two random agents play one game round Show the game Selects random valid column Selects middle column Selects leftmost valid column Agents play one game round Show the game Use default Connect Four setup Agent 1 goes first roughly half the time Agent 2 goes first roughly half the time. In this course you will build your own intelligent agents to play the game. config config contains three pieces of information config. Introduction Connect Four https en. inarow number of pieces a player needs to get in a row in order to win 4 for Connect Four Take the time now to investigate the three agents we ve defined above. To do this we ll use the get_win_percentages function defined in a hidden code cell. To get a better idea we ll calculate the win percentages for each agent averaged over multiple games. board the game board a Python list with one item for each grid location obs. com learn intro to game ai and reinforcement learning discussion to chat with other learners. In Connect Four a move is considered valid if there s still space in the column to place a disc i. run method as before. To join the competition open a new window with the competition page https www. ", "id": "alexisbcook/play-the-game", "size": "5647", "language": "python", "html_url": "https://www.kaggle.com/code/alexisbcook/play-the-game", "git_url": "https://www.kaggle.com/code/alexisbcook/play-the-game", "script": "agent_random kaggle_environments make numpy agent_leftmost agent_middle evaluate get_win_percentages ", "entities": "(('agent', 'first time'), 'go') (('you', 'game'), 'build') (('you', 'reinforcement learning'), 'be') (('config config', 'information config'), 'contain') (('you', 'own agents'), 'participate') (('where two players', 'vertical grid'), 'be') (('you', 'competition rules'), 'click') (('increasingly complex agents', 'competition submission https first www'), 'continue') (('soon information', 'agents'), 'Try') (('much humans', 'gradually experience'), 'come') (('we', 'same env'), 'make') (('we', 'code hidden cell'), 'use') (('This', 'rules acceptance page'), '_') (('questions', 'course discussion forum https www'), 'have') (('You', 'order'), 'accept') (('win percentages', 'multiple games'), 'calculate') (('join', 'competition page https www'), 'open') (('We', 'context'), 'start') (('you', 'team maximum size'), 'govern') (('that', 'already you'), 'get') (('where indexing', 'zero'), 'return') (('that', 'two arguments'), 'implement') (('it', 'game'), 'select') (('other users', 'that'), 'join') (('move', 'detail'), 'use') (('we', 'now three agents'), 'number') (('where first row', 'first second row'), 'be') (('move', 'disc i.'), 'consider') (('Join Competition instead you', 'don need'), '_') (('usually red objective', 'row'), 'use') (('So returned value', '6 inclusive'), 'be') (('We', '2 s discs'), 'use') (('you', 'first agent'), 'learn') (('third agent', 'leftmost valid column'), 'select') (('best turnThese agents', 'performs'), 'think') (('1 first roughly half time Agent', 'default'), 'create') (('usually enough how well agents', 'single game'), 'be') (('next two lessons', 'game AI'), 'focus') (('So exactly obs obs', 'information obs'), 'be') (('column', 'fewer than seven discs'), 'have') ", "extra": "['outcome', 'test']", "label": "Perfect_files", "potential_description_queries": ["agent", "best", "board", "build", "button", "calculate", "cell", "code", "color", "colored", "column", "competition", "config", "copy", "course", "create", "custom", "day", "default", "detail", "disc", "edge", "environment", "every", "experiment", "field", "figure", "final", "find", "function", "game", "grid", "half", "idea", "improve", "indicate", "instance", "integer", "item", "join", "learn", "learning", "lesson", "list", "maximum", "method", "middle", "move", "multiple", "need", "new", "next", "not", "number", "objective", "open", "order", "out", "outcome", "overview", "page", "per", "performance", "place", "player", "provide", "random", "row", "run", "second", "selected", "sense", "set", "setup", "single", "size", "space", "start", "submission", "team", "test", "think", "time", "track", "up", "valid", "value", "vertical", "view", "window"], "potential_description_queries_len": 90, "potential_script_queries": ["evaluate", "numpy"], "potential_script_queries_len": 2, "potential_entities_queries": ["maximum", "second", "time"], "potential_entities_queries_len": 3, "potential_extra_queries": [], "potential_extra_queries_len": 0, "all_components_potential_queries_len": 92}