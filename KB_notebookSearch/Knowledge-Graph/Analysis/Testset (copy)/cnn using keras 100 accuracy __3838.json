{"name": "cnn using keras 100 accuracy ", "full_name": " h1 Description of the Sign Language MNIST Problem American Sign Language h1 Loading the ASL dataset h1 Data Visualization and Preprocessing h1 Data Augmentation h1 CONVOLUTIONAL NEURAL NETWORKS TO THE RESCUE h1 Training The Model h1 Analysis after Model Training ", "stargazers_count": 0, "forks_count": 0, "description": "The idea is to alter the training data with small transformations to reproduce the variations. com kaggle docker python For example here s several helpful packages to load in linear algebra data processing CSV file I O e. Once our model is ready we fit the training dataset. ASL is expressed by movements of the hands and face. png Training The Model Analysis after Model Training Some of the Correctly Predicted Classes This Python 3 environment comes with many helpful analytics libraries installed It is defined by the kaggle python docker image https github. Label Count Normalize the data Reshaping the data from 1 D to 3 D as required through input by CNN s With data augmentation to prevent overfitting set input mean to 0 over the dataset set each sample mean to 0 divide inputs by std of the dataset divide each input by its std apply ZCA whitening randomly rotate images in the range degrees 0 to 180 Randomly zoom image randomly shift images horizontally fraction of total width randomly shift images vertically fraction of total height randomly flip images randomly flip images. The Network takes an input image and uses a filter or kernel to create a feature map describing the image. This process is repeated all over the image. For example running this by clicking run or pressing Shift Enter will list all files under the input directory Any results you write to the current directory are saved as output. For the data augmentation i choosed to Randomly rotate some training images by 10 degreesRandomly Zoom by 10 some training imagesRandomly shift images horizontally by 10 of the widthRandomly shift images vertically by 10 of the heightI did not apply a vertical_flip nor horizontal_flip since it could have lead to misclassify. Description of the Sign Language MNIST Problem American Sign Language American Sign Language ASL is a complete natural language that has the same linguistic properties as spoken languages with grammar that differs from English. pixel784 which represent a single 28x28 pixel image with grayscale values between 0 255. This working can be seen in the following figure image. png Loading the ASL dataset Data Visualization and Preprocessing The dataset seems balanced as for each training label enough training examples exist We perform a grayscale normalization to reduce the effect of illumination s differences. Each training and test case represents a label 0 25 as a one to one map for each alphabetic letter A Z and no cases for 9 J or 25 Z because of gesture motions. By applying just a couple of these transformations to our training data we can easily double or triple the number of training examples and create a very robust model. The training data 27 455 cases and test data 7172 cases are approximately half the size of the standard MNIST but otherwise similar with a header row of label pixel1 pixel2. Moreover the CNN converges faster on 0. read_csv Input data files are available in the. We can make your existing dataset even larger. The coresponding numbers in both matrices are multiplied and and added to yield a single number describing that input space. Some popular augmentations people use are grayscales horizontal flips vertical flips random crops color jitters translations rotations and much more. png attachment image. The Sign Language MNIST data came from greatly extending the small number 1704 of the color images included as not cropped around the hand region of interest. CONVOLUTIONAL NEURAL NETWORKS TO THE RESCUE A Convolutional Neural Network is a special type of an Artificial Intelligence implementation which uses a special mathematical matrix manipulation called the convolution operation to process data from the images. Approaches that alter the training data in ways that change the array representation while keeping the label the same are known as data augmentation techniques. The dataset format is patterned to match closely with the classic MNIST. The original hand gesture image data represented multiple users repeating the gesture against different backgrounds. A convolution does this by multiplying two matrices and yielding a third smaller matrix. Preview of first 10 images Data AugmentationIn order to avoid overfitting problem we need to expand artificially our dataset. To create new data an image pipeline was used based on ImageMagick and included cropping to hands only gray scaling resizing and then creating at least 50 variations to enlarge the quantity. In the convolution operation we take a filter usually 2x2 or 3x3 matrix and slide it over the image matrix. It is the primary language of many North Americans who are deaf and hard of hearing and is used by many hearing people as well. ", "id": "madz2000/cnn-using-keras-100-accuracy", "size": "3838", "language": "python", "html_url": "https://www.kaggle.com/code/madz2000/cnn-using-keras-100-accuracy", "git_url": "https://www.kaggle.com/code/madz2000/cnn-using-keras-100-accuracy", "script": "Flatten sklearn.metrics keras.preprocessing.image LabelBinarizer keras.layers keras.callbacks Dropout Sequential MaxPool2D Conv2D seaborn numpy ReduceLROnPlateau sklearn.model_selection ImageDataGenerator confusion_matrix matplotlib.pyplot Dense pandas classification_report BatchNormalization sklearn.preprocessing keras.models train_test_split ", "entities": "(('working', 'figure following image'), 'see') (('who', 'many people'), 'be') (('dataset format', 'closely classic MNIST'), 'pattern') (('it', 'misclassify'), 'choose') (('training case', 'gesture 25 motions'), 'represent') (('ASL', 'hands'), 'express') (('process', 'all image'), 'repeat') (('we', 'training dataset'), 'be') (('convolution', 'third smaller matrix'), 'do') (('we', 'artificially dataset'), 'preview') (('training data', 'label pixel1 pixel2'), 'be') (('hand gesture image original data', 'different backgrounds'), 'represent') (('vertically fraction', 'randomly images'), 'Normalize') (('It', 'python docker image https kaggle github'), 'Training') (('that', 'data augmentation techniques'), 'approach') (('you', 'output'), 'list') (('that', 'English'), 'be') (('which', '0'), 'pixel784') (('We', 'differences'), 'seem') (('idea', 'variations'), 'be') (('read_csv Input data files', 'the'), 'be') (('grayscales horizontal vertical flips', 'crops color jitters translations rotations'), 'be') (('Sign Language MNIST data', 'interest'), 'come') (('Network', 'image'), 'take') (('coresponding numbers', 'input space'), 'be') (('which', 'images'), 'be') (('image pipeline', 'quantity'), 'use') (('we', 'image matrix'), 'take') (('we', 'very robust model'), 'double') ", "extra": "['test']", "label": "Perfect_files", "potential_description_queries": ["apply", "array", "augmentation", "case", "color", "convolution", "could", "create", "current", "data", "dataset", "directory", "double", "effect", "environment", "even", "expand", "faster", "feature", "figure", "file", "filter", "fit", "flip", "following", "format", "gray", "grayscale", "half", "hand", "header", "height", "idea", "image", "implementation", "input", "kaggle", "kernel", "label", "language", "lead", "least", "letter", "linear", "list", "load", "map", "match", "matrix", "mean", "model", "multiple", "need", "new", "no", "normalization", "not", "number", "operation", "order", "overfitting", "people", "perform", "pipeline", "pixel", "png", "prevent", "problem", "processing", "python", "random", "range", "reduce", "region", "representation", "robust", "rotate", "row", "run", "running", "sample", "scaling", "set", "several", "shift", "similar", "single", "size", "slide", "special", "standard", "std", "test", "through", "total", "training", "type", "under", "vertical", "while", "who", "width", "write", "zoom"], "potential_description_queries_len": 104, "potential_script_queries": ["numpy", "preprocessing", "seaborn"], "potential_script_queries_len": 3, "potential_entities_queries": ["color", "following", "kaggle", "vertical"], "potential_entities_queries_len": 4, "potential_extra_queries": [], "potential_extra_queries_len": 0, "all_components_potential_queries_len": 107}