{"name": "retina data exploration ", "full_name": " h1 Library imports h1 Prepare input data h2 Read and process images h2 Prepare the data from a list of files h2 The following code h1 Build CNN with ResNet architechture h2 Step1 Define Identity Block h2 Step2 Define convolution Block h2 Step3 Pull the model together h1 A generic convolutional neural network model h2 Create and compile the mini Resnet model h2 Train the mini Resnet model h2 Make predictions using the mini ResNet model h1 Training the Generic CNN models ", "stargazers_count": 0, "forks_count": 0, "description": "com kaggle docker python For example here s several helpful packages to load in linear algebra data processing CSV file I O e. Prepare the data from a list of files The following function Reads an image from a fils flips it from left to right flips it upside down add all three images and their labes to the dataset The following code1. prepares training and testing data for modeling Build CNN with ResNet architechture Step1 Define Identity Block Input to the shortcut has the same dimension as the output activation. We also need to do additional processing. read_csv normalizes the histogram of images imi minval will turn the color range between 0 imrange and the scaleing will stretch the range between 0 255 read image from file convert 2 grayscale turn it into a binary image find contours find the biggest area find the bounding rect crop image resize to im_size X im_size size brighter image deemer image add all the images an labels Input data files are available in the. I suspect that histogram equalization may loose some defining features of disease classes. ensure that the base of the color histogram stretches from 0 255. You ll need this later to add back to the main path. prepares the list of image files and corresponding labels2. The CONV2D layer is used to resize the shortcut input to a different dimension so that the dimensions match up in the final addition needed to add the shortcut value back to the main path. Step3 Pull the model together A generic convolutional neural network model Create and compile the mini Resnet model Train the mini Resnet model Make predictions using the mini ResNet model Training the Generic CNN models This Python 3 environment comes with many helpful analytics libraries installed It is defined by the kaggle python docker image https github. Step2 Define convolution Block In this case there is a CONV2D layer in the shortcut path. And this is not specific to a class label this has to do with lighting conditions when the picture was taken. histogram normalization i. reads and processes images in those files 3. Note that this is not the same as histogram equalization where the shape of the histogram is flattened over a full base. For example running this by clicking run or pressing Shift Enter will list all files under the input directory Create a list of image files and labels store the filenames here store the labels here Shuffle the files and labels combine the lists shuffle two lists together to keep order unzip the shuffled lists Train test devide 70 30 size of the images training data test data GRADED FUNCTION identity_block defining name basis Retrieve Filters Save the input value. Library imports Prepare input data Read and process images The following function reads an image from a file autocrops it and scales it to 128X128. First component of main path Second component of main path 3 lines Third component of main path 2 lines Final step Add shortcut value to main path and pass it through a RELU activation 2 lines defining name basis Retrieve Filters Save the input value First component of main path Second component of main path 3 lines Third component of main path 2 lines Final step Add shortcut value to main path and pass it through a RELU activation 2 lines Define the input as a tensor with shape input_shape Zero Padding Stage 1 Stage 2 Stage 3 Stage 4 Stage 5 AVGPOOL output layer Create model Define the input as a tensor with shape input_shape Zero Padding Stage 1 Stage 2 Stage 3 Stage 4 dense layer output layer Create model Create and compile the ResNet models train the resnet model summarize history for accuracy summarize history for loss Create and compile the generic CNN models train the general cnn model summarize history for loss. We need to make sure that all images have the same range of values i. For instance I noticed that some of the images are too dim compared to the others. ", "id": "tsantra/retina-data-exploration", "size": "1877", "language": "python", "html_url": "https://www.kaggle.com/code/tsantra/retina-data-exploration", "git_url": "https://www.kaggle.com/code/tsantra/retina-data-exploration", "script": "Flatten keras.layers identity_block convolutional_block prepare_data numpy.random Conv2D get_file AveragePooling2D numpy Input model_to_dot seed image matplotlib.pyplot ResNetS Activation Dense keras.utils tensorflow pandas GlobalMaxPooling2D set_random_seed imshow BatchNormalization plot_model read_and_process_image preprocess_input genCNN load_model keras.utils.data_utils keras.preprocessing keras.initializers Model layer_utils layers MaxPooling2D Add keras.applications.imagenet_utils SVG normalize_histograms keras keras.utils.vis_utils glorot_uniform keras.models IPython.display ZeroPadding2D ", "entities": "(('data labels Input files', 'the'), 'normalize') (('where shape', 'full base'), 'note') (('cnn general model', 'loss'), 'component') (('Retrieve Filters', 'input value'), 'list') (('following function', 'dataset'), 'prepare') (('We', 'also additional processing'), 'need') (('dimensions', 'back main path'), 'use') (('when picture', 'lighting conditions'), 'be') (('histogram equalization', 'disease classes'), 'suspect') (('It', 'python docker image https kaggle github'), 'pull') (('images', 'values i.'), 'need') (('prepares', 'output activation'), 'have') (('You', 'later back main path'), 'need') (('process following function', '128X128'), 'prepare') (('some', 'too others'), 'notice') ", "extra": "['disease', 'test']", "label": "Perfect_files", "potential_description_queries": ["accuracy", "area", "binary", "bounding", "case", "cnn", "color", "combine", "compile", "convert", "convolution", "convolutional", "crop", "data", "dataset", "dim", "dimension", "directory", "disease", "ensure", "environment", "file", "final", "find", "following", "function", "general", "generic", "grayscale", "histogram", "history", "image", "input", "instance", "kaggle", "label", "layer", "left", "linear", "list", "load", "main", "match", "mini", "model", "name", "need", "network", "neural", "normalization", "not", "order", "output", "path", "picture", "processing", "python", "range", "read", "resize", "right", "run", "running", "several", "shape", "shuffle", "size", "step", "store", "summarize", "tensor", "test", "testing", "those", "through", "train", "training", "turn", "under", "up", "value"], "potential_description_queries_len": 81, "potential_script_queries": ["imshow", "numpy", "tensorflow"], "potential_script_queries_len": 3, "potential_entities_queries": ["general", "kaggle"], "potential_entities_queries_len": 2, "potential_extra_queries": [], "potential_extra_queries_len": 0, "all_components_potential_queries_len": 83}