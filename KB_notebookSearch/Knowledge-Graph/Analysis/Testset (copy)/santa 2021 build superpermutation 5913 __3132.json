{"name": "santa 2021 build superpermutation 5913 ", "full_name": " h1 About h2 References h1 Data preperation h1 Approximating the Superpermutation length h1 Generating the Superpermutation h1 Split and extend Superpermutation for competition h1 Submission ", "stargazers_count": 0, "forks_count": 0, "description": "In the example 1234567. Note till now I could not figure out where I left the remaining 7 that d lead to the best known solution of 5609. While calculating the suppermermutation we assigned each permutation to one of three groups data. Overlappings pythonredc 0for ov in overlaps redc ov ov grp_compration_rate with grp_compration_rate ov 5 5 5 4 4 4 3 3 3 2 2 2 1 1 1 3447 So I expect a Supperpermutation length of 9360 3447 5913. 7123456 1234567123456 Each of these permutations gets assigned to the same group roll_grp. com kaggle docker python For example here s several helpful packages to load linear algebra data processing CSV file I O e. The possible overlap sizes are 5 4 3 2 and 1. Next I build a rolling value for each permutation. It is likely that the overlapping characters produce some overhead. Generating the SuperpermutationCalculate the short superpermutation Split and extend Superpermutation for competitionFor the competition the supermermutation needs to be split in three parts. We chop the code in three pieces with overlapping ends and beginnings so we do not loose permutations on the split points. Putting data in a table makes it easy to examine them. We end up with the longest string having 2533 characters. AboutI tried to rebuild the shortest superpermutation for n 7 on my own and build the submission on top of it. Assert no permutation is missing Find best Santa couple couples that are equaly distributed among the three strings I pick 45 as Santa couple and add all missing Santa couple permutation at the end of the Strings. Maybe there is a chance to tweak the solution later on while building the superpermutation. com ilialar santa 2021 baseline and optimization ideas. Now I combine different roll_val with the most possible overlapping. input directory For example running this by clicking run or pressing Shift Enter will list all files under the input directory You can write up to 20GB to the current directory kaggle working that gets preserved as output when you create a version using Save Run All You can also write temporary files to kaggle temp but they won t be saved outside of the current session from https www. read_csv Input data files are available in the read only. com ilialar santa 2021 baseline and optimization ideas put processed permutation in one of three groups. Example java12345671 23456 23456 17234561 12345671 23456 17234561 Approximating the Superpermutation lengthIf we just contat the roll_val we get a length of 9360 len roll_val count distinct roll_grp 2 NUM_SYMBOLS 1 NUM_SYMBOLS 1 13 720 9360 We can reduce the length by the overlappings by 3447. It s likely that the score doesn t improve further with my approach because the roll_vall always ties 7 permutations together see comment section below. com ilialar santa 2021 baseline and optimization ideas Data preperationLet s define the number of symbols for the superpermutation in this competition n 7 Build all permutations I put the permutation in a DataFrame. Submission This Python 3 environment comes with many helpful analytics libraries installed It is defined by the kaggle python Docker image https github. Sofare the shortest known solution for the superpermutiatio is 5906 https www. Let s try to calculate for each group an independent superpermutation. We gopt rid of the overlapping characters and reduced the longest string from 1977 to 1973 characters. References Some helpful info https www. That already implicitly includes 7 permutations in one String with length 13. There is a lot of opportunity to speed up the calculations further on but that s not on my focus today. Here is an example java1234567. ", "id": "joatom/santa-2021-build-superpermutation-5913", "size": "3132", "language": "python", "html_url": "https://www.kaggle.com/code/joatom/santa-2021-build-superpermutation-5913", "git_url": "https://www.kaggle.com/code/joatom/santa-2021-build-superpermutation-5913", "script": "pandas numpy fill_q gen_code ", "entities": "(('Next I', 'permutation'), 'build') (('we', 'groups three data'), 'assign') (('supermermutation', 'three parts'), 'generate') (('we', 'split points'), 'chop') (('So I', '3447 5913'), 'pythonredc') (('That', 'length'), 'include') (('2 1 720 We', '3447'), 'java12345671') (('t', 'https www'), 'list') (('group', 'independent superpermutation'), 'let') (('It', 'kaggle python Docker image https github'), 'submission') (('We', '2533 characters'), 'end') (('1234567123456 Each', 'group same roll_grp'), '7123456') (('d', '5609'), 'note') (('We', '1973 characters'), 'rid') (('I', 'DataFrame'), 'ilialar') (('roll_vall', 'comment together section'), 's') (('Sofare', 'superpermutiatio'), 'be') (('overlapping characters', 'overhead'), 'be') (('read_csv Input data files', 'read'), 'be') (('I', 'Strings'), 'assert') (('it', 'them'), 'make') (('further that', 'focus'), 'be') (('AboutI', 'it'), 'try') (('Now I', 'most possible overlapping'), 'combine') (('ilialar santa 2021 baseline ideas', 'three groups'), 'com') ", "extra": "['test']", "label": "Perfect_files", "potential_description_queries": ["approach", "baseline", "best", "build", "calculate", "code", "combine", "comment", "competition", "could", "count", "create", "current", "data", "define", "directory", "distributed", "end", "environment", "extend", "figure", "file", "group", "image", "improve", "info", "input", "kaggle", "lead", "left", "len", "length", "linear", "list", "load", "longest", "lot", "missing", "most", "my", "no", "not", "number", "optimization", "out", "output", "overlap", "permutation", "processing", "python", "read", "reduce", "run", "running", "score", "section", "session", "several", "short", "shortest", "solution", "speed", "split", "string", "submission", "table", "try", "under", "up", "value", "version", "while", "write"], "potential_description_queries_len": 73, "potential_script_queries": ["numpy"], "potential_script_queries_len": 1, "potential_entities_queries": ["data", "python"], "potential_entities_queries_len": 2, "potential_extra_queries": ["test"], "potential_extra_queries_len": 1, "all_components_potential_queries_len": 75}