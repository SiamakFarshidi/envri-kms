{"name": "time series plotting optional ", "full_name": " h1 Time series plotting Optional h2 Types of time series variables h2 Visualizing by grouping h2 Some new plot types h3 Lag plot h3 Autocorrelation plot h2 Exercises ", "stargazers_count": 0, "forks_count": 0, "description": "A line chart depicting the datetime column in shelter_outcomes aggregated by year. Lag plots are extremely useful because they are a simple way of checking datasets for this kind of periodicity. To see the answers hit the Input button below to un hide the code. Of course in this short optional section we re only scratching the surface of what you can do with do with time series data. In the strong case dates act as an explicit index on your dataset. Because timestampls are just interval variables understanding date time data don t require any newfangled visualization techniques Some new plot types Lag plotOne of these plot types is the lag plot. A good example is the following dataset on stock prices This dataset which is indexed by the date the data being collected is being collected in the period of a day. Much clearer It looks like actually 2014 and 2015 have an almost equal presence in the dataset. Note that they only work on strong case timeseries data. org pandas docs stable generated pandas. Period dtype documented here https pandas. Visualizing by groupingI said earlier that time is a special case of an interval variable. The values in the record provide information about that stock within that period. But a period can technically be for any length of time. Time series data tends to exhibit a behavior called periodicity rises and peaks in the data that are correlated with time. It looks like birth dates for the animals in the dataset peak at around 2015 but it s hard to tell for sure because the data is rather noisy. We ll examine the two most common ways in this notebook. For example in the following dataset of animal shelter outcomes there are two columns datetime and date_of_birth which describe facts about the animal in the observation. There s an entire literature around how to work with time series variables that we are not discussing here. This demonstrates the data visualization benefit of resampling by choosing certain periods you can more clearly visualize certain aspects of the dataset. The autocorrelation plot is a multivariate summarization type plot that lets you check every periodicity at the same time. Time series plotting Optional In all of the sections thus far our visualizations have focused on and used numeric variables either categorical variables which fall into a set of buckets or interval variables which fall into an interval of values. Time series variables are really a special case of what other type of variable Why is resampling useful in a data visualization context What is lag What is autocorrelation For the exercises that follow try forking this notebook and replicating the plots that follow. Time is linear and infinitely fine grained so really time series values are a kind of special case of interval variables. A lag plot of cryptocurrency crypto trading volume from the last 250 days hint use tail. Does that mean that we can use the tools and techniques familiar to us from earlier sections with time series data as well Of course For example here s a line plot visualizing which birth dates are the most common in the dataset. But these are the basics and hopefully enough to get you started analyzing your own time dependent data ExercisesTry answering the following questions. A day of frantic trading does somewhat signal that the next day will also involve frantic trading. Notice that pandas is automatically adapting the labels on the x axis to match our output type. Here is what an autocorrelation plot looks like when applied to the stock volume data It seems like the volume of trading activity is weakly descendingly correlated with trading volume from the year prior. Currently the data is by day but what if we globbed all the dates together into years This is known as resampling. Autocorrelation plotA plot type that takes this concept and goes even further with it is the autocorrelation plot. In the animal outcomes case information is record level the dates are descriptive facts and it doesn t make sense to change them. We can do this to tweak the dataset generating a result that s aggregated by year. pandas provides a whole dedicated type the pandas. So for example data from December 21st will be compared with data from December 20th which will in turn be compared with data from December 19th and so on. To put this another way the stock data is aggregated over a certain period of time so changing the time significantly changes the data. This is because pandas is datetime aware it knows that when we have data points spaced out one year apart from one another we only want to see the years in the labels and nothing else Usually the value of time series data is exposed through this sort of grouping. Dates can show up in your dataset in a few different ways. There are lots of potential resampling options we ll use Y which is short for year. html for this concept. Types of time series variablesTime series variables are populated by values which are specific to a point in time. For daily data like this using a date like this is convenient. In this notebook we will explore another type of variable a time series variable. This is known as autocorrelation. For example a gym would likely see an increase in attendance at the end of every workday hence exhibiting a periodicity of a day. An autocorrelation plot of cryptocurrency crypto trading volume. A bar would likely see a bump in sales on Friday exhibiting periodicity over the course of a week. In an autocorrelation plot the lag is on the x axis and the autocorrelation score is on the y axis. A lag plot compares data points from each observation in the dataset against data points from a previous observation. For example here is what we see when we apply a lag plot to the volume number of trades conducted in the stock data It looks like days when volume is high are somewhat correlated with one another. For example here s a similar simple bar chart which looks at the trade volume of the GOOG stock Most of the new stuff to using dates in your visualization comes down to a handful of new data processing techniques. The farther away the autocorrelation is from 0 the greater the influence that records that far away from each other exert on one another. Click the Output button on the cell below to see the answers. It does this by computing a summary statistic mdash the correlation score mdash across every possible lag in the dataset. The method for doing this in pandas resample is pretty simple. In the weak case dates act as timestamps they tell us something about when an observation occurred. There aren t any significant non random peaks in the dataset so this is good evidence that there isn t much of a time series pattern to the volume of trade activity over time. ", "id": "residentmario/time-series-plotting-optional", "size": "6980", "language": "python", "html_url": "https://www.kaggle.com/code/residentmario/time-series-plotting-optional", "git_url": "https://www.kaggle.com/code/residentmario/time-series-plotting-optional", "script": "pandas.plotting numpy lag_plot pandas autocorrelation_plot IPython.display HTML ", "entities": "(('values', 'period'), 'provide') (('time series infinitely fine so really values', 'interval variables'), 'be') (('which', 'year'), 'be') (('interval which', 'values'), 'focus') (('bar', 'week'), 'see') (('It', 'year'), 'be') (('descriptive it', 'them'), 'be') (('We', 'notebook'), 'examine') (('earlier time', 'interval special variable'), 'say') (('This', 'resampling'), 'be') (('gym', 'day'), 'see') (('somewhat next day', 'also frantic trading'), 'signal') (('you', 'time series data'), 'scratch') (('you', 'dataset'), 'demonstrate') (('method', 'pandas resample'), 'be') (('when observation', 'something'), 'date') (('pandas', 'whole dedicated type'), 'provide') (('Period dtype', 'https here pandas'), 'document') (('so changing', 'significantly data'), 'change') (('columns two which', 'observation'), 'be') (('which', 'time'), 'populate') (('you', 'same time'), 'be') (('data', 'day'), 'be') (('pandas', 'output type'), 'notice') (('extremely they', 'periodicity'), 'be') (('lag plot', 'previous observation'), 'compare') (('answers', 'code'), 'hide') (('plot Lag new plotOne', 'plot types'), 'be') (('we', 'variable'), 'explore') (('which', 'December 19th'), 'compare') (('Dates', 'a few different ways'), 'show') (('line here plot', 'birth most dataset'), 'mean') (('else Usually value', 'grouping'), 'be') (('It', 'dataset'), 'do') (('bar similar simple which', 'data processing new techniques'), 's') (('actually 2014', 'dataset'), 'clear') (('autocorrelation score', 'y axis'), 'be') (('even further it', 'concept'), 'type') (('period', 'time'), 'be') (('We', 'year'), 'do') (('they', 'case timeseries only strong data'), 'note') (('sure data', 'around 2015'), 'look') (('so this', 'time'), 'aren') (('the greater that', 'one'), 'be') (('we', 'that'), 's') (('that', 'plots'), 'be') (('when volume', 'somewhat one'), 'be') (('dependent ExercisesTry', 'following questions'), 'be') (('that', 'time'), 'tend') ", "extra": "['outcome']", "label": "Perfect_files", "potential_description_queries": ["animal", "apply", "autocorrelation", "behavior", "button", "case", "categorical", "cell", "chart", "check", "checking", "column", "concept", "context", "correlation", "course", "data", "dataset", "date", "datetime", "day", "dependent", "describe", "end", "equal", "even", "every", "evidence", "explore", "exposed", "following", "generated", "high", "increase", "index", "influence", "interval", "lag", "length", "level", "line", "linear", "match", "mean", "method", "most", "new", "next", "non", "not", "notebook", "number", "numeric", "observation", "out", "output", "pattern", "peak", "period", "plot", "plotting", "point", "potential", "processing", "provide", "random", "re", "record", "resample", "result", "score", "section", "sense", "set", "short", "signal", "similar", "something", "sort", "special", "stuff", "summary", "surface", "through", "time", "try", "turn", "type", "understanding", "up", "value", "variable", "visualization", "visualize", "volume", "work", "year"], "potential_description_queries_len": 97, "potential_script_queries": ["numpy"], "potential_script_queries_len": 1, "potential_entities_queries": ["new", "processing", "special"], "potential_entities_queries_len": 3, "potential_extra_queries": ["outcome"], "potential_extra_queries_len": 1, "all_components_potential_queries_len": 99}