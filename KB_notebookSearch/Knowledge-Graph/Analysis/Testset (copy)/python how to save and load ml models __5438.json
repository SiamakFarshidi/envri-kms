{"name": "python how to save and load ml models ", "full_name": " h1 Python How to Save and Load ML Models ", "stargazers_count": 0, "forks_count": 0, "description": "The loaded model is then used to calculate the accuracy score and predict outcomes on new unseen test data. Import the required librariesSince we want to save all of this data in a single object one possible way to do it is to create a new class which inherits from the model class which in our example is LogisticRegression. 4 Joblib also allows different compression methods such as zlib gzip bz2 and different levels of compression. deserialization While the restoring reloading of ML Model procedure is known as deserialization. Approach 1 Pickle approach Following lines of code the LR_Model which we created in the previous step is saved to file and then loaded as a new object called Pickled_RL_Model. Some additional data we could store with this approach is for example a cross validation score on the training set test data accuracy score on the test data etc. We will be covering following 3 approaches of Saving and Reloading a ML Model 1 Pickle Approach2 Joblib Approach3 Manual Save and Restore to JSON approachNow lets develop a ML Model which we shall use to Save and Reload in this Kernel ML Model Creation For the purpose of Demo we will create a basic Logistic Regression Model on IRIS Dataset. WHY We need to save and restore reload later our ML Model so as to a test our model on with new data b compare multiple models c or anything else. CONs Although this approach would be convenient for the developer it is less secure since an intruder can view and amend the content of the JSON file. 2 While Pickle requires a file object to be passed as an argument Joblib works with both file objects and string filenames. Approach 3 Manual Save and Restore to JSON whenever we want to have full control over the save and restore process the best way is to build our own functions manually. In following Python scripts we will show how to Saev and reload ML Models using JoblibImport the required Library for using JoblibSave the Model using JoblibReload the saved Model using JoblibReload the Saved Model using Joblib Let s Reflect back on Joblib approach PROs of Joblib 1 the Joblib library offers a bit simpler workflow compared to Pickle. For simplicity we ll save only three model parameters and the training data. Python How to Save and Load ML ModelsPriyaranjan Mohanty WHAT On various instances while working on developing a Machine Learning Model we ll need to save our prediction models to file and then restore them in order to reuse our previous work to. In this Kernel we will explore 3 ways to Save and Reload ML Models in Python and scikit learn we will also discuss about the pros and cons of each method. The Script following shows an example of manually saving and restoring objects using JSON. This approach allows us to select the data which needs to be saved such as the model parameters coefficients training data and anything else we need. Let s reflect back on the JSON approach PROs Since the data serialization using JSON actually saves the object into a string format rather than byte stream the mylogreg. This approach will save our ML Model in the pickle format only but we dont need to load additional libraries as the Pickling facility is available within Scikit Learn package itself which we will use invariably for developing our ML models. json file could be opened and modified with a text editor. Dataset used IRIS Model Logistic Regression using Scikit Learn Step 1 Import Packages Step 2 Load the IRIS Data Step 3 Split the IRIS Data into Training Testing DataNow lets build the Logistic Regression Model on the IRIS DataNote The Model creation in this Kernel is for demonstartion only and does not cover the details of Model Creation. The new class called MyLogReg then implements the methods save_json and load_json for saving and restoring to from a JSON file respectively. Now that Model has been Created and Trained we might want to save the trained Model for future use. 3 In case our model contains large arrays of data each array will be stored in a separate file but the save and restore procedure will remain the same. Approach 2 Joblib The Joblib Module is available from Scikit Learn package and is intended to be a replacement for Pickle for objects containing large data. Moreover this approach is more suitable for objects with small number of instance variables such as the scikit learn models because any addition of new variables requires changes in the save and restore methods. Next we create an object mylogreg pass the training data to it and save it to file. 2 It is useful if you have optimized the model s parameters on the training data so you don t need to repeat this step again. Import Required packages Import the Logistic Regression Module from Scikit Learn Import the IRIS Dataset to be used in this Kernel Load the Module to split the Dataset into Train Test Load the data Split data Define the Model Train the Model Import pickle Package Save the Modle to file in the current working directory Load the Model back from file Use the Reloaded Model to Calculate the accuracy score and predict target values Calculate the Score Print the Score Predict the Labels using the reloaded Model Import Joblib Module from Scikit Learn Save RL_Model to file in the current working directory Load from file Use the Reloaded Joblib Model to Calculate the accuracy score and predict target values Calculate the Score Print the Score Predict the Labels using the reloaded Model Import required packages Override the class constructor A method for saving object data to JSON file Creat json and save to file A method for loading data from JSON file Create a model and train it Create a new object and load its data from JSON file. Let s Reflect back on Pickle approach PROs of Pickle 1 save and restore our learning models is quick we can do it in two lines of code. object serialization This process procedure of saving a ML Model is also known as object serialization representing an object with a stream of bytes in order to store it on disk send it over a network or save to a database. CONs of Pickle 1 it doesn t save the test results or any data. Then we create a new object json_mylogreg and call the load_json method to load the data from file. ", "id": "prmohanty/python-how-to-save-and-load-ml-models", "size": "5438", "language": "python", "html_url": "https://www.kaggle.com/code/prmohanty/python-how-to-save-and-load-ml-models", "git_url": "https://www.kaggle.com/code/prmohanty/python-how-to-save-and-load-ml-models", "script": "__init__ sklearn.externals sklearn.model_selection load_iris save_json numpy sklearn.linear_model load_json train_test_split MyLogReg(LogisticRegression) LogisticRegression sklearn.datasets joblib ", "entities": "(('Script following', 'JSON'), 'show') (('data serialization', 'rather mylogreg'), 'let') (('4 Joblib', 'different compression'), 'allow') (('Joblib 2 Module', 'large data'), 'approach') (('loaded model', 'test new unseen data'), 'use') (('we', 'then new object'), 'approach') (('we', 'method'), 'explore') (('new class', 'JSON file'), 'implement') (('addition', 'methods'), 'be') (('save', 'separate file'), '3') (('Joblib 1 library', 'Pickle'), 'show') (('we', 'IRIS Dataset'), 'cover') (('object process procedure', 'database'), 'serialization') (('Joblib', 'file objects'), '2') (('1 it', 'test results'), 'doesn') (('Import Data Scikit Learn Step 1 Packages Step 2 IRIS Step 3 Split', 'Model Creation'), 'use') (('you', 'don step'), '2') (('json file', 'text editor'), 'open') (('less intruder', 'JSON file'), 'con') (('cross validation score', 'test data'), 'be') (('restoring reloading', 'deserialization'), 'deserialization') (('which', 'example'), 'want') (('model', 'models multiple c'), 'need') (('object mylogreg', 'it'), 'create') (('we', 'code'), 'let') (('we', 'ML invariably models'), 'save') (('it', 'JSON file'), 'Import') (('Then we', 'file'), 'create') (('we', 'model only three parameters'), 'save') (('whenever we', 'best way own functions'), 'be') (('we', 'previous work'), 'Python') (('we', 'future use'), 'create') (('else we', 'model parameters coefficients training such data'), 'allow') ", "extra": "['outcome', 'test', 'procedure']", "label": "Perfect_files", "potential_description_queries": ["accuracy", "approach", "argument", "array", "basic", "best", "bit", "build", "calculate", "call", "case", "code", "compare", "content", "control", "could", "create", "creation", "current", "data", "develop", "directory", "disk", "explore", "file", "following", "format", "future", "gzip", "instance", "itself", "json", "learn", "learning", "library", "load", "method", "might", "model", "multiple", "need", "network", "new", "not", "number", "object", "order", "package", "pickle", "predict", "prediction", "procedure", "purpose", "replacement", "restore", "save", "saving", "scikit", "score", "select", "separate", "set", "simplicity", "single", "split", "step", "store", "string", "target", "test", "text", "train", "training", "validation", "view", "while", "work", "workflow"], "potential_description_queries_len": 78, "potential_script_queries": ["joblib", "numpy"], "potential_script_queries_len": 2, "potential_entities_queries": ["new", "validation"], "potential_entities_queries_len": 2, "potential_extra_queries": [], "potential_extra_queries_len": 0, "all_components_potential_queries_len": 80}