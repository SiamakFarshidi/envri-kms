{"name": "big gan 128 lb 12 ", "full_name": " h1 Pretrained Big GAN 128 Scores LB 12 h1 Load Pretrained Big GAN 128 h1 Fun Latent Walk h1 Generate 10000 Dog Images h1 Display Examples h1 Calculate LB Score ", "stargazers_count": 0, "forks_count": 0, "description": "5 yields LB 34 whereas trucation 1. fit features2 d _ neigh. Try changing the code below to see images besides dogs. 5 then the dog images will look photo realistic but they will also have less variation in the background and pose. com huggingface pytorch pretrained BigGAN 3 https openreview. 5 and you can see the image quality difference. Stanford Dogs are a subset of ImageNet Dogs. trace covmean return diff. The competition metric rewards variation more than quality. com syncedreview biggan a new state of the art in image synthesis cf2ec5694024 2 https github. sum features1 axis 1 0 print rows of zeros in features2 sum np. There is a complete list of classes here 1. 0 yields LB 12 even though the latter are less photo realistic. mean d print rows of zeros in features1 sum np. Display Examples Calculate LB Score LOAD PRETRAINED BIGGAN DEEP 128 CHANGE THE FOLLOWING TWO LINES TO CONTROL WHAT CLASS MORPHS TO WHAT CLASS DOGS ARE CLASSES 151 THRU 281 CATS ARE 281 THRU 294 CATEGORY LIST HERE https gist. trace sigma2 2 tr_covmean In production we don t resize input images. com yrevar 942d3a0ac09ec9e5eb3a All in tensors If you have a GPU put everything on cuda Generate an image If you have a GPU put back on CPU DISPLAY GENERATED DOGS CLEAR GPU MEMORY Creates graph from saved graph_def. You can read a blog about Big GAN here 1. A full list is here 4. sum features2 axis 1 0 product might be almost singular covmean linalg. sqrtm sigma1 offset. Therefore truncation 0. Big GAN recognizes 1000 different category classes. shape return np. com yrevar 942d3a0ac09ec9e5eb3a Generate 10000 Dog ImagesIf we set the variable truncation below to 0. If we were allowed more than 9 hours to train we could train Big GAN 128 in a Kaggle notebook kernel and submit it as our competition solution Big GAN 128 scores an amazing LB 12 Since we need to turn on internet to download pretrained network weights the outputted images from this notebook kernel cannot be submitted. dot sigma2 offset numerical error might give slight imaginary component covmean tf. As an example I morph dogs into cats below. A paper descibing Big GAN is here 3. matmul sigma1 sigma2 tr_covmean tf. In the latent walks above we used truncation 0. The smooth transistions of the latent walks below demonstrate that Big GAN 128 is not a memorizer GAN. For example class 472 is a canoe and class 71 is a scorpion. We download Big GAN from GitHub here 2 1 https medium. kneighbors features1 return_distance True print d. Big GAN 128 can produce 1000 different classes of images. By changing the start class and end class for class_vector below you can control what you would like to see morph into what. Pretrained Big GAN 128 Scores LB 12In this kernel we load Pretrained Big GAN 128 and have fun generating some dog images. Dogs are classes 151 thru 280 and cats are 281 thru 293. com yrevar 942d3a0ac09ec9e5eb3a START CLASS END CLASS All in tensors If you have a GPU put everything on cuda Generate an image If you have a GPU put back on CPU DISPLAY LATENT WALK GENERATE SAMPLES TRUNCATION VARIABLE AFFECTS QUALITY AND DIVERSITY 281 294 are cats CATEGORY LIST HERE https gist. layername Pretrained_Net final_layer Mean 0 def calculate_memorization_distance features1 features2 neigh NearestNeighbors n_neighbors 1 algorithm kd_tree metric euclidean neigh. For example Labrador retriever is class 208 and Tiger is class 292. Furthermore you can do latent walks between different classes. Big GAN 128 was trained on the same set of dogs that we are using in Kaggle s Dog Competition. It s amazing how accurate Big GAN generated dogs appear. This is just for demo purpose. clean up memory check for image size COMPUTE LB SCORE. com yrevar 942d3a0ac09ec9e5eb3a Load Pretrained Big GAN 128 Fun Latent WalkBelow are latent walks from dogs to cats. net forum id B1xsqj09Fm 4 https gist. ", "id": "cdeotte/big-gan-128-lb-12", "size": "2491", "language": "python", "html_url": "https://www.kaggle.com/code/cdeotte/big-gan-128-lb-12", "git_url": "https://www.kaggle.com/code/cdeotte/big-gan-128-lb-12", "script": "calculate_activation_statistics truncated_noise_sample BigGAN division cosine_distance calculate_memorization_distance distance_thresholding numpy KernelEvalException(Exception) = tf.GraphDef PIL get_activations calculate_frechet_distance print_function _handle_path_memorization Image matplotlib.pyplot tensorflow tqdm pytorch_pretrained_biggan scipy __future__ linalg absolute_import calculate_kid_given_paths _get_model_layer create_model_graph normalize_rows img_read_checks ", "entities": "(('Big GAN', 'category 1000 different classes'), 'recognize') (('Big below GAN', 'latent'), 'walk') (('we', 'Dog Competition'), 'train') (('Fun Latent 128 WalkBelow', 'cats'), 'com') (('cats', '293'), 'be') (('com huggingface pytorch', 'https BigGAN 3 openreview'), 'pretraine') (('472 class', 'example'), 'be') (('12 even latter', 'LB'), 'yield') (('I', 'cats'), 'morph') (('208 Tiger', 'example'), 'be') (('Stanford Dogs', 'ImageNet Dogs'), 'be') (('they', 'background'), 'look') (('sum features1', 'sum features2 np'), 'axis') (('You', 'here 1'), 'read') (('Big GAN', 'images'), 'produce') (('you', 'image quality difference'), '5') (('we', 't input images'), 'trace') (('Scores LB Big GAN 128 kernel we', 'dog images'), 'pretrained') (('com syncedreview', 'image synthesis'), 'biggan') (('dot sigma2', 'component slight imaginary covmean'), 'offset') (('we', 'truncation'), 'in') (('GENERATED GPU MEMORY', 'graph_def'), 'com') (('com 942d3a0ac09ec9e5eb3a Dog 10000 we', 'below 0'), 'yrevar') (('WHAT CLASS DOGS', '151 281 CATS'), 'LOAD') (('you', 'what'), 'control') (('you', '281 294'), 'com') (('Furthermore you', 'different classes'), 'do') (('outputted images', 'notebook kernel'), 'allow') (('We', '2 https here 1 medium'), 'download') ", "extra": "", "label": "No_extra_files", "potential_description_queries": ["algorithm", "art", "background", "blog", "category", "check", "clean", "code", "competition", "control", "could", "cuda", "def", "dot", "download", "end", "error", "even", "everything", "fit", "fun", "generated", "graph", "id", "image", "input", "kernel", "latter", "list", "load", "look", "mean", "memory", "metric", "might", "need", "network", "new", "not", "notebook", "numerical", "offset", "photo", "pretrained", "print", "product", "production", "pytorch", "read", "resize", "return", "set", "shape", "size", "smooth", "solution", "start", "state", "subset", "sum", "train", "truncation", "turn", "up", "variable", "variation"], "potential_description_queries_len": 66, "potential_script_queries": ["division", "linalg", "numpy", "scipy", "tensorflow", "tqdm"], "potential_script_queries_len": 6, "potential_entities_queries": ["input"], "potential_entities_queries_len": 1, "potential_extra_queries": [], "potential_extra_queries_len": 0, "all_components_potential_queries_len": 72}