{"name": "introduction to sound analysis ", "full_name": " h1 Introduction h3 Thanks to This Great Channel https www youtube com channel UCZPFjMe1uRSirmSpznqvJfQ h2 Content h1 Imports h1 What is Sound h2 What is Waveform h2 Simple Sine Wave h3 Coding Simple Sine Waves h2 Pitch h3 MIDI Notes h3 Coding Mapping Pitch to Frequency h2 Complex Waves Multiple sine waves h3 Coding Complex Waves h1 Analyzing Sound Data h2 Converting Analog Signal to Digital Signal h2 Preparing Files h2 Analyzing h2 Signal Domains h3 Fast Fourier Transform FFT h3 Spectrogram h2 MFCCs h1 Deep Learning with Audio h2 Preparing Data h2 ANN h3 Results h2 CNN h3 Results h1 Conclusion h3 Here is a notebook about generating audio with GANs https www kaggle com mrhippo audio generation with simple gans h3 My other kernels https www kaggle com mrhippo notebooks ", "stargazers_count": 0, "forks_count": 0, "description": "MFCCs Back to Introduction 0 MFCC is a complicated topic and we will not cover everything here but in machine learning it is very important. Analyzing Back to Introduction 0 Let s listen to our sample. Here is a notebook about generating audio with GANs https www. In sampling there is a term named sampling rate. 1 Simple Sine Wave 2. But we cannot convert continuous things to digital because to do that we need infinite memory. Time Domain We saw that while analyzing the dataset. In Spectrograms we have time on the x axis frequency on the y axis and decibels as colors. If a peak and a dip overlap then they cancel eachother. 31 Conclusion 5 Imports Back to Introduction 0 librosa is a python package for music and audio analysis. Preparing Files Back to Introduction 0 In the dataset we have a csv file that shows files labels wich instrument we will use that csv file for loading a spesific instrument s files. Formula of multiple sine waves Coding Complex Waves Back to Introduction 0 Canceling Waves Analyzing Sound Data Back to Introduction 0 Converting Analog Signal to Digital Signal Back to Introduction 0 In real world sound is continuous. Conclusion Back to Introduction 0 We learned how to process sound. What is Sound Back to Introduction 0 In physics sound is a vibration that propagates as an acoustic wave through a transmission medium such as a gas liquid or solid. In an ocatve there are 12 notes. As input we will give raw audio files. If you look at the keyboard you can see a pattern that repeats itself. com c freesound audio tagging dataest for this kernel. MIDI Notes Back to Introduction 0 Before pitch we have to understand MIDI Notes. Frequency Domain In frequency domain we have frequency on the x axis and magnitude on the y axis. com mrhippo notebooks References https www. Let s look at the features of sine wave 1. 4 Coding Complex Waves 2. Thanks to This Great Channel https www. Time Frequency Domain As you can see we are loosing information both of these techniques. Briefly it enables us to distinguish different instruments easily. Simple Sine Wave Back to Introduction 0 Sine wave is the simplest form of wave. So after taking STFTs we are projecting them to ceate Spectrograms. So let s code it again with log. That pattern named octave. In every octave 12 notes frequency doubles. We will give MFCCs of audios as input. Most of the time in machine learning we set the number of MFCCs to 13. We will use Freesound General Purpose Audio Tagging Challenge https www. Frequency Frequency is the reverse of period 1 T T is period. Amplitude How high perturbation in air pressure goes. com rafalencar1997 Audio_Generation data analysis and visualization keras and scikitlearn deep learning 21 33 45 57 69 81 93 105 we will use saxophone samples 44100Hz in dataset the smaple file we will use the original sample rate of recording applying logarithm Path Load Read and Resample the audio Random offset Padding Rescale Data to be in range rangeMin rangeMax. 41 Analyzing Sound Data 3 Converting Analog Signal to Digital Signal 3. 4 Fast Fourier Transform FFT 3. 1 Preparing Files 3. com mrhippo data science notes5 deep learning ann Results Back to Introduction 0 As you can see our model is not that good and has overfitting. If there is something wrong with this kernel please let me know in the comments. Deep Learning with Audio Back to Introduction 0 In our dataset there are samples that are taken from different instruments. As you can see our sample file s playing speed and time length changed. ANN Back to Introduction 0 In first part we will use a standard ANN. If you do not know what is ANN you can check out this kernel https www. Next part we will train CNN on MFCCs. If you go up or down you will face with deformations. Zooming into the sample As you can see this is a complex wave. It has time on the x axis MFCC coefficents on the x axis. If it is higher then amplitude is higher too. Introduction In this kernel we will learn the basics of sound theory how to use librosa sound waves and training neural networks with sound. 3 Signal Domains 3. Phase The first peak of waves crest s time. Let s play with the sample rate and see what is happening. 2 Coding Simple Sine Wave 2. What is Waveform Back to Introduction 0 We will learn 2 types of waveforms Simple single sinewaves and Complex multiples sinewaves. Preparing Data Back to Introduction 0 There are 41 different instruments we will use Hi hat Trumpet Cello Clarinet Snare_drum Flute Bass_drum Electric_piano Acoustic_guitar and Violin_or_fiddle. But in this example our file recorded in 44100 Hz so when we change it we are facing with deformation normally there is no sample rate limit in nature. Mapping pitch to frequency formula Coding Mapping Pitch to Frequency Back to Introduction 0 Complex Waves Multiple sine waves Back to Introduction 0 Complex waves are made of multiple waves. Period Period is the distnace between 2 peaks. org wiki Sound When we are talking we are generating sound waves and these waves have compressions and rarefactions. The reason of that is we do not perceive sound in a linear way as we plotted but in a logarithmic way. Fast Fourier Transform FFT Back to Introduction 0 As you can see our FFT is symetrical. Let s zoom in to our FFT Spectrogram Back to Introduction 0 As you can see most of the spectogram colored with black low decibels. com mrhippo audio generation with simple gans My other kernels https www. 32 Complex Waves Multiple sine waves 2. So store analog signals as digital signals we are using a technique called sampling. CNN Back to Introduction 0 In this part we will use CNN. In audio processing you can use sampling rates like 22050 or 16000 Hz. Signal Domains Back to Introduction 0 There are 3 different domains for signal. Reference https en. com mrhippo data science notes6 deep learning cnn We have to add a 4th dimention for keras Results Back to Introduction 0 You can increase accuracy by changing parameters. Since analog waves are continuous we cannot get every sample of a analog wave because there are infinite samples. com channel UCZPFjMe1uRSirmSpznqvJfQ Content Imports 1 What is Sound 2 What is Waveform 2. We will use Saxophone as a example instrument. MIDI is a way to represent notes as numbers. 2 Analyzing 3. Note Larger amplitude louder 1. If you do not know what is CNN you can check out this kernel https www. In STFT we are taking just a small frame of signal. 41 Spectrogram 3. 2 Results 4. We have time on the x axis and amplitude on the y axis. Note Normally if sample rate is higher we should get a smoother result. This is an issue of FFT so we can cut the second half because we do not need it. Frequency and amplitude comparisons Formula of a sine wave Coding Simple Sine Waves Back to Introduction 0 Not that necessary but here is how cosine wave look like Pitch Back to Introduction 0 We do not perceive frequency in a linear way we percieve frequency in a logarithmic way. To do that we are using a technique called Fast Fourier Transform FFT. com fizzbuzz beginner s guide to audio data https github. It provides the building blocks necessary to create music information retrieval systems. com playlist list PL wATfeyAMNqIee7cH3q1bh4QJFAaeNv0 https www. 3 MIDI Notes 2. 3 Results 4. You can define that period yourself but there is a common sampling rate 44100 Hz. We will choose 10 different instruments and train different models. To achive Spectrograms we use Short Time Fourier Transform STFT. 5 Deep Learning with Audio 4 Preparing Data 4. So while converting them to digital we are taking samples from that wave using a certain period. For all information we are using Spectrograms. 31 Coding Mapping Pitch to Frequency 2. In complex waves if peaks overlap in new wave the amplitude increases. ", "id": "mrhippo/introduction-to-sound-analysis", "size": "465950", "language": "python", "html_url": "https://www.kaggle.com/code/mrhippo/introduction-to-sound-analysis", "git_url": "https://www.kaggle.com/code/mrhippo/introduction-to-sound-analysis", "script": "normalization keras.layers pitch_to_frequency LeakyReLU train_test_split Dropout Sequential cos_wave Adam keras.utils.np_utils seaborn numpy load_train_data Input rescale sklearn.model_selection matplotlib.pyplot sine_wave Dense pandas scipy.io keras.optimizers to_categorical BatchNormalization Model wavfile keras.models IPython.display ReLU ", "entities": "(('that', 'itself'), 'see') (('we', '13'), 'set') (('Here notebook', 'GANs https www'), 'be') (('model', 'Back Introduction'), 'science') (('0 41 different we', 'Trumpet Cello Clarinet Snare_drum Flute Bass_drum Electric_piano hat Acoustic_guitar'), 'prepare') (('You', 'period'), 'define') (('you', 'kernel https www'), 'know') (('We', 'different models'), 'choose') (('amplitude', 'increases'), 'in') (('we', 'both techniques'), 'Domain') (('we', 'standard ANN'), 'ANN') (('what', 'sample rate'), 'let') (('it', 'here machine'), 'be') (('we', 'Spectrograms'), 'project') (('we', 'sample rate normally nature'), 'record') (('Period Period', '2 peaks'), 'be') (('we', 'Time Fourier Transform Short STFT'), 'use') (('FFT', 'Fast Fourier Transform Introduction'), 'FFT') (('this', 'sample'), 'zoom') (('then they', 'eachother'), 'cancel') (('Time Domain We', 'dataset'), 'see') (('that', 'different instruments'), 'learn') (('0 We', 'how sound'), 'conclusion') (('we', 'Spectrograms'), 'use') (('we', 'colors'), 'have') (('we', 'y axis'), 'Domain') (('It', 'x axis'), 'have') (('0 We', 'waveforms'), 'be') (('We', 'example instrument'), 'use') (('How high perturbation', 'air pressure'), 'Amplitude') (('most', 'black low decibels'), 'let') (('sample file', 'speed'), 'change') (('0 You', 'parameters'), 'science') (('we', 'technique'), 'do') (('we', 'MIDI Notes'), 'note') (('me', 'comments'), 'let') (('you', 'deformations'), 'face') (('we', 'signal'), 'take') (('It', 'music information retrieval necessary systems'), 'provide') (('we', 'technique'), 'use') (('we', 'CNN'), 'CNN') (('we', 'smoother result'), 'note') (('we', 'spesific instrument files'), 'prepare') (('0 Complex waves', 'multiple waves'), 'pitch') (('that', 'gas such liquid'), 'be') (('T 1 T', 'period'), 'be') (('Sine 0 wave', 'simplest wave'), 'wave') (('crest', 'waves'), 'phase') (('you', '22050'), 'use') (('we', 'infinite memory'), 'convert') (('we', 'sound'), 'introduction') (('we', 'it'), 'be') (('we', 'analog wave'), 'get') (('we', 'logarithmic way'), 'is') (('We', 'y axis'), 'have') (('waves', 'compressions'), 'Sound') (('MIDI', 'numbers'), 'be') (('s', 'sine wave'), 'let') (('We', 'Freesound General Purpose Audio Tagging Challenge https www'), 'use') (('Briefly it', 'different instruments'), 'enable') (('0 s', 'sample'), 'let') (('we', 'certain period'), 'take') (('31 Conclusion 5 Imports', 'python music'), 'be') (('Random', 'range rangeMin rangeMax'), 'com') (('we', 'logarithmic way'), 'Formula') ", "extra": ""}