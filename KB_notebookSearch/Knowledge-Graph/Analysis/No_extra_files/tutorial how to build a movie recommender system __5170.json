{"name": "tutorial how to build a movie recommender system ", "full_name": " h1 CONTENT BASED FILTERING h3 Table of contents h1 Acquiring the Data h1 Preprocessing h1 Content Based recommendation system h4 Add movieId to input user h3 Advantages and Disadvantages of Content Based Filtering ", "stargazers_count": 0, "forks_count": 0, "description": "Next let s look at the ratings dataframe. Advantages and Disadvantages of Content Based Filtering Advantages Learns user s preferences Highly personalized for the user Disadvantages Doesn t take into account what others think of the item so low quality item recommendations might happen Extracting data is not always intuitive Determining what characteristics of the item the user dislikes or likes is not always obvious Courtesy to IBM https labs. This operation is actually a dot product between a matrix and a vector so we can simply accomplish by calling Pandas s dot function. It s implicitly merging it by title. In this case we store every different genre in columns that contain either 1 or 0. Since keeping genres in a list format isn t optimal for the content based recommendation system technique we will use the One Hot Encoding technique to convert the list of genres to a vector where each column corresponds to one possible value of the feature. We won t be needing the timestamp column so let s drop it to save on memory. Add movieId to input userWith the input complete let s extract the input movie s ID s from the movies dataframe and add them into it. This is known as the User Profile. In our case we re going to try to figure out the input s favorite genres from the movies and ratings given. 1 shows that a movie has that genre and 0 shows that it doesn t. We re going to start by learning the input s preferences so let s get the subset of movies that the input has watched from the Dataframe containing genres defined with binary values. We can do this by using the input s reviews and multiplying them into the input s genre table and then summing up the resulting table by column. We can achieve this by first filtering out the rows that contain the input movie s title and then merging this subset with the input dataframe. Now we have the weights for every of the user s preferences. This technique attempts to figure out what a user s favourite aspects of an item is and then recommends items that present those aspects. CONTENT BASED FILTERINGRecommendation systems are a collection of algorithms used to recommend items to users based on information taken from the user. This can be achieved by applying Python s split string function on the correct column. ai Please upvote if you like this or find this notebook useful thanks. Using this we can recommend movies that satisfy the user s preferences. Table of contents Acquiring the Data Preprocessing Content Based Filtering Acquiring the DataTo acquire and extract the data simply run the following Bash scripts Dataset acquired from GroupLens http grouplens. PreprocessingFirst let s get all of the imports out of the way Now let s read each file into their Dataframes Let s also remove the year from the __title__ column by using pandas replace function and store in a new __year__ column. We ll only need the actual genre table so let s clean this up a bit by resetting the index and dropping the movieId title genres and year columns. org datasets movielens. This encoding is needed for feeding categorical data. Let s begin by creating an input user to recommend movies to Notice To add more movies simply increase the amount of elements in the __userInput__. These systems have become ubiquitous and can be commonly seen in online stores movies databases and job finders. Let s also store this dataframe in another variable since genres won t be important for our first recommendation system. For every row in the dataframe iterate through the list of genres and place a 1 into the corresponding column Filling in the NaN values with 0 to show that a movie doesn t have that column s genre Drop removes a specified row or column from a dataframe Filtering out the movies by title Then merging it so we can get the movieId. Every row in the ratings dataframe has a user id associated with at least one movie a rating and a timestamp showing when they reviewed it. Filtering out the movies from the input Resetting the index to avoid future issues Dropping unnecessary issues due to save memory and to avoid issues Dot produt to get weights The user profile Now let s get the genres of every movie in our original dataframe And drop the unnecessary information Multiply the genres by the weights and then take the weighted average Sort our recommendations in descending order Just a peek at the values The final recommendation table. Let s start by extracting the genre table from the original dataframe With the input s profile and the complete list of movies and their genres in hand we re going to take the weighted average of every movie based on the input profile and recommend the top twenty movies that most satisfy it. Using regular expressions to find a year stored between parentheses We specify the parantheses so we don t conflict with movies that have years in their titles Removing the parentheses Removing the years from the title column Applying the strip function to get rid of any ending whitespace characters that may have appeared Every genre is separated by a so we simply have to call the split function on Copying the movie dataframe into a new one since we won t need to use the genre information in our first case. Content Based recommendation systemNow let s take a look at how to implement __Content Based__ or __Item Item recommendation systems__. We also drop unnecessary columns for the input to save memory space. Dropping information we won t use from the input dataframe Final input dataframe If a movie you added in above isn t here then it might not be in the original dataframe or it might spelled differently please check capitalisation. With that let s also split the values in the __Genres__ column into a __list of Genres__ to simplify future use. In this notebook we will explore Content based recommendation systems and implement a simple version of one using Python and the Pandas library. Feel free to add more in Just be sure to write it in with capital letters and if a movie starts with a The like The Matrix then write it in like this Matrix The. To download the data we will use wget to download it from IBM Object Storage. Lets download the dataset. Now here s the recommendation table Now Let s write our recommendation to a csv file. Dataframe manipulation library Math functions we ll only need the sqrt function so let s import only that Storing the movie information into a pandas dataframe Storing the user information into a pandas dataframe Head is a function that gets the first N rows of a dataframe. Now we re ready to start learning the input s preferences To do this we re going to turn each genre into weights. ", "id": "mdmahmudferdous/tutorial-how-to-build-a-movie-recommender-system", "size": "5170", "language": "python", "html_url": "https://www.kaggle.com/code/mdmahmudferdous/tutorial-how-to-build-a-movie-recommender-system", "git_url": "https://www.kaggle.com/code/mdmahmudferdous/tutorial-how-to-build-a-movie-recommender-system", "script": "numpy matplotlib.pyplot sqrt pandas math ", "entities": "(('that', 'most it'), 'let') (('CONTENT BASED FILTERINGRecommendation systems', 'user'), 'be') (('Now we', 'preferences'), 'have') (('that', 'preferences'), 'recommend') (('we', 'movies'), 'go') (('We', 'column'), 'do') (('s', '_ _ column'), 'let') (('input', 'memory space'), 'drop') (('Bash scripts simply following Dataset', 'grouplens'), 'run') (('user', 'IBM https always obvious labs'), 'personalize') (('that', 'aspects'), 'attempt') (('s', '_ _ userInput _ _'), 'let') (('that', 'input dataframe'), 'achieve') (('Now s', 'csv file'), 's') (('Now s', 'recommendation final table'), 'filter') (('it', 't.'), 'show') (('it', 'differently capitalisation'), 'information') (('s', '_ Based _'), 'let') (('This', 'correct column'), 'achieve') (('s', 'future use'), 'split') (('so s', 'memory'), 'win') (('Matrix', 'Matrix'), 'be') (('we', 'IBM Object Storage'), 'download') (('we', 'first case'), 'specify') (('Next s', 'ratings dataframe'), 'let') (('input ID', 'it'), 'add') (('genres', 'recommendation first system'), 'let') (('input', 'binary values'), 'go') (('we', 'movieId'), 'remove') (('encoding', 'categorical data'), 'need') (('you', 'notebook'), 'ai') (('we', 'dot simply function'), 'be') (('so s', 'title movieId genres'), 'need') (('that', 'dataframe'), 'function') (('we', 'Python'), 'explore') (('that', '1'), 'store') (('we', 'weights'), 're') (('systems', 'movies databases'), 'become') (('where column', 'feature'), 'since') (('when they', 'it'), 'have') ", "extra": ""}