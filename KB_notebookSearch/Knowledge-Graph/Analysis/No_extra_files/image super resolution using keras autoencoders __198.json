{"name": "image super resolution using keras autoencoders ", "full_name": " h2 Necessary Library Imports h2 Data Preprocessing h3 Make Datagenerators h2 Model Creation h2 Training the Model ", "stargazers_count": 0, "forks_count": 0, "description": "Necessary Library Imports Data Preprocessing Make Datagenerators Model CreationEncoder NetworkDecoder Networkthe decoder network would be the extension of the encoder Training the Model Making the low resolution folder in parallel processing encoder decoder final layer should have 3 channels which will help to reconstruct the image with better resolution Load Model uncomment to load the model with supplied weights config i. ", "id": "superficiallybot/image-super-resolution-using-keras-autoencoders", "size": "198", "language": "python", "html_url": "https://www.kaggle.com/code/superficiallybot/image-super-resolution-using-keras-autoencoders", "git_url": "https://www.kaggle.com/code/superficiallybot/image-super-resolution-using-keras-autoencoders", "script": "keras.preprocessing.image skimage.transform multiprocessing keras.layers tensorflow.keras.layers pil_to_numpy PIL rescale Process ImageDataGenerator matplotlib.pyplot resize tqdm piltonumpy_helper os; import keras; import numpy make_low_res fetch_data_generator Add keras.models cv2 ", "entities": "(('which', 'weights config supplied i.'), 'Data') ", "extra": ""}