{"name": "single image super resolution gan srgan pytorch ", "full_name": " h2 Introduction h3 In this notebook we use SRGAN to perform Super Resolution on CelebA dataset h4 h4 Image Source Photo Realistic Single Image Super Resolution Using a Generative Adversarial Network C Ledig et al h3 Libraries h3 Settings h3 Define Dataset Class h3 Get Train Test Dataloaders h3 Model Architecture h4 h4 Image Source Photo Realistic Single Image Super Resolution Using a Generative Adversarial Network C Ledig et al h3 Define Model Classes h3 Train Super Resolution GAN SRGAN h3 Work in Progress h3 Note The order of the below saved images are from left to right Original HR Bicubic Interpolated SRGAN Generated ", "stargazers_count": 0, "forks_count": 0, "description": "image width number of image channels Normalization parameters for pre trained PyTorch models Transforms for low resolution images and high resolution images First layer Residual blocks Second conv layer post residual blocks Upsampling layers nn. image height high res. Upsample scale_factor 2 Final output layer Initialize generator and discriminator Set feature extractor to inference mode Losses Load pretrained models Optimizers Configure model input Adversarial ground truths Generate a high resolution image from low resolution input Adversarial loss Content loss Total loss Loss of real and fake images Total loss Testing Configure model input Adversarial ground truths Generate a high resolution image from low resolution input Adversarial loss Content loss Total loss Loss of real and fake images Total loss Save image grid with upsampled inputs and SRGAN outputs Save model checkpoints. Libraries Settings Define Dataset Class Get Train Test DataloadersModel ArchitectureImage Source Photo Realistic Single Image Super Resolution Using a Generative Adversarial Network C. Introduction In this notebook we use SRGAN https arxiv. Note The order of the below saved images are from left to right Original HR Bicubic Interpolated SRGAN Generated load pretrained models number of epochs of training name of the dataset size of the batches adam learning rate adam decay of first order momentum of gradient adam decay of second order momentum of gradient epoch from which to start lr decay number of cpu threads to use during batch generation high res. 04802 to perform Super Resolution on CelebA dataset http mmlab. Image Source Photo Realistic Single Image Super Resolution Using a Generative Adversarial Network C. Define Model Classes Train Super Resolution GAN SRGAN Work in Progress. ", "id": "balraj98/single-image-super-resolution-gan-srgan-pytorch", "size": "1125", "language": "python", "html_url": "https://www.kaggle.com/code/balraj98/single-image-super-resolution-gan-srgan-pytorch", "git_url": "https://www.kaggle.com/code/balraj98/single-image-super-resolution-gan-srgan-pytorch", "script": "torch.utils.data __init__ make_grid Discriminator(nn.Module) torch.autograd ImageDataset(Dataset) tqdm_notebook DataLoader plotly.graph_objects forward torch.nn numpy tqdm_notebook as tqdm __getitem__ PIL plotly.express vgg19 sklearn.model_selection Image matplotlib.pyplot pandas GeneratorResNet(nn.Module) Dataset __len__ tqdm Variable torch.nn.functional FeatureExtractor(nn.Module) torchvision.models discriminator_block torchvision.utils ResidualBlock(nn.Module) train_test_split save_image torchvision.transforms ", "entities": "(('First conv Residual blocks Second layer', 'nn'), 'transform') (('Define Model Train Super Resolution GAN', 'SRGAN Progress'), 'class') (('Generated models load pretrained number', 'batch generation high res'), 'note') (('we', 'SRGAN https arxiv'), 'introduction') (('loss Testing Configure model ground Total Adversarial truths', 'SRGAN model checkpoints'), 'Load') (('Libraries Settings Define Dataset Class', 'Train Test DataloadersModel ArchitectureImage Source Photo Realistic Single Image Super Generative Adversarial Network C.'), 'get') ", "extra": "['test']", "label": "Perfect_files", "potential_description_queries": ["batch", "conv", "dataset", "decay", "epoch", "feature", "generation", "generator", "gradient", "grid", "ground", "height", "high", "http", "image", "inference", "input", "layer", "learning", "left", "load", "lr", "mode", "model", "momentum", "name", "notebook", "number", "order", "output", "perform", "post", "pre", "pretrained", "residual", "resolution", "right", "second", "size", "start", "training", "width"], "potential_description_queries_len": 42, "potential_script_queries": ["forward", "nn", "numpy", "torch", "tqdm"], "potential_script_queries_len": 5, "potential_entities_queries": ["generation", "high", "model"], "potential_entities_queries_len": 3, "potential_extra_queries": ["test"], "potential_extra_queries_len": 1, "all_components_potential_queries_len": 48}