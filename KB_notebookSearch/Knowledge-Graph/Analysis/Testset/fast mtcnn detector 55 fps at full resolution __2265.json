{"name": "fast mtcnn detector 55 fps at full resolution ", "full_name": " h1 Fast MTCNN detector h2 Algorithm h2 Other resources h2 Imports h2 The FastMTCNN class h2 Full resolution detection h2 Half resolution detection ", "stargazers_count": 0, "forks_count": 0, "description": "If faces are moving faster than this they are likely to be extremely blurry anyway. 709 than the original MTCNN algorithm to construct the scaling pyramid applied to input images. Scale pyramid The algorithm uses a slightly smaller scaling factor 0. Furthermore ensuring that faces are cropped with a small margin mitigates the impact of face drift. Multi threading A modest performance gain comes from loading video frames with cv2. Although this assume that faces do not move between frames significantly this is generally a good approximation for low stride numbers. com timesler guide to mtcnn in facenet pytorch Imports The FastMTCNN classThe class below is a thin wrapper for the MTCNN implementation in the facenet pytorch package that implements the algorithm described above. Other resourcesSee the following kernel for a guide to using the MTCNN functionality of facenet pytorch https www. For example with a batch of 9 frames we could pass frames 0 3 and 6 to MTCNN. Install facenet pytorch with internet use pip install facenet pytorch. Full resolution detectionIn this example we demonstrate how to detect faces using full resolution frames i. 02878 for details of the scaling pyramid approach. Fast MTCNN detectorThis notebook demonstrates how to achieve 45 frames per second speeds for loading frames and detecting faces on full resolution videos. Algorithm Striding The algorithm used is a strided modification of MTCNN in which face detection is performed on only every _N_ frames and applied to all frames. This functionality is provided by the FileVideoStream class of the imutils package. Half resolution detectionIn this example we demonstrate how to detect faces using half resolution frames i. VideoCapture using threading. Then the bounding boxes and potentially landmarks returned for frame 0 would be naively applied to frames 1 and 2. Similarly the detections for frame 3 are applied to frames 4 and 5 and the detections for frames 6 are applied to frames 7 and 8. For details of the scaling pyramid see the original paper https arxiv. If the stride is 3 we are assuming that the face does not significantly alter position for an additional 2 frames or 0. ", "id": "timesler/fast-mtcnn-detector-55-fps-at-full-resolution", "size": "2265", "language": "python", "html_url": "https://www.kaggle.com/code/timesler/fast-mtcnn-detector-55-fps-at-full-resolution", "git_url": "https://www.kaggle.com/code/timesler/fast-mtcnn-detector-55-fps-at-full-resolution", "script": "__init__ FastMTCNN(object) Image facenet_pytorch run_detection __call__ tqdm.notebook PIL imutils.video tqdm FileVideoStream MTCNN ", "entities": "(('that', 'algorithm'), 'guide') (('Fast notebook', 'resolution full videos'), 'MTCNN') (('Then bounding boxes', '0 naively frames'), 'return') (('we', '0 3 MTCNN'), 'pass') (('Multi', 'cv2'), 'come') (('Scale algorithm', 'slightly smaller scaling factor'), 'pyramid') (('significantly this', 'stride generally good low numbers'), 'be') (('example we', 'resolution frames half i.'), 'detectionIn') (('4 detections', '6 frames'), 'apply') (('faces', 'face drift'), 'mitigate') (('they', 'faster this'), 'be') (('functionality', 'imutils package'), 'provide') (('strided modification', 'frames'), 'stride') (('example we', 'resolution frames full i.'), 'detectionIn') (('original MTCNN', 'input images'), 'algorithm') (('face', 'additional 2 frames'), 'assume') ", "extra": "['biopsy of the greater curvature']", "label": "Perfect_files", "potential_description_queries": ["algorithm", "batch", "bounding", "could", "detect", "detection", "every", "face", "factor", "faster", "following", "frame", "half", "implementation", "input", "kernel", "margin", "move", "not", "notebook", "package", "per", "performance", "position", "pytorch", "resolution", "scaling", "second", "stride", "video", "wrapper"], "potential_description_queries_len": 31, "potential_script_queries": ["tqdm"], "potential_script_queries_len": 1, "potential_entities_queries": ["half"], "potential_entities_queries_len": 1, "potential_extra_queries": ["biopsy of the greater curvature", "biopsy", "curvature"], "potential_extra_queries_len": 3, "all_components_potential_queries_len": 35}