{"name": "pytorch sartorius unet strikes back infer ", "full_name": " h1 Sartorius Cell Instance Segmentation h1 Goal h1 Version Info h1 Notebooks h2 Please Upvote if you Find this Useful h1 Install Libraries h1 Import Libraries h1 Configuration h1 Reproducibility h1 Meta Data h1 Dataset h1 Augmentations h1 DataLoader h1 Model h2 UNet h1 Helper h1 Inference h1 Visualization h1 Submission ", "stargazers_count": 0, "forks_count": 0, "description": "Version Info v10 aggregate tta masks first v7 test time augmentation added Notebooks UNet Train PyTorch Sartorius UNet Strikes Back Train https www. com c petfinder pawpularity score Detect single neuronal cells in microscopy images https storage. 0 p 1. com awsaf49 pytorch sartorius unet strikes back infer edit Mask RCNN Train Sartorius MMDetection Train https www. Finally we can use UNet with Mask RCNN for Ensemble to further boost our score. removing batch axis removing channel axis first dim is image w o aug. Even though the competition is about Instance Segmentation we can use UNet do Semantic Segmentation and then convert them to individual Instances. com awsaf49 sartorius mmdetection train Infer Sartorius MMDetection Infer https www. com kaggle competitions kaggle 30201 logos header. 0 choose encoder e. mobilenet_v2 or efficientnet b7 use imagenet pre trained weights for encoder initialization model input channels 1 for gray scale images 3 for RGB etc. OpticalDistortion distort_limit 0. Sartorius Cell Instance Segmentation https www. png t 2021 09 03 15 27 46 Goal The purpose of this notebook is to show how to achieve Good score even using UNet. Normalize mean 0. model output channels number of classes in your dataset test segment image and label different objects Keep only objects that are large enough. com awsaf49 sartorius mmdetection infer Please Upvote if you Find this Useful Install Libraries Import Libraries Configuration Reproducibility Meta Data Dataset Augmentations DataLoader Model UNet Pros Performs well even with smaller data Can be used with imagenet pretrain models Cons Struggles with edge cases Semantic Difference in Skip Connection Helper Inference Visualization Submission visualization Sklearn PyTorch Albumentations for augmentations For colored terminal text For descriptive error messages When running on the CuDNN backend two further options must be set Set a fixed value for the hash seed Train Data Test Data if there is no mask then only send images test data output_shape batch_size 1 img_size img_size A. Loop over each object excluding the background labeled by 0. 0 A. 225 max_pixel_value 255. com awsaf49 pytorch sartorius unet strikes back train edit Infer PyTorch Sartorius UNet Strikes Back Infer https www. 406 std 0. ", "id": "awsaf49/pytorch-sartorius-unet-strikes-back-infer", "size": "1811", "language": "python", "html_url": "https://www.kaggle.com/code/awsaf49/pytorch-sartorius-unet-strikes-back-infer", "git_url": "https://www.kaggle.com/code/awsaf49/pytorch-sartorius-unet-strikes-back-infer", "script": "torch.optim torch.utils.data albumentations glob display CFG __init__ albumentations.pytorch ins2rle amp segmentation_models_pytorch build_model get_aug_img infer IPython DataLoader defaultdict torch.nn ToTensorV2 collections numpy reverse_aug Back BuildDataset(torch.utils.data.Dataset) __getitem__ fix_aug_img torch.cuda display as ipd sklearn.model_selection KFold lr_scheduler matplotlib.pyplot pandas set_seed Dataset __len__ tqdm cupy torch.nn.functional load_model Style colorama StratifiedKFold Fore aug mask2rle ", "entities": "(('v7 test time first augmentation', 'UNet Train Notebooks PyTorch'), 'add') (('mobilenet_v2', 'RGB 3 etc'), 'train') (('Finally we', 'further score'), 'use') (('png 2021 03 27 46 purpose', 'even UNet'), 't') (('that', 'only objects'), 'keep') (('com kaggle competitions', 'logos 30201 header'), 'kaggle') (('axis first dim', 'channel'), 'remove') (('we', 'individual Instances'), 'do') (('two further options', 'Train Data Test images test then only data'), 'infer') ", "extra": "['test']", "label": "Perfect_files", "potential_description_queries": ["aggregate", "augmentation", "backend", "background", "batch", "batch_size", "channel", "choose", "colored", "competition", "convert", "data", "dataset", "dim", "edge", "efficientnet", "encoder", "error", "even", "fixed", "gray", "hash", "image", "imagenet", "individual", "input", "kaggle", "label", "labeled", "mask", "mean", "model", "no", "notebook", "number", "object", "output", "png", "pre", "purpose", "pytorch", "running", "scale", "score", "segment", "set", "single", "std", "test", "text", "time", "train", "tta", "value", "visualization"], "potential_description_queries_len": 55, "potential_script_queries": ["amp", "aug", "colorama", "cupy", "defaultdict", "display", "glob", "mask2rle", "nn", "numpy", "torch", "tqdm"], "potential_script_queries_len": 12, "potential_entities_queries": ["test"], "potential_entities_queries_len": 1, "potential_extra_queries": [], "potential_extra_queries_len": 0, "all_components_potential_queries_len": 66}