{"name": "keras cnn dog or cat classification ", "full_name": " h1 Import Library h1 Define Constants h1 Prepare Traning Data h3 See Total In count h1 See sample image h1 Build Model h1 Callbacks h1 Prepare data h1 Traning Generator h3 Validation Generator h1 See how our generator work h1 Fit Model h1 Save Model h1 Virtualize Training h1 Prepare Testing Data h1 Create Testing Generator h1 Predict h3 Virtaulize Result h3 See predicted result with images h1 Submission ", "stargazers_count": 0, "forks_count": 0, "description": "Now we will map the result back to dog is 1 and cat is 0 Virtaulize Result See predicted result with images Submission 2 because we have cat and dog classes. Callbacks Early Stop To prevent over fitting we will stop the learning after 10 epochs and val_loss value not decreased Learning Rate Reduction We will reduce the learning rate when then accuracy not increase for 2 steps Prepare dataBecause we will use image genaretor with class_mode categorical. Pooling Layer This layerreduce the spatial volume of input image after convolution. We need to convert column category into string. Example your image is 64x64 4096 it will convert to 4096 1 array. If you have some feedback and question don t forget to comment below. com uysimty get start image classification Import Library Define Constants Prepare Traning Data See Total In countFrom our data we have 12000 cats and 12000 dogs See sample image Build Model Input Layer It represent input image data. Conv Layer This layer will extract features from image. This Kernel for someone want to deep dive into image classification. I use CNN for classification model. Fully Connected Layer It connect the network from a layer to another layer Output Layer It is the predicted values layer. If you found this Kernel helpful please up vote it. Then imagenerator will convert it one hot encoding which is good for our classification. It will reshape image into single diminsion array. I have simplier model with https www. We map data with 1 dog 0 cat. So we will convert 1 to dog and 0 to cat Traning Generator Validation Generator See how our generator workSeem to be nice Fit Model Save Model Virtualize Training Prepare Testing Data Create Testing Generator PredictFor categoral classication the prediction will come with probability of each category. So we will pick the category that have the highest probability with numpy average maxWe will convert the predict category back into our generator classes by using train_generator. It is the classes that image generator map while converting data into computer visionFrom our prepare data part. ", "id": "uysimty/keras-cnn-dog-or-cat-classification", "size": "2239", "language": "python", "html_url": "https://www.kaggle.com/code/uysimty/keras-cnn-dog-or-cat-classification", "git_url": "https://www.kaggle.com/code/uysimty/keras-cnn-dog-or-cat-classification", "script": "Flatten keras.preprocessing.image keras.layers keras.callbacks train_test_split EarlyStopping Dropout Sequential Conv2D numpy ReduceLROnPlateau sklearn.model_selection ImageDataGenerator load_img matplotlib.pyplot Activation Dense keras.utils pandas to_categorical BatchNormalization MaxPooling2D keras.models ", "entities": "(('you', 'don t'), 'forget') (('Prepare we', 'class_mode categorical'), 'stop') (('Build Model Input It', 'input image data'), 'get') (('It', 'data prepare part'), 'be') (('it', '1 array'), 'be') (('Submission 2 we', 'cat classes'), 'map') (('Output It', 'layer'), 'Layer') (('which', 'classification'), 'convert') (('Fit Model Save Model Virtualize Training Prepare Testing Data Create Testing PredictFor categoral nice Generator prediction', 'category'), 'convert') (('We', 'string'), 'need') (('that', 'train_generator'), 'pick') (('please', 'it'), 'vote') (('Pooling This', 'convolution'), 'Layer') (('It', 'diminsion single array'), 'reshape') (('layer', 'image'), 'extract') (('Kernel', 'image deep classification'), 'want') ", "extra": "['test']", "label": "Perfect_files", "potential_description_queries": ["accuracy", "average", "cat", "category", "classification", "column", "comment", "computer", "convert", "data", "encoding", "extract", "feedback", "fitting", "found", "generator", "hot", "image", "increase", "input", "layer", "learning", "map", "model", "need", "network", "not", "numpy", "predict", "prediction", "prepare", "prevent", "probability", "question", "reduce", "reshape", "result", "sample", "single", "spatial", "start", "up", "value", "volume", "vote", "while"], "potential_description_queries_len": 46, "potential_script_queries": ["preprocessing"], "potential_script_queries_len": 1, "potential_entities_queries": ["prepare"], "potential_entities_queries_len": 1, "potential_extra_queries": ["test"], "potential_extra_queries_len": 1, "all_components_potential_queries_len": 47}