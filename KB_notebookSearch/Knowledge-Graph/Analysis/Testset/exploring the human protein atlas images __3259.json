{"name": "exploring the human protein atlas images ", "full_name": " h1 Exploratory data analysis of the human protein atlas image dataset h2 What s in the data ", "stargazers_count": 0, "forks_count": 0, "description": "Conversely as shown on the following notebook cell identification of whole cells using cv2. html gaa42a3e6ef26247da787bf34030ed772c for more explanations. csv data files to see what they contain. We will explore the dataset available for the human protein atlas image competition. Description of threshold types can be found here https docs. Questions we would like to answer include what channels of the image contain the relevant information how much can we reduce dimensionality of data while retaining important information What s in the data Let s import the train. It is the subcellular localization of this protein which is recorded in the Target column of the train. The red channel corresponds to microtubules the blue channel to the nucleus and the yellow channel to the endoplasmid reticulum. connectedComponents provides a simple and effective means to label nuclei in images. Adaptive thresholding methods apply a different threshold on different parts of the image let s see how well it does on our images. Even after playing with the upper and lower parameter values no satisfactory result is obtained. To zero simple thresholding is not adapted at all for identifying cell boundaries based on the yellow channel. com bioinformatics article lookup doi 10. Then we will overlay the green and yellow channel as the yellow channel gives a good indication of the cell shape. csv and their biological meaning. 1093 bioinformatics btm206 if images are segmented into single cell regions additional features that are not appropriate for whole fields can be calculated after seeded watershed segmentation. Exploratory data analysis of the human protein atlas image datasetupdate 5 10 2018 beginning of cell segmentation algorithmupdate 5 10 2018 add red blue channels stack and whole cell identification does not give a clean result though This kernel is just the beginning of a work in progress and will be updated very often. According to Chen et al. Let s try different simple thresholding methods. See here https docs. 4 d7 d4d tutorial_py_thresholding. Let s see how connectedComponents work after both thresholding methods. Some cells are fused to each other while they should not be. connectedComponents is not as efficient due to the less homogeneous signal in the yellow channel of the image. Binary and truncate methods work better. Each image is a 4 channel image with the protein of interest in the green channel. Let s display the different channels of the image with ID 1 since it contains several subcelullar locations for our protein of interest. html gaa9e58d2860d4afa658ef70a9b1115576. Let s see how the targets are distributed. html and here https docs. At this point it s not clear if truncate thresholding is an improvement compared to binary thresholding. 4 d7 d1b group__imgproc__misc. Nucleus images provide a means to identify each cell so image segmentation may start by identification of nuclei in images. We also define a dictionary containing the map between labels of the training data the column target in train. 2007 https academic. ", "id": "jschnab/exploring-the-human-protein-atlas-images", "size": "3259", "language": "python", "html_url": "https://www.kaggle.com/code/jschnab/exploring-the-human-protein-atlas-images", "git_url": "https://www.kaggle.com/code/jschnab/exploring-the-human-protein-atlas-images", "script": "collections seaborn numpy matplotlib.pyplot Image pandas PIL Counter ", "entities": "(('satisfactory result', 'parameter Even upper values'), 'after') (('image', 'green channel'), 'be') (('how it', 'images'), 'apply') (('zero simple thresholding', 'yellow channel'), 'adapt') (('s', 'thresholding different simple methods'), 'let') (('We', 'human protein atlas image competition'), 'explore') (('1 it', 'interest'), 'let') (('yellow channel', 'cell shape'), 'overlay') (('Description', 'threshold types'), 'find') (('truncate', 'binary thresholding'), 's') (('connectedComponents', 'images'), 'provide') (('kernel', 'progress'), 'datasetupdate') (('connectedComponents', 'image'), 'be') (('image segmentation', 'images'), 'provide') (('that', 'seeded watershed segmentation'), 'calculate') (('how connectedComponents', 'thresholding methods'), 'let') (('s', 'train'), 'like') (('they', 'other'), 'fuse') (('red channel', 'endoplasmid yellow reticulum'), 'correspond') (('which', 'train'), 'be') (('We', 'train'), 'define') ", "extra": "", "label": "No_extra_files", "potential_description_queries": ["answer", "apply", "article", "binary", "cell", "channel", "clean", "clear", "column", "contain", "csv", "data", "dataset", "define", "dictionary", "dimensionality", "display", "explore", "following", "found", "green", "https here docs", "human", "image", "import", "improvement", "include", "interest", "kernel", "label", "let", "lookup", "lower", "map", "no", "not", "notebook", "nuclei", "overlay", "parameter", "point", "protein", "provide", "reduce", "result", "segmentation", "several", "signal", "single", "stack", "start", "target", "threshold", "thresholding different simple methods", "thresholding", "training", "try", "upper", "watershed", "while", "work"], "potential_description_queries_len": 61, "potential_script_queries": ["numpy", "seaborn"], "potential_script_queries_len": 2, "potential_entities_queries": ["protein", "watershed"], "potential_entities_queries_len": 2, "potential_extra_queries": [], "potential_extra_queries_len": 0, "all_components_potential_queries_len": 63}