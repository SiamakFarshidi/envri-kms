{"name": "build knn and apriori based recommendation engines ", "full_name": " h2 Recommendations using KNearestNeighbors method h2 Recommendations using Association Rules h2 Comparing recommendations of KNN and apriori algorithms ", "stargazers_count": 0, "forks_count": 0, "description": "Let s remove all the other movies so that we are only left with significant movies in terms of total votes count Make data consistent by ensuring there are unique entries for title userId pairsReshape the data using pivot functionLet s use sparse matrix representation of this matrix Recommendations using KNearestNeighbors method Recommendations using Association Rules Comparing recommendations of KNN and apriori algorithmsLet s compare the two recommendations engines for movie recommended against Batman Returns Let s first find the index of Batman Returns movie in our knn dataframeLet s fetch the correpsonding association rules generated via Apriori algorithm for same movie and sort them in descending order of liftLet s filter out the first 5 recommendationsWe can also take a look at the single movie recommendations rather than baskets Next we will build some classification models with this dataset. About top 21 of the movies received more than 20 votes. Load ratings csv fileLoad Movies metadata csv fileMerge the two dataframe to keep only userId movieId rating and title dataLet s see the number of ratings for each movieSee the count of unique movies in the ratings_count dataframeWe can also double check this numberLet s see some statistics for the totalRatingsThere is a huge difference between minimum number of ratings and maximum number of ratings. ", "id": "sirpunch/build-knn-and-apriori-based-recommendation-engines", "size": "1388", "language": "python", "html_url": "https://www.kaggle.com/code/sirpunch/build-knn-and-apriori-based-recommendation-engines", "git_url": "https://www.kaggle.com/code/sirpunch/build-knn-and-apriori-based-recommendation-engines", "script": "encode_units numpy sklearn.neighbors NearestNeighbors pandas csr_matrix apriori association_rules mlxtend.frequent_patterns scipy.sparse ", "entities": "(('About top 21', 'more than 20 votes'), 'receive') (('statistics', 'maximum ratings'), 'csv') (('rather Next we', 'dataset'), 'let') ", "extra": "", "label": "No_extra_files", "potential_description_queries": ["algorithm", "apriori", "association", "build", "check", "classification", "compare", "count", "csv", "data", "dataframe", "difference", "double", "fetch", "filter", "find", "generated", "index", "left", "look", "matrix", "maximum", "metadata", "method", "minimum", "movie", "number", "order", "out", "rating", "remove", "representation", "single", "sort", "sparse", "title", "total", "unique"], "potential_description_queries_len": 38, "potential_script_queries": ["numpy"], "potential_script_queries_len": 1, "potential_entities_queries": [], "potential_entities_queries_len": 0, "potential_extra_queries": [], "potential_extra_queries_len": 0, "all_components_potential_queries_len": 38}