{"name": "super resolution using multi scale learning ", "full_name": " h1 Model Building ", "stargazers_count": 0, "forks_count": 0, "description": "Model Building defining the size of the image open cv reads images in BGR format so we have to convert it to RGB resizing image resizing image Subpixel pixelshuffler left branch of Y network 3 layers of Conv2D Dropout MaxPooling2D number of filters doubles after each layer 32 64 128 left branch of Y network 3 layers of Conv2D Dropout MaxPooling2D number of filters doubles after each layer 32 64 128. ", "id": "harshraone/super-resolution-using-multi-scale-learning", "size": "17", "language": "python", "html_url": "https://www.kaggle.com/code/harshraone/super-resolution-using-multi-scale-learning", "git_url": "https://www.kaggle.com/code/harshraone/super-resolution-using-multi-scale-learning", "script": "tensorflow.keras.utils skimage.transform tensorflow.keras.layers sorted_alphanumeric tensorflow.keras.preprocessing.image Dropout tensorflow.keras.models misc pixel_MSE ndimage Conv2D numpy plot_images Input rescale Conv2DTranspose img_to_array matplotlib.pyplot Dense tensorflow log10 resize tqdm tensorflow.keras plot_model Upsample_block scipy regularizers UpSampling2D Model concatenate MaxPooling2D add PSNR cv2 ", "entities": "(('MaxPooling2D number', 'layer'), 'Building') ", "extra": "", "label": "No_extra_files", "potential_description_queries": ["branch", "convert", "cv", "format", "image", "layer", "left", "network", "number", "open", "size"], "potential_description_queries_len": 11, "potential_script_queries": ["concatenate", "cv2", "log10", "misc", "ndimage", "numpy", "preprocessing", "rescale", "resize", "scipy", "tensorflow", "tqdm"], "potential_script_queries_len": 12, "potential_entities_queries": [], "potential_entities_queries_len": 0, "potential_extra_queries": [], "potential_extra_queries_len": 0, "all_components_potential_queries_len": 23}