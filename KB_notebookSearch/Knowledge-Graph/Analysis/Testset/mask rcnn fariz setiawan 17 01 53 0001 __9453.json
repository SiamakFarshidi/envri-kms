{"name": "mask rcnn fariz setiawan 17 01 53 0001 ", "full_name": " h1 Foreword h1 Kernel Structure h1 Competition Information h2 Prediction Output Format h2 Loss Function h3 Dice Coefficient h3 Mean Dice Coefficient h2 Run Length Encoding h1 Exploratory Data Analysis h2 Class Imbalances h2 Baseline h2 Class Imbalances continued h1 Data Shapes h2 Images h2 Labels h2 Batch Size h1 Visualising the Masks h1 Semantic Segmentation h1 Mask R CNN h2 Importing h2 Configuring h2 Train Test Split h2 Pre Trained Weights h2 Instantiating the Model h1 Training h1 To Do ", "stargazers_count": 0, "forks_count": 0, "description": "Exploratory Data Analysis Baseline 2 There is a class imbalance that will have to be dealt with. png Batch SizeTo leverage the parellel computation a GPU offers we will feed the images and their labels to the algorithm in batches. Read more on Matterport s official blog https engineering. If you remember our dice coefficient we will have to calculate it for evey layer in every mask and take the average over the entire batch. More about this in the Data Shapes chapter. I therefore cloned the repo and applied a small fix. Kernel Structure Competition Information 1 We discuss the format required from us by the competition as well as the loss function of choice and the type of encoding used. com c severstal steel defect detection overview evaluation page This competition is evaluated on the mean Dice coefficient. com max 1285 1 IWWOPIYLqqF9i_gXPmBk3g. Classifier Bounding Box Regressor. For each image you must segment defects of each class ClassId 1 2 3 4. BaselineIf we d train on the entire dataset the risk is substantial that our model will simply learn the majority class no defect ever. If we train multiple images at a time we will have to take the average across a batch. It looks like combinations of two labels in a single image are reasonably frequent too. be g7z4mkfRjI4 ImportingFor instructions on how to import models into a Kaggle kernel check out the following Medium article Setting Up Mask RCNN on Kaggle https medium. png Only 7095 pictures will be of any use to us when training. Instead of submitting an exhaustive list of indices for your segmentation you will submit pairs of values that contain a start position and a run length. com 2011 05 26 super considered super needs to be in the format of our squashed df i. 2019 10 17 A Keras update means the model now produces an error documented in issue 1754 https github. Formulating the Problem Semantic Segmentation 5 We define what task is expected of us. com matterport Mask_RCNN. com matterport Mask_RCNN issues 1754. So if we were to encode something like our example above we would have to write it as follows Exploratory Data Analysis Class ImbalancesA huge imbalance quickly becomes apparent when looking at the training set description class_imbalance https i. LabelsNaturally the masks will share the same width and height but the third dimension will be as large as there are labels 256 1600 4 with each class occupying a different layer. The leaderboard score is the mean of the Dice coefficients for each pair in the test set. png The most important aspects of this algorithm are FPN feature pyramid network A fully convolutional neural architecture designed to extract features. Output path Mask_RCNN. com max 1838 1 Tb3CvTONAA4IVL HciJscw. 0 d4 d73 tutorial_py_contours_begin. Or if you prefer a visual illustration dice_viz https i. Let s see what the distributions are if we consider all possible combinations inccluding multi class instances. add_metric loss name Configuring Train Test SplitWe now have a validation set that has the same class distribution as the training set. Dataset class find the image in the dataframe extract function arguments create our numpy array mask we re actually doing semantic segmentation so our second return value is a bit awkward we have one layer per class rather than per instance. image id and list of rle plus their respective label on a single row input hygiene add our four classes add the image to our utils. png Loss Function Dice CoefficientFrom the evaluation https www. html reading in the image going through the 4 layers in the last dimension of our mask with shape 256 1600 4 indeces are 0 1 2 3 corresponding classes are 1 2 3 4 add the contours layer per layer the images we want to see max 2 due to limited population of squashed Distinct Defect Types 3 remove that condition if you wish to increase the sample size or add replace True to the. The pixels are numbered from top to bottom then left to right 1 is pixel 1 1 2 is pixel 2 1 etc. Contrary to the ROIpool mechanism that was the standard this one uses bilinear interpolation https www. RPN region proposal network A lightweight neural network that scans over the FPN features to suggest ROI regions of interest ROIAlign a novel way to pass the object to the classifier an mask generator. we find consecutive sequences by overlaying the mask on a version of itself that is displaced by 1 pixel for that we add some padding before slicing this returns the indeces where the sliced arrays differ indexes start at 0 pixel numbers start at 1 every uneven element represents the start of a new sequence every even element is where the run comes to a stop subtract the former from the latter to get the length of the run convert the array to a string the incoming string is space delimited we do the same operation with the even and uneven elements but this time with addition pixel numbers start at 1 indexes start at 0 extract the starting and ending indeces at even and uneven intervals respectively build the mask transform the numpy array from flat to the original image shape reading in the training set keep only the images with labels squash multiple rows per image into a list count the amount of class labels per image display first ten to show new structure see https plot. Training 7 Currently configured to run a single epoch. com semantic segmentation popular architectures dff0a75f39d0 on the topic if you want to read more. com c severstal steel defect detection data page Each image may have no defects a defect of a single class or defects of multiple classes. stratified split to maintain the same class balance in both sets instantiating training set instantiating validation set configuration session stuff initialiazing model we will retrain starting with the coco weights ignore UserWarnongs training at last. Pre Trained Weights Instantiating the Model Training To Do Split kernels into training inference Squashed DataFrame for inference on the competition set Improving the modelHave fun library imports neural network wizardry visuals for reproducibility paths imagine a 3 3 image with a diagional line across we change one pixel convert the pixel mask matrix to a one dimensional series our masks will consist of ones and zeros summing the result of their product gives us the cross section passing our calculated values to the formula a more elaborate version of kaggle. png This is the benchmark to beat. png baseline_score https i. Consequently our array dimensions will be expanded to batch size 256 1600 3 and batch size 256 1600 4 respectively. Input Output Data Shapes 3 Understanding the dimensions of the in and output that the neural network will be expecting. The formula is given by Dice X Y frac 2 X Y X Y where X is the predicted set of pixels and Y is the ground truth. com How does ROTAlign work in Mask RCNN to improve performance significantly. com matterport Mask_RCNN blob v2. We also show accuracy is the wrong metric due to the majority class no defects being the majority class. Mask R CNNMask R CNN falls under the category of meta algorithms rather than purely a neural network architecture. Number of classes including background background steel defects Number of training steps per epoch Skip detections with 90 confidence Discard inferior model weights instantiating super class can be found here https github. png To get a better understanding let s demonstrate with a quick toy example as we write the function Mean Dice CoefficientThe dataset s original format one row per imageId classId pair points at the fact that we will have to run this dice coefficient function over every layer in our mask and take the average. ForewordThe main goal of this notebook is to make the ideas presented easy to understand. ly ipython notebooks color scales combining into a dictionary we want counts frequency of the labels plotly for interactive graphs display we want counts of the possible combinations of labels and their frequency plotly for interactive graphs display initialise an empty numpy array building the masks classes are 1 2 3 4 corresponding indeces are 0 1 2 3 fit the mask into the correct layer note we need to transpose the matrix to account for numpy and openCV handling width and height in reverse order https docs. The Dice coefficient can be used to compare the pixel wise agreement between a predicted segmentation and its corresponding ground truth. py https rhettinger. Semantic SegmentationBelow are some of the common tasks in the field of Machine Vision semantic_segmentation https miro. Visualising the MasksLet s take a look at some examples of each class and of some of the images containing multiple classes. The competition format requires a space delimited list of pairs. I resort to Simon Walker s method to get around this. jpeg We are dealing with the problem of semantic segmentation predicting a pixel by pixel mask of distinct classes. Setting up our ML model Mask R CNN 6 Cloning and configuring Matterport s implementation of Mask RCNN. Indeed if we simply upload the sample submission we have a score of baseline_code https i. maskrcnn framework https miro. This should allow you to get started Competition Information Prediction Output FormatFrom the competition s data https www. com splash of color instance segmentation with mask r cnn and tensorflow 7c761e238b46 You can also check out the original paper s authors presenting the Mask R CNN on YouTube https youtu. For example 1 3 10 5 implies pixels 1 2 3 10 11 12 13 14 are to be included in the mask. I try my best to be as verbose as possible but if you have remaining questions I ll happily answer them in the comments. git results in Commit Error too many nested subdirectories Give the configuration a recognizable name We use a GPU with 12GB memory which can fit two images. An overwhelming amount of the observations is for class 3. See the section on Data Shapes for the Labels. git logs refs remotes origin HEAD contains too many nested subdirectories max 6. com paulorzp rle functions run lenght encode decode note that we will transpose the incoming array outside of the function as I find this a clearer illustration turn a n dimensional array into a 1 dimensional series of pixels for example 1. 1 3 implies starting at pixel 1 and running a total of 3 pixels 1 2 3. Hopefully we can balance this out at least a little with some data augmentation later. In fact 3 4 appear together more often than 2 does on its own Data Shapes ImagesThe input shape will be an image we convert to a three dimensional array with shape 256 1600 3 for height width and the three colour channels RGB respectively. com umdfirecoml setting up mask rcnn on kaggle 34b656140b5e 2019 10 10 This method currently produces an error message when committing. Run Length Encoding In order to reduce the submission file size our metric uses run length encoding on the pixel values. Check out Priya Dwivedi s excellent blogpost https towardsdatascience. In fact it builds on the faster R CNN architecture so you even have a choice of what neural net backbone you want it to use. The submission format requires us to make the classifications for each respective class on a separate row format https i. Somewhat like this label shape https i. Adjust down if you use a smaller GPU. A First Look Visualising the Masks 4 We define some utility functions and show some instances of defects. so it will always just be 1 2 3 4. The metric checks that the pairs are sorted positive and the decoded pixel values are not duplicated. The Dice coefficient is defined to be 1 when both X and Y are empty. Mask Generator A convolutional network that takes the regions selected by the ROI classifier and generates soft masks for them. you wouldn t train a pedestrian detector on a dataset of empty streets either. Carefully illustrating ideas takes a lot more time than just writing up code so upvotes are much appreciated. sample method looping over the different combinations of labels isolate from dataset and draw a sample make a subplot looping over sample current ax build the mask fetch the image and draw the contours display git clone https www. Class Imbalances continued Let s see how often each class appears as well as how the class distribution is inside images. ", "id": "farizsetiawan/mask-rcnn-fariz-setiawan-17-01-53-0001", "size": "9453", "language": "python", "html_url": "https://www.kaggle.com/code/farizsetiawan/mask-rcnn-fariz-setiawan-17-01-53-0001", "git_url": "https://www.kaggle.com/code/farizsetiawan/mask-rcnn-fariz-setiawan-17-01-53-0001", "script": "__init__ colorlover load_dataset pyplot as plt random Path load_mask plotly.graph_objects can be found here pyplot numpy mrcnn.model pathlib plotly.express sklearn.model_selection dice_coefficient rle_to_mask mask_to_contours tensorflow SeverstalConfig(Config) pandas Dataset build_mask MaskRCNN SeverstalDataset(Dataset) matplotlib mask_to_rle mrcnn.config Config visualise_mask train_test_split mrcnn.utils cv2 ", "entities": "(('you', 'more'), 'com') (('we', 'order https reverse docs'), 'initialise') (('so upvotes', 'just code'), 'take') (('2019 10 method', 'error currently message'), 'umdfirecoml') (('we', 'entire batch'), 'have') (('leaderboard score', 'test set'), 'be') (('image i d', 'utils'), 'add') (('model', 'defect'), 'baselineif') (('Dice coefficient', 'predicted segmentation'), 'use') (('I', 'small fix'), 'clone') (('ImbalancesA huge imbalance', 'class_imbalance https i.'), 'so') (('7c761e238b46 You', 'YouTube https youtu'), 'splash') (('submission format', 'row format https separate i.'), 'require') (('class as well how distribution', 'images'), 'continue') (('visual illustration', 'https i.'), 'dice_viz') (('ImportingFor instructions', 'Kaggle https medium'), 'be') (('colour three channels', 'height 1600 3 width'), 'appear') (('we', 'class multi instances'), 'let') (('competition format', 'pairs'), 'require') (('Y', 'predicted pixels'), 'give') (('bit awkward we', 'rather instance'), 'find') (('we', 'batch'), 'train') (('Semantic SegmentationBelow', 'Machine Vision semantic_segmentation https miro'), 'be') (('origin HEAD', 'too many nested subdirectories'), 'remote') (('that', 'start position'), 'submit') (('it', 'even choice'), 'build') (('which', 'two images'), 'result') (('Hopefully we', 'data at least little augmentation'), 'balance') (('How ROTAlign', 'performance'), 'com') (('we', 'average'), 'png') (('Visualising', 'multiple classes'), 'take') (('masks', 'kaggle'), 'Pre') (('com steel defect detection data c severstal image', 'multiple classes'), 'page') (('most important aspects', 'FPN feature pyramid fully convolutional neural features'), 'be') (('3', '3 pixels'), 'implie') (('neural network', 'that'), 'Shapes') (('as 256 1600 4 class', 'different layer'), 'share') (('png Only 7095 pictures', 'us'), 'be') (('that', 'training set'), 'name') (('RPN region proposal lightweight neural scans', 'mask generator'), 'network') (('Mask R CNNMask R CNN', 'network rather purely neural architecture'), 'fall') (('task', 'us'), 'formulate') (('1 2 3 10 14', 'mask'), 'imply') (('subplot', 'git clone https www'), 'isolate') (('metric uses', 'pixel values'), 'encoding') (('pixels', 'then right 1'), 'number') (('4 We', 'defects'), 'look') (('you', 'class'), 'must') (('labels', 'https plot'), 'find') (('we', 'baseline_code https i.'), 'indeed') (('one', 'bilinear interpolation https www'), 'use') (('we', 'UserWarnongs training'), 'ignore') (('you', 'Competition Information Prediction Output FormatFrom'), 'allow') (('you', 'empty streets'), 'wouldn') (('clearer illustration', 'example'), 'run') (('we', 'batches'), 'leverage') (('I', 'comments'), 'try') (('Mask convolutional that', 'them'), 'Generator') (('jpeg We', 'distinct classes'), 'deal') (('ideas', 'notebook'), 'be') (('array Consequently dimensions', '256 1600 3 size'), 'expand') (('competition', 'Dice mean coefficient'), 'defect') (('I', 'this'), 'resort') (('defects', 'majority wrong class'), 'show') (('you', 'the'), 'be') (('It', 'single image'), 'look') (('overwhelming amount', 'class'), 'be') (('Kernel Structure Competition 1 We', 'encoding'), 'Information') (('Number', 'https here github'), 'find') (('model', 'https 1754 github'), '2019') ", "extra": "['test']", "label": "Perfect_files", "potential_description_queries": ["account", "accuracy", "algorithm", "answer", "appear", "architecture", "array", "article", "augmentation", "average", "backbone", "background", "balance", "batch", "benchmark", "best", "bit", "blob", "blog", "bottom", "build", "calculate", "category", "check", "choice", "class_imbalance", "classifier", "clone", "cnn", "coco", "code", "coefficient", "color", "compare", "competition", "computation", "condition", "confidence", "consider", "contain", "convert", "convolutional", "correct", "count", "create", "current", "data", "dataframe", "dataset", "decode", "defect", "define", "description", "detection", "detector", "df", "dice", "dictionary", "dimension", "display", "distribution", "draw", "empty", "encode", "encoding", "epoch", "error", "evaluation", "even", "every", "expected", "extract", "fact", "faster", "feature", "feed", "fetch", "field", "file", "find", "fit", "flat", "following", "format", "formula", "found", "frac", "framework", "frequency", "frequent", "fun", "function", "ground", "height", "id", "ignore", "image", "imbalance", "implementation", "import", "improve", "including", "increase", "inference", "input", "instance", "interactive", "interest", "interpolation", "issue", "itself", "kaggle", "kernel", "label", "latter", "layer", "leaderboard", "learn", "least", "left", "length", "let", "library", "line", "list", "little", "look", "looking", "lot", "main", "majority", "mask", "matrix", "max", "mean", "memory", "message", "meta", "method", "metric", "model", "most", "multiple", "my", "name", "need", "network", "neural", "new", "no", "not", "notebook", "numpy", "object", "official", "operation", "order", "out", "output", "overview", "padding", "page", "pair", "path", "per", "performance", "pixel", "plotly", "png", "population", "position", "positive", "problem", "product", "py", "rcnn", "re", "read", "reading", "reduce", "region", "remove", "replace", "reproducibility", "result", "return", "reverse", "right", "risk", "rle", "row", "run", "running", "sample", "score", "second", "section", "segment", "segmentation", "selected", "separate", "sequence", "session", "set", "shape", "single", "size", "soft", "something", "space", "split", "standard", "start", "string", "structure", "stuff", "submission", "subplot", "subtract", "task", "tensorflow", "test", "through", "time", "topic", "total", "train", "training", "transform", "transpose", "try", "turn", "type", "under", "understanding", "up", "update", "validation", "value", "version", "width", "wise", "work", "write"], "potential_description_queries_len": 244, "potential_script_queries": ["colorlover", "cv2", "matplotlib", "pathlib", "plt", "pyplot", "random"], "potential_script_queries_len": 7, "potential_entities_queries": ["convolutional", "defect", "feature", "interpolation", "little", "neural", "reverse", "separate"], "potential_entities_queries_len": 8, "potential_extra_queries": [], "potential_extra_queries_len": 0, "all_components_potential_queries_len": 249}