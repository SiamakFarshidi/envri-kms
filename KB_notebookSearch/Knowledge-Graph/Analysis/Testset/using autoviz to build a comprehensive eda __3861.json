{"name": "using autoviz to build a comprehensive eda ", "full_name": " h1 Introduction h1 Preparation Activities h1 AutoViz based EDA h1 References ", "stargazers_count": 0, "forks_count": 0, "description": "the values of target Note It could take me around 3 h to build the EDA and data visualizations of the comparable granularity level of details if I did it manually with some of the mainstream data visualization libraries. com AutoViML AutoViz Usage section for more information of each of the attributes used in AV. AutoViz stands out of the crowd of freeware Pythonic Rapid EDA Automation tools doing things in a very fast way the way better than its close freeware rivals like SweetViz or Pandas Profiling Notes You can find the motivation of why I try to use AutoViz when feasible in one of my earlier case studies per https www. Well as we can see it took it a few minutes to actually run the EDA discovery flow as well as generate the relevant data visualization charts 105 charts generated in fact. IntroductionIn this notebook we are going to see if one of the classes of Auto ML tools namely Rapid EDA Automation tools can be effectively used on the problems datasets of a type proposed to tackle in this competition. read_csv read data running in Kaggle inside the competition running locally main flow get the training set and labels. AutoViz based EDANow we are ready to set up an AutoViz based EDA discovery it is as simple as the code fragment below Note You can check the documentation at https github. target count2 and count14 seem to have a nice separation of values into relatively contained clusters vs. Then in 20 min I could review the charts to quickly grasp on the data driven insights below there are no missing values for any of the feature variables in any observations in the training set most of the feature variables are polynomially distributed values of count5 variable seem to be extremely skewed there are potential outliers in the training set with values of target below 5 so it could be reasonable to drop such records from the training set down the road as a part of the respective ML experiments there is a set of highly correlated features detected these are count1 count6 count9 and count10 variables namely we may want to drop all of them but one with the highest absolute value of the correlation coefficient vs. com autoviz a new tool for automated visualization ec9c1744a6ad George Vyshnya PROs and CONs of Rapid EDA Tools https medium. target it seems to be count1 in fact there are also some other pairs of highly correlated features detected count6 and count11 count6 and count12 and dropping count6 from the training set could resolve such a correlation issue with such feature pairs down the road in ML experiments count11 and count12 are also highly correlated so we may want to leave just one of them in the training set during the ML experiments down the road retaining count11 seems to be a better option though as it has higher absolute value of the correlation coefficient vs. For future experiments we are going to use AutoViz https github. com sbc group blog pros and cons of rapid eda tools e1ccd159ab07 linear algebra data processing CSV file I O e. ReferencesThe references to the blog posts below may be helpful in your deeper delve into the universe of AutoViz Dan Roth AutoViz A New Tool for Automated Visualization https towardsdatascience. com AutoViML AutoViz. AutoViz method invokation. com c lish moa discussion 190647 I also put a few references to the blog posts about AutoViz in the References Section at the bottom of this notebook Preparation ActivitiesFirst of all we are going to do a few usual preparation steps install the latest stable version of AutoViz import the packages we need to work with in the course of the current analytical effort read the competion data in memory for future manipulationsBefore running the AutoViz based EDA discoveries we will check the basic info about our training dataset records count data types of variables of missing values etc. ", "id": "gvyshnya/using-autoviz-to-build-a-comprehensive-eda", "size": "3861", "language": "python", "html_url": "https://www.kaggle.com/code/gvyshnya/using-autoviz-to-build-a-comprehensive-eda", "git_url": "https://www.kaggle.com/code/gvyshnya/using-autoviz-to-build-a-comprehensive-eda", "script": "plotly.graph_objects typing Tuple autoviz.AutoViz_Class AutoViz_Class seaborn numpy matplotlib.pyplot make_subplots pandas get_data_file_path plotly.subplots plotly.express datetime ", "entities": "(('ReferencesThe references', 'Automated Visualization https towardsdatascience'), 'be') (('You', 'https github'), 'base') (('training', 'locally main flow'), 'read') (('target', 'relatively contained clusters'), 'seem') (('namely we', 'correlation coefficient'), 'review') (('we', 'missing values'), 'discussion') (('why I', 'https www'), 'stand') (('we', 'AutoViz https github'), 'go') (('com', 'Rapid EDA Tools https medium'), 'autoviz') (('one', 'competition'), 'introductionin') (('I', 'data visualization mainstream libraries'), 'value') (('data as well relevant visualization', 'fact'), 'take') (('better it', 'correlation coefficient'), 'seem') ", "extra": "['test']", "label": "Perfect_files", "potential_description_queries": ["absolute", "basic", "blog", "bottom", "build", "case", "check", "close", "code", "coefficient", "competition", "correlation", "could", "count", "course", "current", "data", "dataset", "detected", "distributed", "drop", "eda", "effort", "fact", "feature", "file", "find", "flow", "future", "generate", "generated", "group", "import", "info", "issue", "leave", "level", "linear", "main", "memory", "method", "min", "missing", "most", "motivation", "my", "need", "new", "no", "notebook", "option", "out", "part", "per", "potential", "processing", "read", "review", "run", "running", "section", "separation", "set", "target", "tool", "training", "try", "type", "up", "value", "variable", "version", "visualization", "work"], "potential_description_queries_len": 74, "potential_script_queries": ["datetime", "numpy", "plotly", "seaborn"], "potential_script_queries_len": 4, "potential_entities_queries": ["visualization"], "potential_entities_queries_len": 1, "potential_extra_queries": ["test"], "potential_extra_queries_len": 1, "all_components_potential_queries_len": 79}