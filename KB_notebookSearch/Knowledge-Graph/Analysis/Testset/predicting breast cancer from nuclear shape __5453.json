{"name": "predicting breast cancer from nuclear shape ", "full_name": " ", "stargazers_count": 0, "forks_count": 0, "description": "Another data preprocessing step that we can do is Principal Component Analysis PCA. With PCA we transform our features to make them less correlated via a process that involves dimensionality reduction. In order to choose between these classification algorithms I will plot learning curves where I illustrate the relationship between the accuracy score and the cross validation score for increasing sample sizes. Likewise a growing body of literature suggests that there is some connection between the shape of the nucleus and human disease states such as cancer and aging. By looking at the size and shape of the nuclei present within these tissue samples doctors can determine whether a given sample appears to be benign B or malignant M. This confirms my prediction that healthy nuclei are typically circular elliptical and that cancer cells are mishapen and have lots of concave points. Next I will try using neural networks in order to make these same predictions. Besides that we were consistently accurate. scale function at the following link http scikit learn. org stable modules decomposition. This confirms my prediction that healthy nuclei have a default size and that cancer cells have a wide range of sizes typically greater than the default size. I will do this to make sure that we are not overfitting the training data. Next I will try building a custom neural network using the Keras library. scale function which functions by subtracting the mean and then dividing by the standard deviation in order to generate values that are centered around zero. io models sequential This is just to compare what we would do in Keras to what we would do in Sklearn Next I will try a voting classifier where we combine the best two models SVM and MLPC. Abberant nuclear shape can be used to identify cancer cells e. Technicians can use a microscope to observe tissue samples that were taken from patients who are suspected to have breast cancer. Here in this document I demonstrate a methodology to predict if a sample is benign or malignant given measurements of nuclear shape that were made from digital images of fine needle aspirates of breast tissue masses from clinical samples. pap smear tests and the diagnosis of cervical cancer. html cross validation Step 5 Define Helper Functions for Plotting Learning Curve and Confusion Matrix Step 6 Evaluate Classification Models Now I will try running a few different classification algorithms such as Logistic Regression and Support Vector Machines. htmlhttp scikit learn. It would be hepful to have an automated method that can quickly determine if a sample is benign or malignant. We want a learning curve where the vali score gets close to converging with the training score but does not quite converge. My apologies to the small percentage of patients with malignant tumors who were told that their tumors were benign. This type of data is compatible with a wide variety of different classification algorithms. Step 1 Import Modules Step 2 Explore Data See Column Titles Raw Data and Null Counts Step 3 Plot Data Compare the size and shape of the nuclei from malignant samples to the size and shape of the nuclei from benign samples. org stable modules generated sklearn. Predicting Breast Cancer From Nuclear Shape The nucleus is an organelle present within all eukaryotic cells including human cells. Step 4 Preprocess Data Next I will pre process the data so that it is ready for analysis. org stable modules cross_validation. First I will convert the labels B and M to 0 and 1 respectively. I will do this both with and without the data scaling step in order to illustrate the importance of this preprocessing step. We had our best results when we used SVM MLPC or a VotingClassifier where we combined both SVM and MLPC. In addition to being larger than healthy cells cancer cells are often mishapen. Next I will scale the values by using the sklearn. html pcaFurthermore we will also need to split up our training data setting aside 20 of the training data for testing such that we can avoid potentially overfitting the data. As such the quantitative analysis of nuclear size and shape has important biomedical applications. The train_test_split function accomplishes this as described in the following documentation http scikit learn. You can learn more about the sklearn. In the future tools like this can be used to save time cut costs and increase the accuracy of imaging based diagnostic approaches in the healthcare industry. html http scikit learn. Furthermore we had the best results when we used data scaling and we did not see much of a difference when we used PCA. html By doing this we will have data with numerical Y values and X values that are centered around zero. For more information see the following documentaion http scikit learn. The learning curve for Support Vector Machine looks pretty good. Next I will plot confusion plots for SVM where the Y Axis represents the True labels Malignant or Benign while the X Axis represents the Predicted labels generated by the Support Vector Machine. Let s explore the Support Vector Machine SVM approach in a little more detail. ", "id": "paultimothymooney/predicting-breast-cancer-from-nuclear-shape", "size": "5453", "language": "python", "html_url": "https://www.kaggle.com/code/paultimothymooney/predicting-breast-cancer-from-nuclear-shape", "git_url": "https://www.kaggle.com/code/paultimothymooney/predicting-breast-cancer-from-nuclear-shape", "script": "sklearn.metrics PCA Adadelta sklearn.naive_bayes sklearn.tree keras.layers sklearn.discriminant_analysis KerasRegressor Dropout Sequential plot_learning_curve KNeighborsClassifier sklearn.neural_network SGD Adam DecisionTreeClassifier plotLotsOfLearningCurves describeData Adagrad seaborn numpy LinearSVC plotConcaveDistribution selectParametersForMLPC plot_confusion_matrix learning_curve keras.wrappers.scikit_learn sklearn.decomposition GradientBoostingClassifier MLPClassifier as MLPC selectParametersForSVM VotingClassifier plotPNG sklearn.ensemble print_function sklearn sklearn.model_selection confusion_matrix RandomForestClassifier defineModels LinearDiscriminantAnalysis matplotlib.pyplot RMSprop Activation Dense pandas plotSizeDistribution runVotingClassifier keras.optimizers runSimpleKeras LogisticRegression accuracy_score compareABunchOfDifferentModelsAccuracy diagnosisToBinary KerasClassifier __future__ GridSearchCV model_selection sklearn.neighbors sklearn.linear_model SVC GaussianNB sklearn.svm keras.models MLPClassifier train_test_split make_scorer preprocessing ", "entities": "(('Now I', 'Logistic such Regression'), 'cross') (('Next I', 'same predictions'), 'try') (('where we', 'best two models'), 'sequential') (('that', 'clinical samples'), 'demonstrate') (('we', 'training data'), 'do') (('quickly sample', 'automated method'), 'be') (('scikit', 'documentation following http'), 'accomplish') (('where I', 'cross validation sample sizes'), 'plot') (('nucleus', 'human cells'), 'predict') (('cancer typically circular cells', 'concave points'), 'confirm') (('Next I', 'Keras library'), 'try') (('vali where score', 'training close score'), 'want') (('we', 'that'), 'be') (('quantitative analysis', 'important biomedical applications'), 'have') (('cancer cells', 'default typically greater size'), 'confirm') (('given sample', 'tissue present samples'), 'determine') (('when we', 'PCA'), 'have') (('Next I', 'sklearn'), 'scale') (('Column Titles Raw Plot Data Null Step 3 Data', 'benign samples'), 'step') (('type', 'classification different algorithms'), 'be') (('X that', 'zero'), 'have') (('learning curve', 'Support Vector Machine'), 'look') (('who', 'breast cancer'), 'use') (('that', 'dimensionality reduction'), 'transform') (('Likewise growing body', 'such cancer'), 'suggest') (('Abberant nuclear shape', 'cancer cells e.'), 'use') (('First I', '0'), 'convert') (('data', 'preprocessing step'), 'do') (('s', 'little more detail'), 'let') (('tumors', 'malignant tumors'), 'apology') (('such we', 'potentially data'), 'need') (('where we', 'SVM'), 'have') (('scikit', 'link following http'), 'learn') (('it', 'analysis'), 'Data') (('X Malignant Axis', 'Support Vector Machine'), 'plot') (('scikit', 'more information'), 'see') (('that', 'zero'), 'function') ", "extra": "['biopsy of the greater curvature', 'disease', 'patient', 'test', 'cervical cancer', 'diagnosis']", "label": "Perfect_files", "potential_description_queries": ["accuracy", "approach", "best", "body", "breast", "cancer", "cervical", "choose", "circular", "classification", "classifier", "close", "combine", "combined", "compare", "confusion", "connection", "convert", "curve", "custom", "cut", "data", "default", "diagnosis", "difference", "dimensionality", "disease", "document", "explore", "following", "function", "future", "generate", "generated", "http", "human", "importance", "including", "increase", "io", "learn", "learning", "link", "little", "looking", "malignant", "mean", "method", "microscope", "my", "need", "network", "neural", "not", "nuclei", "numerical", "order", "overfitting", "percentage", "plot", "pre", "predict", "prediction", "preprocessing", "present", "range", "relationship", "running", "sample", "save", "scale", "scaling", "scikit learn", "scikit", "score", "shape", "size", "split", "standard", "step", "testing", "time", "tissue", "training", "transform", "try", "type", "up", "validation", "while", "who"], "potential_description_queries_len": 91, "potential_script_queries": ["numpy", "seaborn", "sklearn"], "potential_script_queries_len": 3, "potential_entities_queries": ["close", "present", "validation"], "potential_entities_queries_len": 3, "potential_extra_queries": ["biopsy", "diagnosis"], "potential_extra_queries_len": 2, "all_components_potential_queries_len": 94}