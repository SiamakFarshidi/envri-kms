{"name": "histopathologic cancer detection using cnns ", "full_name": " h1 Introduction h3 1 Understanding the Problem h3 Motivation h3 2 Understanding the Data h3 3 Understanding the Images h3 4 Understanding the Evaluation Metric h1 Loading Data and EDA h1 Visualizing Images h1 Sampling h1 Data Pre processing for our PyTorch h1 Defining Model Architecture h1 Training and Validation h1 Predictions on Test set h1 Visualizing Preditions h3 Authored By ", "stargazers_count": 0, "forks_count": 0, "description": "SamplingSince the train dataset contains 220. The PCam s dataset including this one uses 10x undersampling to increase the field of view which gives the resultant pixel resolution of 2. It tells how much model is capable of distinguishing between classes. Training and Validation Predictions on Test set Visualizing Preditions How cool is that Now this model can be used to predict Cancer maybe even in real world the AUC score I was able to achieve with this model on test set is 0. Visualizing ImagesClassifying metastases is probably not an easy task for a trained pathologist and extremely difficult for an untrained eye when we take a look at the image. Higher the AUC better the model is at predicting 0s as 0s and 1s as 1s. The directories train test contain the actual images. read_csv Matplotlib for visualization OpenCV Image Library Import PyTorch Import useful sklearn functions display 20 images Number of samples in each class Data paths Use 80000 positive and negative examples Concatenate the two dfs and shuffle them up Our own custom class for datasets We the get the following mean and std for the channels of all the images Set Batch Size Percentage of training set to use as validation obtain training indices that will be used for validation np. However some relevant information about the surroundings might be left out with these small sized image samples I guess. Obviously I don t know biology to understand this problem right away here is what I found online about histopathology. Data Pre processing for our PyTorchFirst we turn our data into PyTorch dataset then the data is sampled into train and validation sets. com c histopathologic cancer detection overview challenge on Kaggle. png t 2018 11 15 01 52 19 1. Understanding the Problem Our goal is to create an algorithm to identify metastatic cancer in small image patches taken from larger digital pathology scans. As you might already know this is a binary classification problem. By analogy higher the AUC close to 1 better the model is at distinguishing between patients with disease and no disease. Authored By Abhinand http kaggle. Understanding the Data The train data we have here contains 220 025 images and the test set contains 57 468 images. Our training data has a class distribution of 60 40 negative and positive samples which is not bad. Understanding the Images You are predicting the labels for the images in the test folder. A positive label indicates that the center 32x32px region of a patch contains at least one pixel of tumor tissue. This is one of many architectures I tried that gave better results. Motivation Lymph nodes are small glands that filter the fluid in the lymphatic system and they are the first place a breast cancer is likely to spread. Histological assessment of lymph node metastases is part of determining the stage of breast cancer in TNM classification which is a globally recognized standard for classifying the extent of spread of cancer. Understanding the Evaluation MetricThe evaluation metric is the Area Under ROC Curve which is also called AU ROC AOC Curve. shape Life saving debugging step D check if CUDA is available create a complete CNN Move model to GPU if available Trainable Parameters specify loss function categorical cross entropy loss specify optimizer number of epochs to train the model keeping track of losses as it happen keep track of training and validation loss train the model move tensors to GPU if CUDA is available clear the gradients of all optimized variables forward pass compute predicted outputs by passing inputs to the model calculate the batch loss backward pass compute gradient of the loss with respect to model parameters perform a single optimization step parameter update Update Train loss and accuracies validate the model move tensors to GPU if CUDA is available forward pass compute predicted outputs by passing inputs to the model calculate the batch loss update average validation loss calculate average losses print training validation statistics Early Stopping Load Best parameters learned from training into our model to make predictions later Turn off gradients Create Submission file unnormalize convert from Tensor image and display obtain one batch of training images convert images to numpy for display plot the images in the batch along with the corresponding labels display 20 images. AUC ROC curve is a performance measurement for classification problem at various thresholds settings. It could bring a great change altogether. IntroductionThis notebook provides solution to Histopathologic Cancer Detection https www. That makes using Machine Learning a great choice both in terms of accuracy and ease of usability. It is important to take into account that this data is only a subset of the original PCam dataset https github. Here s what Kaggle says The original PCam dataset contains duplicate images due to its probabilistic sampling however the version presented on Kaggle does not contain duplicates. We have otherwise maintained the same data and splits as the PCam benchmark. jpg AUC Curve https i. Histopathology is the study of the signs of the disease using the microscopic examination of a biopsy or surgical specimen that is processed and fixed onto glass slides. shuffle indices Create Samplers prepare data loaders combine dataset and sampler creating test data prepare the test loader Convolutional and Pooling Layers print x. I also found that these data were obtained as a result of routine clinical practices and similar to how a trained pathologist would examine similar images for identifying metastases. com abhinand05 linear algebra data processing CSV file I O e. com kaggle competitions kaggle 11848 logos header. png Loading Data and EDAHaving a look at the data just like any other image classification problem we have a csv file with image ids and labels. 025 images we can sample out a shuffled part of that in this case 160000 samples and train on them to make predictions later. This from the competition s description means that the centers of the images are the ones that really matter. It is one of the most important evaluation metrics for checking any classification model s performance. com basveeling pcam which in the end is derived from the Camelyon16 Challenge dataset https camelyon16. 95 which shows the model is doing way better than just guessing it might be very much reliable if a few tweaks are to be made to take it even closer to 1. org Data which contains 400 H E stained whole slide images of sentinel lymph node sections that were acquired and digitized at 2 different centers using a 40x objective. This is a perfect Computer Vision problem where we are tasked with the detection of cancer by identifying metastatic tissue in histopathologic scans of lymph nodes using Deep Learning. The curve is plotted with True Positive Rates Vs the False Positive Rates along the x and y axes respectively. Data Augmentations are added for train data to improve performance. ROC is a probability curve and AUC represents degree or measure of separability. Defining Model ArchitectureI m using a Deep Convolutional Neural Network for this task building which is fairly straight forward in PyTorch if you understand how it works. To visualize different components of the tissue under a microscope the sections are dyed with one or more stains. Header Image https storage. This outer region is provided to enable fully convolutional models that do not use zero padding to ensure consistent behavior when applied to a whole slide image. The diagnostic procedure for pathologists is tedious and time consuming as a large area of tissue has to be examined and small metastases can be easily missed. Tumor tissue in the outer region of the patch does not influence the label. ROC AUC ROC Curve http gim. ", "id": "abhinand05/histopathologic-cancer-detection-using-cnns", "size": "6236", "language": "python", "html_url": "https://www.kaggle.com/code/abhinand05/histopathologic-cancer-detection-using-cnns", "git_url": "https://www.kaggle.com/code/abhinand05/histopathologic-cancer-detection-using-cnns", "script": "torch.optim torch.utils.data sklearn.metrics __init__ DataLoader forward torch.nn numpy __getitem__ PIL Image matplotlib.pyplot pandas Dataset __len__ accuracy_score imshow torch.nn.functional roc_auc_score TensorDataset CreateDataset(Dataset) torch.utils.data.sampler CNN(nn.Module) SubsetRandomSampler torchvision.transforms ", "entities": "(('that', 'validation np'), 'display') (('directories', 'train actual images'), 'contain') (('I', 'test set'), 'set') (('sections', 'one stains'), 'dye') (('how much model', 'classes'), 'tell') (('It', 'classification performance'), 'be') (('which', '60 40 negative samples'), 'have') (('Computer Vision perfect where we', 'Deep Learning'), 'be') (('I', 'online histopathology'), 'don') (('025 we', 'predictions'), 'image') (('AUC ROC curve', 'thresholds various settings'), 'be') (('better model', '1s'), 'high') (('Convolutional Layers', 'test loader'), 'indice') (('very much few tweaks', 'even closer 1'), '95') (('however version', 'duplicates'), 's') (('predictions', '20 images'), 'create') (('220 here 025 images', 'test 57 468 images'), 'contain') (('which', 'ROC Curve'), 'be') (('com kaggle competitions', 'logos 11848 header'), 'kaggle') (('surgical that', 'glass slides'), 'be') (('we', 'image ids'), 'have') (('IntroductionThis notebook', 'Histopathologic Cancer Detection https www'), 'provide') (('We', 'PCam benchmark'), 'maintain') (('I', 'image small sized samples'), 'leave') (('center 32x32px region', 'tumor tissue'), 'indicate') (('Data Augmentations', 'performance'), 'add') (('ROC', 'separability'), 'be') (('data', 'https github'), 'be') (('how it', 'fairly straight forward PyTorch'), 'ArchitectureI') (('You', 'test folder'), 'predict') (('that', 'better results'), 'be') (('close to 1 better model', 'disease'), 'be') (('It', 'great change'), 'bring') (('that', 'images'), 'mean') (('which', 'cancer'), 'be') (('breast first cancer', 'lymphatic system'), 'be') (('curve', 'False Positive x axes'), 'plot') (('how trained pathologist', 'metastases'), 'find') (('then data', 'train sets'), 'process') (('that', 'slide when whole image'), 'provide') (('which', '2'), 'use') (('when we', 'image'), 'be') (('train dataset', '220'), 'contain') (('That', 'usability'), 'make') (('goal', 'pathology larger digital scans'), 'be') (('com basveeling which', 'Challenge dataset https camelyon16'), 'pcam') (('Tumor tissue', 'label'), 'influence') (('that', '40x objective'), 'Data') (('small metastases', 'tissue'), 'be') ", "extra": "['biopsy', 'biopsy of the greater curvature', 'disease', 'patient', 'test', 'procedure']", "label": "Perfect_files", "potential_description_queries": ["account", "accuracy", "algorithm", "area", "assessment", "average", "backward", "batch", "behavior", "binary", "biopsy", "breast", "calculate", "cancer", "case", "categorical", "center", "challenge", "check", "checking", "choice", "classification", "clear", "close", "combine", "competition", "compute", "contain", "convert", "convolutional", "could", "create", "csv", "curve", "custom", "data", "dataset", "degree", "description", "detection", "disease", "display", "distribution", "duplicate", "ease", "enable", "end", "ensure", "entropy", "evaluation", "even", "examination", "extent", "eye", "field", "file", "filter", "fixed", "following", "forward", "found", "function", "gradient", "http", "image", "improve", "including", "increase", "influence", "kaggle", "label", "least", "left", "linear", "loader", "look", "mean", "measure", "measurement", "metric", "microscope", "might", "model", "most", "move", "negative", "no", "node", "not", "notebook", "number", "numpy", "optimization", "optimizer", "out", "outer", "overview", "padding", "parameter", "part", "patch", "pathologist", "perform", "performance", "pixel", "place", "plot", "png", "positive", "predict", "prepare", "print", "probability", "problem", "procedure", "processing", "region", "resolution", "result", "right", "routine", "sample", "sampler", "sampling", "saving", "score", "set", "shape", "shuffle", "similar", "single", "sklearn", "slide", "solution", "spread", "stage", "standard", "std", "step", "subset", "system", "task", "test", "time", "tissue", "track", "train", "training", "tumor", "turn", "under", "undersampling", "up", "update", "validate", "validation", "version", "view", "visualization", "visualize", "world"], "potential_description_queries_len": 161, "potential_script_queries": ["forward", "imshow", "nn", "torch"], "potential_script_queries_len": 4, "potential_entities_queries": ["forward", "negative"], "potential_entities_queries_len": 2, "potential_extra_queries": ["procedure"], "potential_extra_queries_len": 1, "all_components_potential_queries_len": 163}