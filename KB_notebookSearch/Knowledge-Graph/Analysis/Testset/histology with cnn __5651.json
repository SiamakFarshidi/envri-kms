{"name": "histology with cnn ", "full_name": " h1 Import the necessary libraries and load the data h1 Load the data and explore a few images ", "stargazers_count": 0, "forks_count": 0, "description": "Here I ll be using Keras tensorflow backend to create a Convolutional Neural Network CNN that I hope will be capable of discriminating these cell types well. So let s say a cell is MUCOSA. This kind of pooling takes the highest number in a given kernel size the size of the colored squares on the input image below and outputs it to the next layer. 5 depending on weight s initialization. I tried to use a simpler network such as using 1 Conv2D Dropout Maxpooling but the model wasn t able to learn at all. You may notice that all the nine elements from the input image were mapped into a single one in the new layer. org contents convnets. The test accuracy is about 77 83 and validation loss ranging from 0. There are lots of tutorial on the web in this topic such as this one http cs231n. This is done to reduce dimensionality so the number of parameters used to train the network is reduced. Below I ll just point out a few relevant aspects about CNNs so we can follow up the reasoning and build a basic one. The convolutional layer will apply a filter also called a kernel to map the input image into another kind of image in the new layer as depicted in the image below Conv2 https cdn images 1. images but I couldn t reshape it into a 4 d input. Below we can see a maxpooling layer. Then after using LabelBinarizer the label would be 0 0 0 1 0 0 0 0. I ve made some tests using higher and lower dropouts but 0. The architecture will be 3 Conv2D Dropout Maxpooling 4 times followed by a global maxpooling. maxpool https cdn images 1. From what I can see stroma and complex cells are very similar I m no hematologist. For instance our outputs can be STROMA DEBRIS ADIPOSE MUCOSA EMPTY TUMOR LYMPHO COMPLEX. png Image source https adeshpande3. For a more mathematical definition you can check Ian Goodfellow s book chapter 9 https www. This operation of multiplying the filter elements by a few elements of an image is what give the name to this kind of network roughly saying this is what a convolution is. At the end I run the outputs through a fully connected layer to get the probabilities. The objective now is to make a more robust architecture to improve the accuracy my goal is to at least get 85. For our problem is a multiclass classification we ll use softmax https www. I tried to feed the Keras model directly with df. com kmader histology mnist loading and processing data methods. Conv http adeshpande3. In the second layer type we do what is called pooling which can be commonly seen following every one or two convolutional layers. When we run our model it will give probabilities like 0 0. Image type convert PIL. Not bad at all for a pretty straightforward model trying to identify 7 types of cells. png Image source https medium. Let s load an image for each cell_type to see how they look like. First let s create a 4 rank tensor see it as a 4 dimensional array. We can see here the 7 existing cell types in the dataset. I hope this small notebook is helpful to people trying to learn about CNN and how to make them in Keras using this wonderful dataset linear algebra data processing CSV file I O e. Now I will use LabelBinarizer to make our outputs either 0 or 1. Image type to 3D tensor with shape 150 150 3 convert 3D tensor to 4D tensor with shape 1 150 150 3 and return 4D tensor. I also split the dataset into training validation and test tensors. com max 800 1 vbfPq HvBCkAcZhiSTZybg. io A Beginner 27s Guide To Understanding Convolutional Neural Networks Basically to build a simple CNN we use three kind of layers convolutional pooling and fully connected. com max 800 1 EuSjHyyDRPAQUdKCKLTgIQ. read_csv deal with paths deal with paths deal with images read images from files make plots pretty plots P get unique cell types get the first row containing an image of cell_type cell list containing one image of each type create the subplots show the images and label them loads RGB image as PIL. 0 so the cell could be identified as mucosa with 70 of certainty. 3 was the optimal value as far as I could find out. org an intuitive guide to convolutional neural networks 260c2de0a050 so I won t go deep into the theory behind it here. Import the necessary libraries and load the data Load the data and explore a few imagesThis step was done using Kevin s notebook https www. Now all our images were read and are displayed as numpy arrays. com What is the intuition behind SoftMax function as the final activation function that will give the probability of the image belonging to each of the classes cell types. io convolutional networks and this one https medium. org an intuitive guide to convolutional neural networks 260c2de0a050 Here the numbers in the filter are the weights our algorithm will try to predict in order to get the best results possible. As a direct effect the training time and overfitting issues are reduced as well. Our dataframe is already prepared for us to classify an image into one of the cell_type. and perhaps our predictor will be more confused when looking at these two types. org an intuitive guide to convolutional neural networks 260c2de0a050 After using a given number of convolutional pooling layers we can feed the output into a fully connected layer which is the usual layer in a Multilayer Perceptron MLP https machinelearningmastery. Now I ll run the CNN itself. If anyone has an idea how to do it I d be glad to get feedback So the functions below just get the path to the image and load it into the shape 150 150 3 using the image package from keras. com neural networks crash course. For those unfamiliar with the concept each pixel in the image is represented by a 3 sized array where each element represents the intensity of red green blue colors ranging from 0 to 255. ", "id": "hrmello/histology-with-cnn", "size": "5651", "language": "python", "html_url": "https://www.kaggle.com/code/hrmello/histology-with-cnn", "git_url": "https://www.kaggle.com/code/hrmello/histology-with-cnn", "script": "Flatten glob randint LabelBinarizer keras.layers keras.callbacks GlobalAveragePooling2D random np_utils Dropout EarlyStopping Sequential Conv2D seaborn numpy paths_to_tensor PIL ModelCheckpoint sklearn.model_selection imread #read images from files image matplotlib.pyplot ImageFile path_to_tensor Dense keras.utils tensorflow pandas GlobalMaxPooling2D set_random_seed tqdm glob #deal with paths keras.preprocessing MaxPooling2D sklearn.preprocessing keras.models train_test_split get_first_cell_images skimage.io ", "entities": "(('nine elements', 'new layer'), 'notice') (('We', 'dataset'), 'see') (('subplots', 'PIL'), 'deal') (('I', 'training validation'), 'split') (('which', 'Multilayer Perceptron MLP https usual machinelearningmastery'), 'org') (('I', 'probabilities'), 'run') (('So functions', 'keras'), 'have') (('network', 'parameters'), 'do') (('it', '0'), 'give') (('Now images', 'numpy arrays'), 'read') (('test accuracy', 'validation about 77 83 0'), 'be') (('which', 'commonly one convolutional layers'), 'in') (('best results', 'order'), 'org') (('training time overfitting issues', 'direct effect'), 'reduce') (('you', 'Ian https book chapter 9 www'), 'check') (('I', 'directly df'), 'try') (('Now I', 'outputs'), 'use') (('ve tests', 'higher dropouts'), 'make') (('architecture', 'Dropout 4 times global maxpooling'), 'be') (('I', 'Conv2D Dropout such 1 Maxpooling'), 'try') (('such one', 'topic'), 'be') (('t', 'it'), 'org') (('perhaps predictor', 'more when two types'), 'be') (('a few step', 'notebook https www'), 'import') (('convolution', 'network'), 'be') (('goal', 'at least 85'), 'be') (('First s', '4 dimensional array'), 'let') (('so cell', 'certainty'), '0') (('they', 'how'), 'let') (('t', 'd 4 input'), 'image') (('outputs', 'instance'), 'be') (('so we', 'basic one'), 'point') (('Image type', '1 150 150 3 4D tensor'), 'convert') (('where element', '255'), 'represent') (('that', 'classes cell types'), 'com') (('already us', 'cell_type'), 'be') (('convolutional layer', 'https cdn Conv2 images'), 'apply') (('complex very I', 'hematologist'), 'be') (('small notebook', 'dataset linear algebra data CSV wonderful processing file'), 'hope') (('kind', 'next layer'), 'take') (('we', 'layers'), 'io') (('multiclass we', 'softmax https www'), 'be') (('I', 'cell types'), 'use') ", "extra": "['test', 'mucosa']", "label": "Perfect_files", "potential_description_queries": ["accuracy", "algorithm", "apply", "architecture", "array", "backend", "basic", "best", "book", "build", "cell", "check", "classification", "classify", "colored", "concept", "convert", "convolution", "convolutional", "could", "create", "data", "dataframe", "dataset", "dimensionality", "directly", "effect", "end", "every", "explore", "feed", "feedback", "file", "filter", "final", "find", "following", "function", "green", "hope", "http", "idea", "image", "improve", "input", "instance", "intensity", "intuition", "io", "kernel", "label", "layer", "learn", "least", "let", "linear", "list", "load", "look", "looking", "lower", "map", "max", "mnist", "model", "mucosa", "my", "name", "network", "neural", "new", "next", "no", "notebook", "number", "numpy", "objective", "operation", "order", "out", "output", "overfitting", "package", "path", "people", "pixel", "png", "point", "pooling", "predict", "predictor", "probability", "problem", "processing", "rank", "read", "reduce", "reshape", "return", "robust", "row", "run", "second", "shape", "similar", "single", "size", "softmax", "source", "split", "step", "stroma", "tensor", "tensorflow", "test", "theory", "those", "through", "time", "topic", "train", "training", "try", "tutorial", "type", "unique", "up", "validation", "value", "web", "weight"], "potential_description_queries_len": 131, "potential_script_queries": ["glob", "imread", "numpy", "randint", "random", "seaborn", "tqdm"], "potential_script_queries_len": 7, "potential_entities_queries": ["cell", "data", "linear", "processing"], "potential_entities_queries_len": 4, "potential_extra_queries": [], "potential_extra_queries_len": 0, "all_components_potential_queries_len": 135}