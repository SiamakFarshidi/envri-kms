{"name": "pytorch resnext 101 32x8d benchmark ", "full_name": " h1 Introduction h1 Sources h1 Parameters h1 Setup h1 CSV h1 DataLoaders h1 Model h1 Training h1 Inference h1 Submission h1 Clean Up ", "stargazers_count": 0, "forks_count": 0, "description": "com NVIDIA apex CSV DataLoaders Model Training Inference Submission Clean UpHave to clean up since Kaggle limits the number of files that can be output from a kernel Input Parameters Installing useful libraries Libraries Functions CSVs Split train out into row per image and save a sample Some files didn t contain legitimate images so we need to remove them Also prepare the test data Data loaders Plot train example Plot test example Model Train Inference Submission. com facebookresearch WSL Images for model information. SourcesWindowing functions for pre processed data taken from the following https www. com taindow pytorch efficientnet b0 except here we make use of ResNeXt and weakly supervised pre training as opposed to EfficientNet. IntroductionThis is a simple fork of my previous kernel https www. com omission eda view dicom images with correct windowing Parameters SetupNeed to grab a couple of extra libraries Nvidia Apex for mixed precision training https github. Note due to the number of parameters a single sweep of the data will take approx. ", "id": "taindow/pytorch-resnext-101-32x8d-benchmark", "size": "836", "language": "python", "html_url": "https://www.kaggle.com/code/taindow/pytorch-resnext-101-32x8d-benchmark", "git_url": "https://www.kaggle.com/code/taindow/pytorch-resnext-101-32x8d-benchmark", "script": "torch.optim albumentations torch.utils.data Compose __init__ albumentations.pytorch Resize tqdm_notebook pyplot as plt amp apex ToTensor pyplot numpy tqdm_notebook as tqdm __getitem__ ShiftScaleRotate pandas Dataset __len__ tqdm IntracranialDataset(Dataset) matplotlib ", "entities": "(('IntroductionThis', 'kernel https simple previous www'), 'be') (('Note', 'data'), 'take') (('use', 'EfficientNet'), 'efficientnet') (('Data Plot', 'example'), 'clean') ", "extra": "['test']", "label": "Perfect_files", "potential_description_queries": ["apex", "clean", "contain", "correct", "data", "dicom", "eda", "efficientnet", "following", "grab", "image", "kernel", "mixed", "model", "my", "need", "number", "out", "output", "per", "pre", "precision", "prepare", "pytorch", "remove", "row", "sample", "save", "single", "supervised", "test", "train", "training", "up", "view"], "potential_description_queries_len": 35, "potential_script_queries": ["amp", "matplotlib", "numpy", "plt", "pyplot", "torch", "tqdm"], "potential_script_queries_len": 7, "potential_entities_queries": [], "potential_entities_queries_len": 0, "potential_extra_queries": [], "potential_extra_queries_len": 0, "all_components_potential_queries_len": 41}