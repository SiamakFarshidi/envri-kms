{"name": "efficientdet meets pytorch lightning ", "full_name": " h1 Table of Content h1 Introduction h1 Modern Computer Vision h2 Different Detection Tasks h2 Object Detection 101 h2 Object Detection Models Zoology h1 EfficientDet Explained h2 EfficientNet as a Backbone h2 BiFPN as a Multi Scale Fusion Layer h2 Two Heads h2 Compound Scaling h1 Application to Global Wheat Challenge h2 Understanding the Task h2 Evaluation Metric h2 The Model h2 The Dataset h2 Pytorch Lightning Complete Pipeline h1 Evaluation h2 Inference h1 Advanced Concepts h2 Mosaic Augmentation h2 TTA h2 WBF Blending h1 To Wrap Up h2 To Go Beyond ", "stargazers_count": 0, "forks_count": 0, "description": "Another question is how to detect multiple objects having different sizes for example a small cat and a car on the same image This is solved by taking features maps having different sizes. png attachment object_detection_explained. Then average over the thresholds given the AP and over images given mAP mean average prediction. Something else happened code discovery sharing and reproducibility got better. com self attention in computer vision 2782727021f6 for some details. Finally to learn more about these two families of models check this blog post https cv tricks. Need yxyx format for EfficientDet. save call at the end. com darknet yolo and v3 paper https pjreddie. Predict on test images Understanding the TaskAs you have guessed it the task of this competition is to predict the bounding boxes of wheat heads in different images. Again more on this in the next section. com method yolov4 page. These will be fixed in the private part as far as I know. If you are curious you can check an example of how to use it here https www. com ultralytics yolov5. com jsbroks coco annotator. com zylo117 Yet Another EfficientDet Pytorch A very thorough series of object detection medium posts https medium. as_tensor iou xa0self. Here is the top solution https www. efficientdet_cover attachment object_detection_101_new. That s it our WheatModel is ready now. Notice there are some data wrangling to get the correct format while using the EfficientDet implementation. What does that mean In short more 0s everywhere in the network Max pooling instead of average pooling ReLU layer Dropout Thus less parameters. com c global wheat detection discussion 160408. Another route I have tried is a similar one used here https colab. png DETR DETR is short for detection with transformer Paper accepted in 2020 Uses a transformer layer after the feature extraction one Developed by FAIR To learn more check the paperwithcodes page https paperswithcode. org docs stable torchvision index. The metric here is close to the current competition but instead of AP it uses F2 https www. com 2016 11 07 intersection over union iou for object detection scores then for some threshold t the wheat head is a TP if the IoU is above it finally we compute the precision https en. Mosaic AugmentationThis technique consists in stitching together different images to form a bigger one. First let s start with the model s architecture As you can see there are 3 main building blocks 1. save path to output img_id. Notice that the efficientdet library needs timm PyTorch Image Models library. Here is the distribution python arvalis_1 1055 arvalis_2 204 arvalis_3 559 ethz_1 747 inrae_1 176 rres_1 432 usask_1 200 3 of these sources are probably similar arvalis_1 arvalis_2 and arvalis_3. com 2019 05 efficientnet improving accuracy and. Before that one small detour to process the labels DataFrame and add some useful metadata such as the bounding box area andthe lower corner s coordiantes. I also like this definition from paperswithcode https paperswithcode. class_net head return DetBenchTrain net config Notice that for the most recent version of the effdet library you can use the create_model and or the create_mode_from_config functions for a cleaner code. com google automl tree master efficientdet backbone from the efficientdet repo. As the website claims it is 100 times faster than Mask RCNN. Re order the predictions from highest score to lowest4. com jonathan_hui understanding feature pyramid networks for object detection fpn 45b227b9106c as well. Thanks to Alex Shonenkov https www. pdf the blog post https ai. com review fpn feature pyramid network object detection 262fc7482610 and this one https medium. com task object detection latest Object detection is the task of detecting instances of objects of a certain class within an image. csv x y w h for bbox in train_labels_df bbox bbox eval bbox x. com shonenkov training efficientdet by the great Alex Shonenkov https www. 3 which was 10 better than pervious year s performance the lower the better. However translating this task into an algorithm is on another level of hard. getting performance better than human level for the first time see the graph below. The images have a varying number of wheat heads colors orientations and so on making the task more challenging. As usual we will start with the model building block then add the processing steps. To create the model the code snippet is quite simple D5 EfficientDet here but you can use the one that suits your needs pythonfrom effdet import get_efficientdet_config EfficientDet DetBenchTrainfrom effdet. The state of the art methods can be categorized into two main types one stage methods and two stage methods. com c data science bowl 2018 discussion 54741. Let s check that this implementation works by sampling from the WheatDataset. Some backbone models that work well for object detection YOLOv5 https github. Models are typically evaluated according to a Mean Average Precision metric. Fortunately we don t need to really understand what goes inside our brains. for instance segmentation the instances of each label are predicted much more numnbers i. V4 paper accepted in 2020 EfficientDet Originally developed by the google brain team using architecture search. Here is the 4th place solution. Blend the predictions more on this in the next section For the augmentation step horizantal and vertical flips are quite common strategies for TTA. pdf Train using one loss for some epochs then use another one Average over the last n snapshots for more generalization Evaluation MetricThe evaluation metric for object detection is quite tricky when compared to object classification. That s it for the model s architecture. For instance papers with code https paperswithcode. As simple as that We close this section with the last trick compound scaling. append bbox 2 h. update res xa0self. Two HeadsThe third ingredient to the mix is the two heads network one for predicting the coordinates of the bounding box one for predicting the class the probability of each class to be more precise Each of the two networks take as input all the ouptuts of the previous BiFPN layer. org and COCO https cocodataset. com nguyenbadung for the write up custom_mosaic_augmentation. Looks fine awesome Time to move to the training pipeline. For the WBF case the main objective is to compute a new confidence score C from existing confidence scores and then use it to compute the blended bounding box coordinates and confidence as a weighted mean or other functions. org wiki Object_detection page Region Proposals R CNN Fast R CNN Faster R CNN cascade R CNN and so on Single Shot MultiBox Detector SSD You Only Look Once YOLO Single Shot Refinement Neural Network for Object Detection RefineDet Retina Net Deformable convolutional networksWe can also add EfficientDet. num_classes 1 config. Thus I needed to copy a lot of code as was done in artgor s notebook. png attachment object_detection_bbox. xa0Let s add the train and validation data loaders. Notice that this model is a generalization of Faster RCNN https arxiv. com rafaelpadilla Object Detection Metrics master paper_survey_on_performance_metrics_for_object_detection_algorithms. com ultralytics yolov5 Detectron2 https github. xa0We need to set a folder to get images xa0This is the transforms for the training phase The box contains the upper left corner x y coordinates then width and height. The interesting thing is that some parts of it were designed using automatic architecture search i. com nvnnghia awesome augmentation Another EfficientDet Pytorch implementation https github. html on how to fine tune it. com rwightman efficientdet pytorch library again using pip pip install effdet. object_detection_bbox. accumulate xa0self. 8 masks per image The image with the most masks contains 116. com c tgs salt identification challenge discussion 69291 solution the code repo https github. Notice that FPN stands for Feature Pyramid Networks. Next let s see how we can create a WheatDataset if you aren t familiar with Pytorch s Dataset concept check it here https pytorch. networks got too many parameters2. Grab something to drink and enjoy Introduction intro Modern Computer Vision modern cv Different Detection Tasks different tasks Object Detection 101 od 101 Object Detection Models Zoology od zoology EfficientDet Explained efficientdet EfficientNet as a Backbone effnet backbone BiFPN as a Multi Scale Fusion bifpn Two Heads heads Compound Scalings scalings Application Global Wheat Detection application Understanding the Task understanding Evaluation Metric evaluation metric Data processing processing The Model model The Dataset dataset Pytorch Complete Training Pipeline pipeline Evaluation evaluation Inference inference Advanced Concepts advanced Mosaic Augmentation augmentation TTA tta WBF wbf To Wrap up wrap up To Go Beyond going beyond One last thing before I start I have benefited immensely from the following two notebooks A Pytorch Lightning end to end training pipeline https www. The train images come from 7 different sources. com questions 52015 what is the difference between semantic segmentation object detection and instaAll three tasks share the following thing given an object the aim is to locate some pixels that identify it for object detection 4 numbers are predicted either two corners or center and width and height check the figure below for more details and a label s probability. png The two most popular ways to annotate a bounding box. Let s go EfficientNet as a BackboneThis is the first part of the archtiecture. xa0Apply some augmentation on the fly. com ZFTurbo Weighted Boxes Fusion the paper https arxiv. com shonenkov wbf approach for ensemble again from Alex Shonenkov https www. Indeed that s one of the big differences between the two how different proposals are merged. even less parameters. Here is how it is computed 1. png TTATTA short for test time augmentation is a popular technique for getting better performance for computer vision tasks and you will often encounter it when doing Kaggle computer vision competitions. 2 or 3 additional images per original test one is more than enough. pdf and the original implementation https github. These two challenges are solved efficiently using the BiFPN layer. intermediate learned representations. EfficientDet ExplainedWhat is EfficientDet and how does it work In short it is a recent first submitted at the end of 2019 accepted in CVPR in 2020 very efficient surprise surprise object detection model. Introduction Computer vision went through a fast cycle of innovations and improvements starting in 2012 with the AlexNet https en. Severstal Steel Defect Detection https www. So the next question is how to design a good neural network for object detection Let s have a look at the most common techniques to have a feel for what works. Predict the bounding box for each wheat head and give a confidence score2. open img_path draw ImageDraw. There are some data quality issues masks too big https www. com paper efficientdet scalable and efficient object. Here is a link to the first place https www. Also since it is in this mode the Trainer doesn t automatically save the weights at the end correct me if I am wrong of course so weneed to add a torch. as_tensor metric tensorboard_logs main_score metric return val_loss metric log tensorboard_logs progress_bar tensorboard_logs xa0Had to comment these since the evaluation doesn t work yet. The code to get this number python from pathlib import Path train_paths Path path to train len list train_paths. com c severstal steel defect detection discussion 114254 solution. Predict using the trained model you will have the prediction for the original image plus the augmented ones. com content_cvpr_2017 papers Lin_Feature_Pyramid_Networks_CVPR_2017_paper. There is finally omegaconf and pycocotools same using pip. com nainaakash012 efficientdet scalable and efficient object detection ea05ccd28427 A paper comparing human level performance vs some deep learning algorithms on vision tasks https arxiv. Indeed given the latest ImageNet http www. Now we can compute the recall and precision for the ranked bounding boxes5. png attachment tta_resized. Check this blog post https towardsdatascience. There are 3 channels R G B. 12872 and pytorch implementation https github. Notice that YOLO stands for You Only Look Once. Pytorch Lightning Complete PipelineAlright time to build a model. Instead let s explore some SOTA state of the art models and see what they have in common SSD paper https arxiv. com github pytorch vision blob temp tutorial tutorials torchvision_finetuning_instance_segmentation. org wiki Precision_and_recall for this threshold. Object Detection Models ZoologyAs stated above it seems that deep learning models particularly convolutional ones are very good at image processing tasks and in particular object detection. html Learn more about efficientdet here https blog. Two main problems appeared then 1. InferenceMostly inspired i. com c global wheat detection discussion 159578 or missing masks https www. To further understand the task let s explore the wheat images and the associated bounding boxes Train images There is a toal of 3422 unique train images. for each pixel predict to which class it belongs its id. Download TorchVision repo to use some files from references detection. As stated in the introduction we will be using the EfficientDet model introduced above. Let s get started To make things easier DRY principle I will be using the following EfficientDet model https github. pdf Train a classifier first to find images without wheat heads Randomly cropping the train images Using augmentation. The average bounding box area is 6843 the smallest is only 2 and the largest is 529788 Here attached the two images with the largest upper right including many smaller and the smallest it is the in the lower right corner at the edge bounding boxes The bbox area histogram with the top 1000 values truncated and the bottom 100 as well https www. Here is a rough sketch of the plan 1. paper https arxiv. DETR model detection using the transformer architecture. Next we install the efficientdet https github. com c severstal steel defect detection. To Wrap UpThat s it for today. Some interesting ideas Multi rounds pseudo labelling graph below from here https arxiv. If you have found a better method please share it with me in the comments section. The original accompanying code could be found here https github. org tutorials intermediate torchvision_tutorial. The DatasetBefore I start notice that some of the code mostly is inspired from this notebook https www. As you might have seen the results you get from training the model presented above are quite good but not enough to be competitive. 01 Attach the head net. png generation 1594242665230885 amp alt media For more details about the dataset creation check this paper https arxiv. xa0As an exercise try doing it for the other folds and chaning the Trainer. html library particularly for computer vision tasks Pytorch Lightning https github. Check his work he has many other great CV notebooks. More insights about the test dataset could be found in this https www. Finally width W depth D and input resolution R in the different sections are scaled usign one single parammeter phi in this fashion 1. 128 for the input image resolution. Check the notebook if you want to learn about these final steps. BiFPN as its name indicates builds upon the ideas of the FPN layer and adds one simple idea instead of simply aggregating the different representations in a top down fashion it takes the PANet approach i. All the train images have the same size 1024 x 1024. com Erlemar wheat as well if you want better organised code. One extra challenge is to do so for multiple scales learn more about this here https d2l. load path to weights net. It is the image with id 35b935b6c. The test dataset has been collected from different sources than the train. I am sure it works eventually but I won t do this here since the notebook is long enough already and I am being a little lazy. Thus there are two levels of averaging over the thresholds and then over the images. In fact it has been solved since at least 2015 with the introduction of the ResNet https en. Source https semiengineering. Also in a better world I would have made this part using Pytorch Lightning but I am little overwhelmed with this very lengthy notebook so it is enough for now. The two remaining tasks are best described in the image below Source https datascience. io convolutional networks layers followed by max pooling then a fully connected layer. xa0Test case xa0Could be one or many rows. CenterNet paper https arxiv. In more details it is a family of models designed by researchers from Google brain. com ybabakhin kaggle_salt_bes_phalanx and a paper https arxiv. Here is a short description of its pseudo code Check this post https towardsdatascience. glob There is a total of 3373 unique images with masks Thus some images don t have any masks There is a toal of 147793 masks Thus on average there are 43. In the EfficientDet model the EffincientNet backbone is scaled reusing the same values in the original network. top down and bottom up connections and optimizes cross scale connections. More on this in the next section. com playlist list PL5 TkQAfAZFbzxjBHtzdVCWE0Zbhomg7r More specifically this video is great for object detection https www. Here is a look at the overall archtitecture As you can see the interesting thing is that many elements of the model have been optimized using neural automatic search width depth number of channels and resolution. Two stage methods prioritize detection accuracy and example models include Faster R CNN Mask R CNN and Cascade R CNN. If youy don t know who Andrew artgor is now is the time to discover lots of cool notebooks. One stage methods prioritize inference speed and example models include YOLO SSD and RetinaNet. com method mask r cnn paperswithcode page. Indeed this was according to many one of the moments that launched again the field of deep learning from the last AI winter https en. Indeed this is a trick often used to improve the performance of networks. Process the data so that it can be used with an efficientdet model3. com c data science bowl 2018 overview evaluation. com yassinealouini roberta meets tpus if you haven t yet already there will be a mix of theory practice and an application to the global wheat competition dataset https www. This is what made the model achive state of the art performance on ImageNet http www. Finally if you want even more blending techniques you can explore these techniques Soft NMS similar to NMS non maximum suppression but with a soft selection criterion Non maximum weighted NMW this is the same as the NMS but computing a weighted a bounding box insteadof computing only one. png attachment custom_mosaic_augmentation. com yhenon pytorch retinanet. summarize coco main metric metric self. com new vision technologies for real world applications To read more about what happened over the last years in the field of deep learning check the following blog post https adeshpande3. com questions 238684 what are the difference between dice jaccard and overlap coefficients A complete explanation of EfficientDet https towardsdatascience. 01497 that adds instance segmentation on top of object detection. Notice that since this step happens during inference time and since code competitions have time limits you can t use a lot of augmentation. One last trick is to use a weighted feature fusion instead of the unweighted FPN approach the weights are learned as well and normalize these weights using a fast normalization procedure i. com c global wheat detection discussion 172418 from the winning competition solution. pdf Some augmentations notebook https www. Data Science Bowl 2018 https www. Thus some augmentations aren t allowed for instance 90 degrees rotations. Yet another semantic segmentation competition. The first step was making CNNs work that s roughly what happened around 2012 and has been improved ever since as discussed in the previous section. We won t explore why this is the case so feel free to explore this subject on your own. This isn t exactly an object detection competition but rather an semantic segmentation one. Similarly to what I have done in the NLP guide check it here https www. The following example is extracted from the same post thanks again to DungNB https www. We will see one additional trick applied in the next and last section. So we need to change these to x1 y1 and x2 y2 where they are the upper left and lower right corners for bbox in bboxes x y w h eval bbox transformed_bbox x y x w y h draw. png Legend on top human perspective. Notice that it should be divisible by 128 since we take features from levels 3 to 7 128 2 7. com media files papers YOLOv3. convergence wasn t fast or happening at allTo solve these issues few interesting ideas were introduced. png attachment wbf_schema. org wiki AI_winter for the first time it was possible to train neural networks unsing large dataset s and lots of compute well according to 2012 s standards anyway p. stats 0 metric torch. So we need to change these to x1 y1 and x2 y2 where they are the upper left and lower right corners xa0No longer works. ai breaking down efficientdet If you want to learn more about computer vision using deep learning A great playlist if you like videos https www. The most common way to do it is to scale the backbone s width and depth. From there we can compute the average precision this is the sum over 11 break points of the precision vs recall curve. pdf or this great notebook https www. _calculate_iou targets res IMG_SIZE iou torch. Let s move to the next step the prediction networks. md models page models section where you can find this table and click on the weights you want COCO AP average precision vs FLOPS number of operations per second graph SOTA according to paperwithcode https paperswithcode. com non maximum suppression nms 93ce178e177c for more details the figure above is from it. I will try to make this section work later on. image_size 256 Add the head with the updated parameters head HeadNet config num_outputs config. For that we also need to run pip install timm. The most popular benchmark is the MSCOCO dataset. Understand the dataset the task and the evaluation metric2. a classification backbone block2. Here we go Modern Computer Vision Before focusing on object detection let s move one step back and explore the modern computer vision landscape. com method bifpn this blog post https towardsdatascience. com c tgs salt identification challenge overview. png img Extracting bounding boxes coordinates width height and area python import pandas as pd train_labels_df pd. It consists in placing bounding boxes around detected objects. This is an object detection competition with exactly the same metric. RetinaNET paper https arxiv. detections 2 detections 0 detections 3 detections 1 iou self. com shonenkov training efficientdet notebook to get started training an EfficientDet model on this competition dataset. For that we will start by defining the model part then move to the data processing evaluation and prediction. Compound ScalingOne last ingredient to the mix is how the network is scaled. loc lambda df df image_id img_id bbox. com google automl tree master efficientdet. Then we have two fully connected layers before getting the final values. png attachment coco_object_detection_score. Time to move to the application Application to Global Wheat ChallengeNow that the theory makes hopefully more sense let s move to the application side of things. The interesting additional thing is the scaling of the BiFPN and prediction networks. I won t show this part since it is tedious and not very elegant. It contains Faster R CNN RetinaNet and many more. com pestipeti pytorch starter fasterrcnn train so go check it out and thank Peter https www. automated neural architecture search transfer learning application of attention ideas from the recent NLP progress. This backbone was found using NAS neural architecture search through the use of the MnasNet framework. com xingyizhou CenterNet. To learn more about this EfficientNet backbone read the original paper here https arxiv. Here is the table for the different EfficientDet variants the bigger phi is the bigger the model To finish this section notice that the 1. To get the backbon weights go to the README https github. I don t have any data to back this claim but that s what I have observed through experience. If you want a very complete blog post check this one https medium. xa0Had to comment these since the evaluation doesn t work yet. append bbox 3 processed_train_labels_df train_labels_df. com google automl blob master efficientdet tutorial. xywh to xyxy not necessary. To dig deeper here are some more details SSD SSD is short for single shot detector As it is clear from its name it belonges to the one step family Paper accepted around 2016 end of FPN FPN is short for feature pyarmic network This isn t an object detection network per say but rather a part It is used in many architecture as the features extraction part Paper accepted in 2017 Mask R CNN From the region proposals series of models this is the latest one It is an extension of faster r cnn for instance segmentation It seems that it gives better results even for object detection To learn more read this https medium. So what does this network contain The AlexNet network is quite simple different CNN https cs231n. there was a meta model that was trained to find the best hyper parameters of the trained model automatically. com shonenkov so thanks So how does it work and how is it different Let s have a look at the following schema from the WBF paper wbf_schema. YOLO website https pjreddie. This will be a very long notebook so use the following table of content if necessary. Bottom computer perspective. Congratulations on gaining a new super power Stay tuned for the next notebook and in the meantime happy kaggling To Go BeyondGoing further check these resources to expand your understanding Pytorch s torchvision object detection tutorialn very https pytorch. tolist The box contains the upper left corner x y coordinates then width and height. How does it work The basic idea is quite simple 1. Check the following graph to learn more about other FPN variations including PANet and BiFPN Finally to learn more about FPN and BiFPN check the papeswithcode page https paperswithcode. To get started you can check the Github implementation here https github. In the above figure you can see a patch of wheat heads. Here is a sample code from effdet import create_modelnet create_model tf_efficientdet_d5 bench_task train num_classes 1 bench_labeler True In what follows we will use this code snippet to create the model. Here we will go over another technique called weighted boxes fusion or WBF in short. pdf and pytorch implementation. Compute the intersection over union of each bounding box 3. Evaluation Believe it or not this is a part where I struggled the most. png attachment mosaic_augmentation_resized. com PyTorchLightning pytorch lightning to implement the model. It contains a lot of statistics and data acquisition methodolgy descritption so make sure to check it. com artgor object detection with pytorch lightning by the great Andrew Lukyanenko https www. append bbox 1 w. com shonenkov inference efficientdet. org wiki Information_bottleneck_method. png WBF BlendingIf you are accustomed to object detection tasks and challenges you may have heard about NMS short for non maximum suppresion. More on this in the following sections. In fact instead of using only one BiFPN and one prediction networks these components are repeated. input efficientdet efficientdet_d5 ef44aea8. com jonathan_hui object detection series 24d03a12f904 xa0Using a small image size so it trains faster but do try bigger images xa0for better performance. Again thanks Alex Shonenkov. Most likely the breakdown is by the competition sponsors organisers Bounding boxes where added using this tool https github. Finally some of the recent research trends more efficient architectures i. Use BCE binary cross entropy Jaccard as a loss given some weight to each or Lovasz https arxiv. Notice that FPN doesn t have a category since it is used in both That s enough general architecture for now In the remaining parts we will be focusing on the EfficienDet family of models more specifically on the following Pytorch implementation https github. com c global wheat detection discussion 149770 discussion. BiFPN as a Multi Scale Fusion LayerOnce we have a classification network one important question to ask is how to move from the classification model to an object detection one This is cleverly solved by using features maps i. Left for the reader how to move from one to the other Now that we are more familiar with the general detection tasks we can move to object detection. There is even a v5 now https github. To experiment with the model and learn more check this colab notebook https github. 35 value in the first equation has been optimized using grid search i. Here is graph that shows that EfficientDet D7x largest model achieves it on the COCO object detection benchmark coco_object_detection_score. a class and bounding box networks blockIn more details we have an EfficientNet Net and not Det backbone. Here is a link the first place https www. The evaluation metric is exactly the same. Let s dive in more details. You can find resized datasets here https www. I won t go over the formatting step to make a proper submission file. org wiki AlexNet network revolution. As stated by Karpathy in one talk haven t found the link yet if you know it please share in the comments more zeros better performance. One for predicting the most likely label and one for predicting the detected bounding box if any. This isn t because of the tool but it was due to the code that I was using. Draw img bboxes train_labels_df. Mask RCNN paper https arxiv. org home benchmarks deep learning models are beating human level performance that was the case on the ImageNet dataset since 2015 and that s the case for the COCO dataset since. The code to get this python from pathlib import Path test_paths Path path to test len list test_paths. Another instance segmentation competition. To finish this section let s make some predictions. Two heads finally everything is connected to two output networks. A Pytorch no Lightning this time end to end training pipeline https www. xa0Convert to Numpy array there is only one class so always 1. In most modern object detection architectures both problems are solved at once using an FPN layer. suppose all instances are not crowd. To finish this section here is an illustration again using cats p tta_resized. xa0coco convert_to_coco_api valid_dataset xa0self. Everything is set time to create the EfficientDet model using the code snippet presented above the new create_model code snippet instead of the get_train_efficientdet function since we are using the latest effdet version. ai and its CV module for an intrigated experience with latest CV best practices. Object Detection 101What is object detection For humans this is a straightforward question given an image and a label draw a bounding box around the detected objects. com object detection faster r cnn yolo ssd and this slides deck https fr. different values are tested and the one giving the best score is selected over 1. Let s explore further this rich ecosystem of models. com c global wheat detection. Fast forward to 2020 a lot of things happened and the performances kept improving year after year ImageNet is now considered a solved kind of in most cases at least dataset. Here is one example of a BiFPN computation from the paper All these tricks make the BiFPN layer both efficient and accurate. As a first step we install the Pytorch Lightning library using pip pip install pytorch_lightning. Previous similar competitions TGS Salt Identification https www. Short code snippets Load an image and overlay the corresponding mask s python from pathlib import Path img_id ID_OF_IMAGE img_path Path f path to train img_id. Since we have only one class this is also the mAP. io The Last 5 Years in Deep Learning Most of these systems share similar architectures and modern tips to make them work best. Let s now move to the subfield of object detection. There are few images in the test dataset that aren t 1024 x 1024. Notice that SSD stands for Single Shot MultiBox Detector. ai library for the three phases train validation and test. net pfi a brief history of object detection tommi kerola telling a brief history of object detection. Different Detection TasksWe will mainly focus on three similar detection tasks from simpler to more complex object detection semantic segmentation instance segmentationObject detection is the easiest one. com What is the F2 score in machine learning score. For that we will create a Trainer and set it to fast_dev_run True for a quicker demo. This is an important aspect of the competition for sure. This isn t the most optimal way to do it but I will leave it to you xa0to find a better one. Among the recent code libraries and tools Pytorch https pytorch. W_ pred W_ bifpn and D_ bifpn 3 phi for the prediction part 3. validation_step validation_step xa0WheatModel. com facebookresearch detr. com facebookresearch detectron2 this isn t a single model but rather a collection of object detection models. With these shoutouts out of the way let s start. For that we will be using the belvoed Pytorch Lightning. The organizers are working on a fix for the private test dataset as far as I know. Notice that there are some edge cases where the precision will be 0 no mask is predicted and there is at least one a mask is predicted but there aren t any. read_csv path to train labels. There is a Github repo https github. More on this in the next section BiFPN as a multi scale fusion layer once we have a classification network we need to efficiently extract features for the detection step. pdf detailing object detection metrics and how they are computed. Hurray we have predictions Advanced ConceptsBefore finishing this lengthy notebook I wanted to talk about few advanced concepts to get better resultsparticularly for object detection but they do work for many computer vision tasks. org wiki Residual_neural_network model i. load_state_dict checkpoint Change the number of classes to 1 only predicting wheat config. It appears that deep learning models are very good at that. RetinaNet Uses focal loss Uses FPN as its features extraction layer CenterNet Paper accepted in 2019 Estimates the center of the bounding box in addition to the corners Belongs to the one stage family of models Claims to have the best performance for the one stage family and not very far from the best in two stages as well Has two networks one for finding the center and one for finding the corners As usual to learn more check the paperswithcode page https paperswithcode. num_classes norm_kwargs dict eps 0. Well this list isn t very informative is it Based on my own experience basically reading a lot of blog posts and papers there are two major families Two steps networks One step networksR CNN and its cousins fall into the first family of models. Defined some transforms using the albumentations https albumentations. R_ input 512 phi. com google automl tree master efficientdet A great notebook https www. In contrast to the R CNN family SSD YOLO RetinaNet CeneterNet and EfficientDet fall into the faster one step family. com method centernet YOLO Uses a different format for the outputted bounding box the center width and height instead of top left and bottom right corners. append bbox 0 y. target masks None xa0These are needed as well by the efficientdet model. rectangle transformed_bbox outline black width 3 img. pdf and pytorch implementation https github. Also the code ecosystem got much better. Indeed where do you even start object_detection_explained. If you made it this far congratulations By now you should have acquired basic knowledge of object detection and computer vision more generally you can now go and build models. com method detr That was a lot of new concepts to groak so as a reward here is an approximate timeline in red the one step models and green the two steps ones. EfficientDet paper https arxiv. pdf and pytorch tutorial https pytorch. In other words it is localization plus classification of objects. org and the torchvision https pytorch. html and the implementation here https github. com rwightman efficientdet pytorch. com albumentations team albumentations is a great library for that. validation_epoch_end validation_epoch_end Create a model for one fold. copy processed_train_labels_df x x processed_train_labels_df y y processed_train_labels_df w w processed_train_labels_df h h processed_train_labels_df area processed_train_labels_df w processed_train_labels_df h processed_train_labels_df x2 processed_train_labels_df x processed_train_labels_df w processed_train_labels_df y2 processed_train_labels_df y processed_train_labels_df h Metric There are many components to this metric first we compute Jaccard IoU https www. for each pixel predict to which class it belongs. a multi scale features fusion block3. Here are some advanced concepts to get you better results Mosaic augmentation TTA WBF blendingLet s start with mosaic augmentation. FPN paper https openaccess. Then the idea was to make the networks deeper to get better performances. If this explanation isn t clear enough check the following paper https raw. coco_evaluator CocoEvaluator coco iou_types xa0TODO What should be changed in order to make it work separate losses variable number of instances so the entire structure can be forced to tensor separate losses variable number of instances so the entire structure can be forced to tensor xa0Back to xyxy format. That s the competition s banner and that s what we are predicting finding the bounding boxes of wheat heads. test dataset must have some values so that transforms work. It uses the EfficientNet architecture and includes pre trained weights. jpg img Image. Indeed winning solutions used EfficientDet augmented with few more tricks. ipynb the original paper https arxiv. com PyTorchLightning pytorch lightning for easier training Fastai https www. Airbus Ship Detection https www. com jonathan_hui yolov4 c9901eaa8e61 and the paperswithcode https paperswithcode. com googles efficientdet an overview 8d010fa15860 Another EfficientDet Medium post https medium. com jonathan_hui what do we learn from region based object detectors faster r cnn r fcn fpn 7e354377a7c9 blog post and this https paperswithcode. efficientdet import HeadNetdef get_train_efficientdet Get the model s config config get_efficientdet_config tf_efficientdet_d5 Create the model net EfficientDet config pretrained_backbone False Load pretrained EfficientDet weights checkpoint torch. copied from here https www. In the following sections we will explore each part in more details. png Table of ContentWelcome to this beginner friendly guide to object detection using EfficientDet. com is probably the best place to look for a code implementation. com rwightman efficientdet pytorch blob master README. ai chapter_computer vision multiscale object detection. From Wikipedia s object detection https en. This technique is used to merge many boxes called proposals from one model and can be used to merge the results of many models as well. In what follows I will detail some of what makes the modern computer vision ecosystem. com watch v TB fdISzpHQ list PL5 TkQAfAZFbzxjBHtzdVCWE0Zbhomg7r index 16 t 0s A good explanation of the differences between evaluation metrics https stats. png If you may have noticed the WBF algorithm made a bounding box that isn t any of the proposed ones whereas NMS came up with one from the proposals. Indeed the evaluation part is tied to the torchvision repo and I haven t found a simple way to import it. com pestipeti for making it So what have we done above 1. com c global wheat detection discussion 163263. The ModelEnough with theory let s move to the implementation Similarly the the previous NLP notebook I will be using Pytorch Lightning https github. for semantic segmentation the countours of each label are predicted more numbers i. xa0Some processing to add some metadata to the labels DataFrame xa0Create stratified folds here using the source. Albumentations https github. pth xa0Create a model for one fold. com c airbus ship detection. glob Don t worry though there is a real test dataset that runs when you submit your inference kernel. png Here is a simple explanation using cat images mosaic_augmentation_resized. ipynb scrollTo DBIoe_tHTQgV where they have cloned the torchvision part from the Pytorch s repo then copying the necessary parts using cp instead of manually doing it. Finally for object detection since there is a bounding box to predict the augmentation step should preserve the shape of the bounding box. All these things make the modern days computer vision ecosystem. org hub nvidia_deeplearningexamples_ssd. One possible explanation is that deep neural networks are good at distilling features from noisy inputs and this can be explained by the information bottleneck theory https en. normalize by the sum instead of using softmax. Here are some graphs from the paper Test images Only 10 images have been made public. 35 phi and D_ bifpn 3 phi for the BiFPN part 2. com download storage v1 b kaggle user content o inbox 2F172860 2F6397d02cd4ada74403ae0eaa955394ce 2Fhist_truncated. The more diverse the images the better it is. Among the one stage family of models Fast predictions with great mAP Latest versions use FPN as a features extracting layer Has been through many iterations latest being v4. xa0New way that works xa0checkpoint_path. Setup the WheatDataset. Indeed it has achieved in 2012 a top 5 error of 15. Create additional test images from the provided ones using augmentation techniques. ", "id": "yassinealouini/efficientdet-meets-pytorch-lightning", "size": "49735", "language": "python", "html_url": "https://www.kaggle.com/code/yassinealouini/efficientdet-meets-pytorch-lightning", "git_url": "https://www.kaggle.com/code/yassinealouini/efficientdet-meets-pytorch-lightning", "script": "torch.utils.data albumentations __init__ effdet validation_epoch_end WheatModel(LightningModule) make_predictions SequentialSampler Path DataLoader pytorch_lightning forward ToTensorV2 training_step collate_fn numpy LightningModule __getitem__ plot_image_with_bboxes pathlib RandomSampler matplotlib.pylab create_model PIL get_valid_transforms WheatDataset(Dataset) sklearn.model_selection DetBenchTrain val_dataloader seed_everything Image EfficientDet pandas albumentations.pytorch.transforms ImageDraw Dataset __len__ HeadNet configure_optimizers DetBenchPredict get_test_transforms validation_step get_efficientdet_config StratifiedKFold train_dataloader loggers get_train_transforms effdet.efficientdet get_test_efficientdet get_train_efficientdet Trainer ", "entities": "(('s', 'prediction networks'), 'let') (('learning deep models', 'very that'), 'appear') (('it', 'objects'), 'be') (('s', 'models'), 'let') (('as far I', 'test private dataset'), 'work') (('two remaining tasks', 'Source https datascience'), 'describe') (('com method That', 'step steps here approximate red one two ones'), 'detr') (('graph', 'first time'), 'see') (('Max', 'everywhere network'), 'mean') (('Indeed this', 'networks'), 'be') (('BiFPN layer', 'paper'), 'be') (('FPN', 'Feature Pyramid Networks'), 'notice') (('so task', 'wheat heads colors orientations'), 'have') (('two challenges', 'efficiently BiFPN layer'), 'solve') (('pdf', 'augmentation'), 'Train') (('Models', 'Average Precision typically Mean metric'), 'evaluate') (('code Short snippets', 'ID_OF_IMAGE img_path Path f img_id'), 'Load') (('usual we', 'processing then steps'), 'start') (('com c tgs', 'code repo https 69291 github'), 'solution') (('train images', '7 different sources'), 'come') (('SSD', 'Single Shot MultiBox Detector'), 'notice') (('original accompanying code', 'https here github'), 'find') (('More insights', 'https www'), 'find') (('we', 'pip pip install pytorch_lightning'), 'install') (('when you', 'inference kernel'), 'worry') (('following example', 'DungNB https again www'), 'extract') (('ipynb scrollTo where they', 'instead manually it'), 'DBIoe_tHTQgV') (('more Each', 'previous BiFPN layer'), 'be') (('it', 'well standards'), 'be') (('Here we', 'technique'), 'go') (('efficientdet library', 'PyTorch Image Models timm library'), 'notice') (('get_train_efficientdet instead we', 'effdet latest version'), 'set') (('s', 'way'), 'let') (('Thus images', '147793 masks'), 'glob') (('I', 'it'), 'check') (('which', '10 pervious performance'), '3') (('blog post https', 'cv tricks'), 'learn') (('Only 10 images', 'paper Test images'), 'be') (('many elements', 'channels'), 'be') (('load_state_dict checkpoint', 'wheat only config'), 'change') (('It', 'CNN RetinaNet'), 'contain') (('this', 'insteadof only one'), 'explore') (('Thus I', 'notebook'), 'need') (('at least one mask', 't there any'), 'notice') (('why this', 'own'), 'win') (('we', 'quicker demo'), 'create') (('roughly what', 'ever previous section'), 'make') (('train images', 'same size'), 'have') (('This', 'content'), 'be') (('you', 'architecture'), 'let') (('we', 'pip install also timm'), 'need') (('s', 'things'), 'time') (('1055 204 arvalis_3 559 ethz_1 747 176 432 usask_1 200 3', 'sources'), 'be') (('model', 'Faster RCNN https arxiv'), 'notice') (('amp alt 1594242665230885 media', 'paper https arxiv'), 'check') (('we', 'EfficientDet model'), 'use') (('that', 'COCO dataset'), 'beat') (('Mosaic augmentation TTA WBF better blendingLet', 'mosaic augmentation'), 'be') (('it', 'F2 https www'), 'be') (('I', 'so torch'), 'save') (('as far I', 'private part'), 'fix') (('EfficientDet D7x largest model', 'detection benchmark coco_object_detection_score'), 'be') (('x2 where they', 'x1 y1'), 'work') (('x2 where they', 'y w h'), 'need') (('COCO AP average precision', 'paperwithcode https paperswithcode'), 'section') (('augmentations aren Thus t', 'degrees 90 rotations'), 'allow') (('W _', 'prediction part'), 'pre') (('com jonathan_hui understanding', 'object'), 'fpn') (('AlexNet network', 'So what'), 'contain') (('we', 'detection'), 'move') (('you', 'short non maximum suppresion'), 'BlendingIf') (('you', 'wheat competition dataset https global www'), 'meet') (('backbon weights', 'https README github'), 'get') (('you', 'wheat heads'), 'see') (('segmentationObject detection', 'object segmentation simpler more complex detection semantic instance'), 'focus') (('com googles', 'EfficientDet Medium post https medium'), 'efficientdet') (('it', 'ResNet https'), 'solve') (('meta that', 'trained model'), 'be') (('few interesting ideas', 'issues'), 'introduce') (('we', 'object region based detectors'), 'com') (('h h processed_train_labels_df area processed_train_labels_df processed_train_labels_df processed_train_labels_df processed_train_labels_df y2 processed_train_labels_df many metric first we', 'IoU https Jaccard www'), 'copy') (('specifically video', 'detection https object www'), 'PL5') (('task', 'different images'), 'guess') (('components', 'prediction one networks'), 'repeat') (('this', 'detected objects'), 'detection') (('one This', 'features maps cleverly i.'), 'bifpn') (('png', 'cat Here simple images'), 'be') (('we', '1'), 'pestipeti') (('Finally some', 'more efficient architectures'), 'i.') (('evaluation doesn', 'these'), 'xa0Had') (('com Erlemar as well you', 'better organised code'), 'wheat') (('backbone that', 'https well object detection YOLOv5 github'), 'model') (('xa0As exercise', 'Trainer'), 'try') (('html library', 'computer vision particularly tasks'), 'github') (('it', 'i d'), 'predict') (('detection accuracy', 'example Faster R'), 'prioritize') (('com review fpn feature pyramid network', 'detection'), 'object') (('finish', 'cats p here again tta_resized'), 'be') (('networks', 'better performances'), 'be') (('learning deep models', 'particular object detection'), 'state') (('html', 'https efficientdet here blog'), 'Learn') (('png img Extracting bounding boxes', 'pd train_labels_df pd'), 'coordinate') (('bigger phi', 'the bigger section'), 'be') (('xa0New that', 'xa0checkpoint_path'), 'way') (('vertical flips', 'quite common TTA'), 'blend') (('This', 'detection object exactly same metric'), 'be') (('Introduction Computer vision', 'AlexNet https'), 'go') (('Latest versions', 'many iterations'), 'among') (('you', 'original image'), 'have') (('Now we', 'boxes5'), 'compute') (('evaluation doesn', 'these'), 'return') (('you', 'model'), 'be') (('Congratulations', 'https very pytorch'), 'tune') (('CenterNet Paper', 'paperswithcode page https paperswithcode'), 'use') (('s', 'WBF paper'), 'shonenkov') (('what', 'blog post following https'), 'check') (('it', 'little very lengthy notebook'), 'make') (('s', 'bounding Train train associated 3422 unique images'), 'understand') (('EffincientNet backbone', 'original network'), 'scale') (('computer more generally you', 'now models'), 'make') (('Mosaic AugmentationThis technique', 'bigger one'), 'consist') (('state', 'two main types'), 'categorize') (('ImageNet', 'now solved kind most cases'), 'happen') (('s', 'object detection'), 'let') (('Next we', 'efficientdet https github'), 'install') (('weights', 'normalization procedure fast i.'), 'be') (('we', 'detection step'), 'BiFPN') (('bounding augmentation step', 'bounding box'), 'for') (('you', 'comments section'), 'share') (('some', 'notebook https mostly www'), 'notice') (('you', 'https here github'), 'check') (('it', 'Mask 100 times RCNN'), 'claim') (('this', 'https fr'), 'deck') (('com method centernet YOLO', 'center width'), 'use') (('width W depth Finally D', 'one single parammeter fashion'), 'scale') (('NMS', 'proposals'), 'png') (('really what', 'brains'), 'don') (('I', 'experience'), 'have') (('it', 'efficientdet'), 'process') (('YOLO Single Shot Refinement Neural Only Once Network', 'networksWe also EfficientDet'), 'page') (('s', 'first archtiecture'), 'let') (('they', 'SSD paper https common arxiv'), 'let') (('one', '1'), 'test') (('that', 'effdet'), 'be') (('that', 'AI winter last https'), 'be') (('image_size', 'config num_outputs HeadNet config'), 'Add') (('model achive state', 'www'), 'be') (('parts', 'architecture search automatic i.'), 'be') (('they', 'computer vision many tasks'), 'have') (('chapter_computer vision ai multiscale', 'detection'), 'object') (('com albumentations team albumentations', 'great that'), 'be') (('we', 'model'), 'be') (('However translating', 'hard'), 'be') (('Most likely breakdown', 'tool https where github'), 'be') (('net EfficientDet config pretrained_backbone False Load', 'EfficientDet weights checkpoint torch'), 'import') (('you', 'augmentation'), 'notice') (('countours', 'label'), 'predict') (('35 phi _', 'BiFPN part'), 'bifpn') (('you', 'Kaggle computer vision when competitions'), 'be') (('com method', 'blog post https towardsdatascience'), 'bifpn') (('Object latest detection', 'image'), 'be') (('I', 'paperswithcode https paperswithcode'), 'like') (('this', 'information bottleneck theory https'), 'be') (('how they', 'detection metrics'), 'object') (('Indeed winning', 'few more tricks'), 'augment') (('steps step networksR two major Two One CNN', 'models'), 'be') (('what', 'feel'), 'be') (('Andrew artgor', 'cool notebooks'), 'be') (('Multi', 'https below arxiv'), 'round') (('inference speed', 'example YOLO SSD'), 'prioritize') (('we', 'data processing then evaluation'), 'start') (('com facebookresearch isn t', 'object detection single rather models'), 'detectron2') (('main objective', 'weighted mean'), 'be') (('35 value', 'grid search i.'), 'optimize') (('F2 score', 'machine learning score'), 'com') (('what', 'computer vision modern ecosystem'), 'detail') (('detection', 'paperwithcodes page https paperswithcode'), 'be') (('image', '116'), 'mask') (('I', 'A Pytorch training pipeline https end www'), 'grab') (('I', 'it'), 'tie') (('test dataset', 'train'), 'collect') (('Pytorch Lightning', 'training pipeline https time www'), 'end') (('figure', 'it'), 'suppression') (('how network', 'mix'), 'ScalingOne') (('instances', 'much more numnbers'), 'predict') (('It', 'trained weights'), 'use') (('we', 'belvoed Pytorch Lightning'), 'use') (('target None', 'efficientdet as well model'), 'mask') (('one', 'enough'), 'be') (('YOLO', 'You'), 'notice') (('It', 'detected objects'), 'consist') (('technique', 'many models'), 'use') (('Indeed it', '15'), 'achieve') (('finally everything', 'output two networks'), 'connect') (('problems', 'FPN at once layer'), 'in') (('bbox area histogram', 'top 1000 values'), 'be') (('this', 'recall curve'), 'compute') (('it', 'The more images'), 'be') (('difference', 'EfficientDet https towardsdatascience'), 'com') (('blockIn more we', 'EfficientNet Net Det backbone'), 'detail') (('two corners', 'below more details'), 'com') (('explanation isn t', 'paper https enough following raw'), 'check') (('Check', 'post https towardsdatascience'), 'be') (('tolist box', 'upper left corner'), 'contain') (('I', 'submission proper file'), 'win') (('modern them', 'similar architectures'), 'io') (('it', 'xa0for better performance'), 'object') (('Here link', 'place https first www'), 'be') (('interesting additional thing', 'prediction BiFPN networks'), 'be') (('We', 'next section'), 'see') (('we', 'Pytorch implementation https more specifically following github'), 'notice') (('implementation', 'WheatDataset'), 'let') (('_ calculate_iou targets', 'iou torch'), 'res') (('you', 'https here pytorch'), 'let') (('enough already I', 'this'), 'be') (('This', 'different sizes'), 'be') (('it', 'approach PANet i.'), 'bifpn') (('One extra challenge', 'https here d2l'), 'be') (('I', 'EfficientDet model https following github'), 'let') (('we', '7'), 'notice') (('blog very complete post', 'https one medium'), 'check') (('that', 'object detection'), '01497') (('where I', 'most'), 'believe') (('how different proposals', 'two'), 's') (('You', 'resized datasets'), 'find') (('ai library', 'validation'), 'train') (('finally we', 'precision https'), 'com') (('part it', 't show'), 'win') (('it', 'more zeros better performance'), 'find') (('xa0to', 'better one'), 't') (('it', 'Google brain'), 'be') (('you', 'how it'), 'check') (('s', 'computer vision one step back modern landscape'), 'go') (('backbone', 'MnasNet framework'), 'find') (('this', 'only one class'), 'be') (('you', 'create_mode_from_config cleaner code'), 'return') (('you', 'videos https www'), 'break') (('we', 'more details'), 'explore') (('s', 'predictions'), 'let') (('com', 'code probably best implementation'), 'be') (('it', 'https medium'), 'be') (('In short it', 'surprise surprise object detection very efficient model'), 'be') (('This', 'important competition'), 'be') (('It', 'data acquisition methodolgy so it'), 'contain') (('NLP Similarly previous I', 'Pytorch Lightning https github'), 'let') (('things', 'days computer vision modern ecosystem'), 'make') (('he', 'CV many other great notebooks'), 'check') (('then use', 'quite when classification'), 'be') (('Then we', 'final values'), 'have') (('trick last compound', 'scaling'), 'simple') (('you', 'final steps'), 'check') (('entire structure', 'xyxy format'), 'iou_types') (('I', 'that'), 't') (('DataFrame', 'here source'), 'stratify') (('we', 'wheat heads'), 's') (('box', 'upper left corner'), 'need') (('most common way', 'width'), 'be') (('that', 'work'), 'have') ", "extra": "['test', 'procedure']", "label": "Perfect_files", "potential_description_queries": ["accumulate", "accuracy", "advanced", "algorithm", "amp", "annotate", "append", "application", "approach", "architecture", "area", "array", "art", "associated", "augmentation", "automl", "average", "backbone", "basic", "bbox", "benchmark", "best", "binary", "blended", "blob", "block", "blog", "bottom", "bounding", "box", "brain", "build", "call", "car", "case", "cat", "category", "center", "challenge", "check", "checkpoint", "classification", "classifier", "clear", "close", "cnn", "coco", "code", "colab", "collection", "comment", "competition", "compound", "computation", "compute", "computer", "concept", "confidence", "config", "contain", "content", "contrast", "convergence", "convolutional", "copy", "correct", "could", "course", "create", "creation", "criterion", "csv", "current", "cv", "cycle", "data", "dataset", "defect", "depth", "description", "detail", "detect", "detected", "detection", "detector", "detectron2", "detr", "df", "dice", "dict", "difference", "distribution", "download", "draw", "edge", "efficientdet", "efficientnet", "end", "ensemble", "entropy", "equation", "error", "eval", "evaluation", "even", "everything", "exercise", "expand", "experience", "experiment", "explained", "explore", "extension", "extract", "extraction", "fact", "family", "fashion", "faster", "feature", "field", "figure", "final", "find", "fix", "fixed", "focal", "folder", "following", "form", "format", "formatting", "forward", "found", "function", "general", "generalization", "generation", "glob", "google", "graph", "green", "grid", "head", "height", "histogram", "history", "http", "https arxiv", "https github", "https here www", "hub", "human", "id", "idea", "image", "img", "implement", "implementation", "import", "improve", "include", "including", "index", "inference", "input", "instance", "intersection", "io", "iou", "jaccard", "kaggle", "kept", "knowledge", "label", "largest", "layer", "learn", "learning", "least", "leave", "left", "len", "let", "level", "library", "link", "list", "little", "load", "log", "look", "lot", "lower", "main", "major", "mask", "max", "maximum", "mean", "merge", "meta", "metadata", "method", "metric", "might", "missing", "mode", "model", "module", "mosaic", "most", "move", "multiple", "my", "name", "need", "network", "neural", "new", "next", "no", "non", "normalization", "normalize", "not", "notebook", "num_classes", "number", "object", "objective", "open", "order", "out", "output", "overall", "overlap", "overlay", "overview", "page", "paper https arxiv", "part", "patch", "path", "pathlib", "pd", "pdf", "per", "performance", "pipeline", "pixel", "place", "png", "pooling", "post", "power", "practice", "pre", "precision", "pred", "predict", "prediction", "pretrained", "probability", "procedure", "processing", "python", "pytorch", "question", "read", "reader", "reading", "recall", "region", "reproducibility", "research", "resolution", "return", "review", "rich", "right", "run", "sample", "sampling", "save", "scale", "scaled", "scaling", "science", "score", "search", "second", "section", "segmentation", "selected", "selection", "sense", "separate", "set", "shape", "ship", "short", "side", "similar", "single", "size", "soft", "solution", "something", "speed", "stage", "start", "state", "step", "storage", "structure", "subject", "submission", "sum", "summarize", "suppression", "surprise", "table", "target", "task", "team", "technique", "tensor", "test", "theory", "threshold", "through", "time", "timm", "tool", "torchvision", "total", "train", "training", "transfer", "transformer", "tree", "truncated", "try", "tta", "tune", "tutorial", "understanding", "unique", "up", "update", "upper", "user", "v3", "validation", "value", "variable", "version", "vertical", "video", "vision", "website", "weight", "while", "who", "width", "work", "world", "write", "year", "yolo"], "potential_description_queries_len": 371, "potential_script_queries": ["numpy", "pytorch", "torch"], "potential_script_queries_len": 3, "potential_entities_queries": ["associated", "average", "best", "checkpoint", "computer", "dataset", "detection", "end", "following", "implementation", "learning", "left", "major", "method", "model", "non", "page", "post", "processing", "review", "segmentation", "single", "surprise", "theory", "timm", "training", "vision"], "potential_entities_queries_len": 27, "potential_extra_queries": [], "potential_extra_queries_len": 0, "all_components_potential_queries_len": 372}