{"name": "training mask r cnn to be a fashionista lb 0 07 ", "full_name": " h1 Dowload Libraries and Pretrained Weights h1 Set Config h1 Make Datasets h1 Train h1 Predict ", "stargazers_count": 0, "forks_count": 0, "description": "Importantly an image segmentation task can be accomplished with short code and good accuracy thanks to Matterport s implementation https github. First we train only the heads. Hope you guys like this kernel. Then load the submission data. com hmendonca mask rcnn and coco transfer learning lb 0 155 and borrowed some ideas from the U Net Baseline kernel https www. I am sorry that I published this kernel quite late beyond the halfway of a timeline. The crucial part is to create a dataset for this task. Welcome to the world where fashion meets computer vision This is a starter kernel that applies Mask R CNN with COCO pretrained weights to the task of iMaterialist Fashion 2019 at FGVC6 https www. The submission file is created when all predictions are ready. com matterport Mask_RCNN and a deep learning line of researches culminating in Mask R CNN https arxiv. So in the first step we can only deal with categories to reduce the complexity of the task. Let s visualize class distributions of the train and validation data. If there are any bugs please let me know. com c imaterialist fashion 2019 FGVC6 discussion 90643 523135 80 of images have no attribute. Let s visualize some random images and their masks. The public LB score of this kernel is around 0. I only adjust some of them. PredictThe final step is to use our model to predict test data. When clicking Submit to Competition button I always run into 404 erros so I have to save a submission file and upload it to the submission page for submitting. I have no dedicated GPU and no time to further tune the model so I decided to make this kernel public as a starter guide for anyone who is interested to join this delightful competition. TrainThis section creates a Mask R CNN model and specifies augmentations to be used. For demonstration purpose the classification ignores attributes only categories and the image size is set to 512 which is the same as the size of submission masks to prevent an error when the kernel is committed to prevent displaying images at the bottom of a kernel 1 for the background class a memory error occurs when IMAGES_PER_GPU is too high STEPS_PER_EPOCH should be the number of instances divided by GPU_COUNT IMAGES_PER_GPU and so should VALIDATION_STEPS however due to the time limit I set them so that this kernel can be run in 9 hours Add classes Add images This code partially supports k fold training you can specify the fold to train and the total number of folds here ideally this should be multilabel stratification Note that any hyperparameters here such as LR may still not be optimal only horizontal flip here train heads with higher lr to speedup learning Convert data to run length encoding Since the submission system does not permit overlapped masks we have to fix them The system does not allow missing ids this is an easy way to fill them. This cell defines InferenceConfig and loads the best trained model. Make DatasetsSegments that contain attributes are only 3. Let s visualize training history and choose the best epoch. Here is the main prediction steps along with some helper functions. My code is largely based on this Mask RCNN kernel https www. Dowload Libraries and Pretrained Weights Set ConfigMask R CNN has a load of hyperparameters. I just started working for this competition about a week ago and to my surprise the score fell in the range of silver medals at that time. com go1dfish u net baseline by pytorch in fgvc6 resize. com c imaterialist fashion 2019 FGVC6. Rows with the same image are grouped together because the subsequent operations perform in an image level. Afterwards we reduce LR and train again. Now the data are partitioned into train and validation sets. 46 of data and according to the host https www. Finally it s pleasing to visualize the results Sample images contain both fashion models and predictions from the Mask R CNN model. So I would like to thank the kernel authors for sharing insights and programming techniques. Then all layers are trained. Here is the custom function that resizes an image. ", "id": "pednoi/training-mask-r-cnn-to-be-a-fashionista-lb-0-07", "size": "3139", "language": "python", "html_url": "https://www.kaggle.com/code/pednoi/training-mask-r-cnn-to-be-a-fashionista-lb-0-07", "git_url": "https://www.kaggle.com/code/pednoi/training-mask-r-cnn-to-be-a-fashionista-lb-0-07", "script": "__init__ mrcnn image_reference log Path load_mask resize_image numpy mrcnn.model pathlib load_image InferenceConfig(FashionConfig) sklearn.model_selection utils KFold matplotlib.pyplot augmenters to_rle pandas tqdm get_fold visualize FashionDataset(utils.Dataset) FashionConfig(Config) imgaug StratifiedKFold mrcnn.config Config refine_masks augmenters as iaa ", "entities": "(('hmendonca mask', 'U Net Baseline kernel https www'), 'com') (('s', 'random images'), 'let') (('com c FGVC6 imaterialist fashion 2019 discussion', 'attribute'), 'have') (('PredictThe final step', 'test data'), 'be') (('augmentations', 'Mask R CNN model'), 'create') (('Now data', 'train sets'), 'partition') (('Sample images', 'Mask R CNN model'), 's') (('I', 'timeline'), 'be') (('cell', 'best trained model'), 'define') (('s', 'train data'), 'let') (('s', 'best epoch'), 'let') (('image segmentation Importantly task', 'implementation https good thanks github'), 'accomplish') (('So I', 'insights'), 'like') (('score', 'time'), 'start') (('I', 'submitting'), 'run') (('that', 'attributes'), 'make') (('LB public score', 'kernel'), 'be') (('this', 'easy them'), 'attribute') (('crucial part', 'task'), 'be') (('we', 'task'), 'deal') (('COCO', 'FGVC6 https 2019 www'), 'welcome') (('prediction Here main steps', 'helper functions'), 'be') (('code', 'Mask RCNN kernel https largely www'), 'base') (('that', 'image'), 'be') (('together subsequent operations', 'image level'), 'group') (('Dowload Libraries', 'hyperparameters'), 'have') (('who', 'delightful competition'), 'have') ", "extra": "['test']", "label": "Perfect_files", "potential_description_queries": ["accuracy", "adjust", "background", "baseline", "best", "bottom", "button", "cell", "choose", "classification", "coco", "code", "competition", "computer", "contain", "create", "custom", "data", "dataset", "demonstration", "encoding", "error", "fashion", "file", "fill", "final", "fix", "flip", "fold", "function", "grouped", "helper", "high", "history", "image", "implementation", "join", "kernel", "learning", "length", "let", "line", "load", "lr", "main", "mask", "memory", "missing", "model", "my", "no", "not", "number", "page", "part", "perform", "predict", "prediction", "pretrained", "prevent", "public", "purpose", "pytorch", "random", "range", "rcnn", "reduce", "run", "save", "score", "section", "segmentation", "set", "short", "size", "step", "submission", "surprise", "system", "task", "test", "time", "total", "train", "training", "transfer", "tune", "validation", "vision", "visualize", "week", "who", "world"], "potential_description_queries_len": 93, "potential_script_queries": ["iaa", "imgaug", "log", "mrcnn", "numpy", "pathlib", "tqdm"], "potential_script_queries_len": 7, "potential_entities_queries": ["final", "main", "segmentation"], "potential_entities_queries_len": 3, "potential_extra_queries": [], "potential_extra_queries_len": 0, "all_components_potential_queries_len": 100}