{"name": "build ml model using pycaret ", "full_name": " h1 USING PYCARET TO BUILD A QUICK PREDICTIVE MODEL h1 Intializing the Setup h1 MODEL ANALYSIS h1 OPTIMIZE THRESHOLD ", "stargazers_count": 0, "forks_count": 0, "description": "We will be making a model that can use these features to predict diagnosis of breast cancer using PyCaretDespite the provisions by PyCaret I still like to do an EDA Myself to understand the data. Thus for all the patients who actually have cancer recall tells us how many we correctly identified as having a breast cancer. Since we are using tree based models this wouldn t be a problem Will look at the distribution of the target variable now Intializing the SetupPrecision is the ratio between the True Positives and all the Positives. It takes a trained model object a classifier and the loss function simply represented by true positives true negatives false positives and false negatives. USING PYCARET TO BUILD A QUICK PREDICTIVE MODELPyCaret is an open source low code machine learning library in Python that allows you to go from preparing your data to deploying your model within minutes in your choice of notebook environment. In this case we have a dataset was obtained from the University of Wisconsin Hospitals Madison from Dr. Make predictions Despite the provisions by PyCaret I still like to do an EDA Myself to understand the data. A vertical line is then shown to represent the best value of probability threshold for that specific classifier. linear algebra data processing CSV file I O e. Deploy and compare models3. The idea is to use to resolve a problem with lesser coding effort. For our problem statement that would be the measure of patients that we correctly identify having a breast cancer out of all the patients actually having it. We can also see AUC Precision Recall etc. This function returns an interactive plot where loss function y axis is represented as a function of different probability threshold values on x axis. Looks like mean_smoothness and texture in both cases benign or malignant tumor is almost the same. We have the diagnosis against this feature. Preprocess Features2. Evaluate the model results5. Interpret the model6. We will be using it to 1. Given its implication in such a case where breast cancer goes undetected. Other features however shows a clearer distinguishment. read_csv You can write up to 20GB to the current directory kaggle working that gets preserved as output when you create a version using Save Run All You can also write temporary files to kaggle temp but they won t be saved outside of the current session. We need to understand the problem before looking for its answer. If we were running logistics regression choosing these features would have been problematic since those models are based on assumption that features are completely independent. We can see that in comparison LDA gives us the best estimate of Recall and AUC. In this case we have dataset of I will now plot density plots for diagnosed cancer and not cancer for each feature to see distinguishment. Recall in this case is extremely important as imagine having a patient who has breast cancer but is not treated. The features are of the lump found in patients its radius texture perimeter etc. The recall is the measure of our model correctly identifying True Positives. Let s look at the correlation of the features Mean_radius Mean_perimeter and mean_area are fully correlated. for ensemble models for exploration of a better model for this problem MODEL ANALYSIS OPTIMIZE THRESHOLDThere is an option where i can limit the false negatives to be zero here. ", "id": "ridaamjad/build-ml-model-using-pycaret", "size": "3245", "language": "python", "html_url": "https://www.kaggle.com/code/ridaamjad/build-ml-model-using-pycaret", "git_url": "https://www.kaggle.com/code/ridaamjad/build-ml-model-using-pycaret", "script": "seaborn numpy matplotlib.pyplot pycaret.classification pandas ", "entities": "(('We', 'answer'), 'need') (('Mean_radius Mean_perimeter', 'features'), 'correlate') (('you', 'notebook environment'), 'use') (('who', 'breast cancer'), 'be') (('we', 'breast correctly cancer'), 'tell') (('idea', 'lesser coding effort'), 'be') (('we', 'actually it'), 'be') (('recall', 'True correctly Positives'), 'be') (('mean_smoothness', 'benign tumor'), 'look') (('loss where axis', 'axis'), 'return') (('loss function', 'true negatives false positives'), 'take') (('t', 'outside current session'), 'write') (('I', 'data'), 'make') (('We', 'feature'), 'have') (('breast where cancer', 'case'), 'give') (('where i', 'false negatives'), 'be') (('Other features', 'however clearer distinguishment'), 'show') (('dataset', 'Dr.'), 'have') (('features', 'patients'), 'be') (('we', 'feature'), 'have') (('wouldn t', 'True Positives'), 'be') (('vertical line', 'specific classifier'), 'show') (('features', 'assumption'), 'be') (('LDA', 'Recall'), 'see') ", "extra": "['biopsy of the greater curvature', 'patient', 'diagnosis']", "label": "Perfect_files", "potential_description_queries": ["best", "breast", "cancer", "case", "choice", "classifier", "code", "coding", "compare", "comparison", "correlation", "create", "current", "data", "dataset", "diagnosis", "directory", "distribution", "ensemble", "feature", "file", "found", "function", "idea", "interactive", "kaggle", "learning", "library", "line", "linear", "look", "looking", "malignant", "measure", "model", "need", "not", "notebook", "object", "open", "option", "out", "output", "patient", "plot", "predict", "probability", "problem", "processing", "ratio", "recall", "regression", "running", "source", "target", "those", "threshold", "tree", "tumor", "up", "value", "variable", "version", "vertical", "who", "write"], "potential_description_queries_len": 66, "potential_script_queries": ["numpy", "seaborn"], "potential_script_queries_len": 2, "potential_entities_queries": ["current"], "potential_entities_queries_len": 1, "potential_extra_queries": ["biopsy"], "potential_extra_queries_len": 1, "all_components_potential_queries_len": 69}