{"name": "2d and 3d plotting tutorial in python ", "full_name": " h2 Introduction h2 Cheet Sheet h2 Installations h2 MATLAB like API h3 Example h2 The matplotlib object oriented API h3 Figure size aspect ratio and DPI h3 Saving figures h4 What formats are available and which ones should be used for best quality h3 Legends labels and titles h3 Formatting text LaTeX fontsize font family h3 Setting colors linewidths linetypes h4 Colors h4 Line and marker styles h3 Control over axis appearance h4 Plot range h4 Logarithmic scale h3 Placement of ticks and custom tick labels h4 Scientific notation h3 Axis number and axis label spacing h4 Axis position adjustments h3 Axis grid h3 Axis spines h3 Twin axes h3 Axes where x and y is zero h1 Advanced 2D plot styles h3 Text annotation h3 Figures with multiple subplots and insets h4 subplots h4 subplot2grid h4 gridspec h4 add axes h1 Colormap and contour figures h4 pcolor h4 imshow h4 contour h1 3D figures h4 Surface plots h4 Wire frame plot h4 Coutour plots with projections h4 Change the view angle h3 Animations h3 Backends h4 Generating SVG with the svg backend h4 The IPython notebook inline backend h4 Interactive backend this makes more sense in a python script file h2 Further reading ", "stargazers_count": 0, "forks_count": 0, "description": "Scientific notationWith large numbers on axes it is often better use scientific notation Axis number and axis label spacing Axis position adjustmentsUnfortunately when saving figures the labels are sometimes clipped and it can be necessary to adjust the positions of axes a little bit. Raw text strings are prepended with an r like r alpha or r alpha instead of alpha or alpha We can also change the global font size and font family which applies to all text elements in a figure tick labels axis labels and titles legends etc. figure_format retina For more information type config InlineBackend Interactive backend this makes more sense in a python script file Note that when we use an interactive backend we must call plt. It supports LaTeX formatting just like axis label texts and titles Figures with multiple subplots and insetsAxes can be added to a matplotlib Figure canvas manually using fig. Legends labels and titlesNow that we have covered the basics of how to create a figure canvas and add axes instances to the canvas let s look at how decorate a figure with titles axis labels and legends. In some cases PGF can also be good alternative. We can do this using the set_ylim and set_xlim methods in the axis object or axis tight for automatrically getting tightly fitted axes ranges Logarithmic scaleIt is also possible to set a logarithmic scale for one or both axes. animation Generate an animation that shows the positions of the pendulums as a function of time Note To generate the movie file we need to have either ffmpeg or avconv installed. 1 2 3 4. org The project web page for matplotlib. We need to be able to control where the ticks and labels are placed modify the font size and possibly the labels used on the axes. with the savefig function and interactive backends such as Qt4Agg GTK MaxOSX that can display a GUI window for interactively exploring figures. This functionality is in fact only one application of a more general transformation system in Matplotlib. In new notebooks created for IPython 1. Some of the more useful ones are show below Text annotationAnnotating text in matplotlib figures can be done using the text function. Highly recommended http www. For example we can switch to SVG figures or higher resolution figures with either config InlineBackend. More about that later. com matplotlib matplotlib The source code for matplotlib. org Cheet SheetDownload the high quality version from here https www. First and foremost we need to have LaTeX formatted text and second we need to be able to adjust the font size to appear right in a publication. many more options are available upper left corner upper left corner Update the matplotlib configuration parameters upper left corner Update the matplotlib configuration parameters upper left corner restore MATLAB style line color and style blue line with dots green dashed line half transparant red RGB hex code for a bluish color RGB hex code for a greenish color possible linestype options. It is remarkably powerful. It is somewhat prone to errors and unflexible if curves are added to or removed from the figure resulting in a wrongly labelled curve. To create an 800x400 pixel 100 dots per inch figure we can do The same arguments can also be passed to layout managers such as the subplots function Saving figuresTo save a figure to a file we can use the savefig method in the Figure class Here we can also optionally specify the DPI and choose between different output formats What formats are available and which ones should be used for best quality Matplotlib can generate high quality output in a number formats including PNG JPG EPS SVG PGF and PDF. Plot rangeThe first thing we might want to configure is the ranges of the axes. One method is to use the legend method of the axis object and pass a list tuple of legend texts for the previously defined curves The method described above follows the MATLAB API. A good choice of global fonts are the STIX fonts Or alternatively we can request that matplotlib uses LaTeX to render the text elements in the figure Setting colors linewidths linetypes ColorsWith matplotlib we can define the colors of lines and other graphical elements in a number of ways. With the FuncAnimation function we can generate a movie file from sequences of figures. The MATLAB API for selecting line styles are also supported where for example b. A list of available backends are The default backend called agg is based on a library for raster graphics which is great for generating raster formats like PNG. This can be done using subplots_adjust Axis gridWith the grid method in the axis object we can turn on and off grid lines. To use the object oriented API we start out very much like in the previous example but instead of creating a new global figure instance we store a reference to the newly created figure instance in the fig variable and from it we create a new axis instance axes using the add_axes method in the Figure class instance fig Although a little bit more code is involved the advantage is that we now have full control of where the plot axes are placed and we can easily add more than one axis to the figure If we don t care about being explicit about where our plot axes are placed in the figure canvas then we can use one of the many axis layout managers in matplotlib. However I d encourrage not using the MATLAB compatible API for anything but the simplest figures. There are a number of predefined colormaps. See http matplotlib. Install it on Ubuntu using sudo apt get install ffmpegor newer versions sudo apt get install libav toolsOn MacOSX try sudo port install ffmpeg BackendsMatplotlib has a number of backends which are responsible for rendering graphs. There is a distinction between noninteractive backends such as agg svg pdf etc. html A large gallery showcaseing various types of plots matplotlib can create. If you are using an old version of IPython try using pylab inline instead. add_axes or using a sub figure layout manager such as subplots subplot2grid or gridspec subplots subplot2grid gridspec add_axesManually adding axes with add_axes is useful for adding insets to figures Colormap and contour figuresColormaps and contour figures are useful for plotting functions of two variables. org users legend_guide. All we need to do is to use dollar signs encapsulate LaTeX in any text legend title label etc. mp4 fps 30 fps frames per secondTo use the animation features in matplotlib we first need to import the module matplotlib. We can also use the set_xticklabels and set_yticklabels methods to provide a list of custom text labels for each tick location There are a number of more advanced methods for controlling major and minor tick placement in matplotlib figures such as automatic placement according to different policies. The legend function takes an optional keyword argument loc that can be used to specify where in the figure the legend is to be drawn. But here we can run into a slightly subtle problem with LaTeX code and Python text strings. left bottom width height range 0 to 1 main axes inset axes main figure insert let matplotlib decide the optimal location upper right corner upper left corner lower left corner lower right corner. In LaTeX we frequently use the backslash in commands for example alpha to produce the symbol alpha. com getting started 179111 https www. png generation 1598960608599353 alt media InstallationsTo get started using Matplotlib in a Python program either include the symbols from the pylab module the easy way or import the matplotlib. For example y x 3. In this section we will look at controling those properties in a matplotlib figure. In most of these functions we will use a colormap to encode one dimension of the data. Surface plots Wire frame plot Coutour plots with projections Change the view angleWe can change the perspective of a 3D plot using the view_init method which takes two arguments elevation and azimuth angle in degrees AnimationsMatplotlib also includes a simple API for generating animations for sequences of figures. figure_format svg or config InlineBackend. pyplot module under the name plt the tidy way MATLAB like APIThe easiest way to get started with plotting using matplotlib is often to use the MATLAB like API provided by matplotlib. To use this API from matplotlib we need to include the symbols in the pylab module ExampleA simple figure with MATLAB like plotting API Most of the plotting related functions in MATLAB are covered by the pylab module. It is designed to be compatible with MATLAB s plotting functions so it is easy to get started with if you are familiar with MATLAB. Matplotlib has great support for LaTeX. possible marker symbols marker o s. See the matplotlib plot gallery for a complete list of available plot types http matplotlib. To activate this backend somewhere in the beginning on the notebook we add matplotlib inlineIt is also possible to activate inline matplotlib plotting with pylab inlineThe difference is that pylab inline imports a number of packages into the global address space scipy numpy while matplotlib inline only sets up inline plotting. IntroductionMatplotlib is an excellent 2D and 3D graphics library for generating scientific figures. For a list of pre defined colormaps see http www. The allowed values of loc are numerical codes for the various places the legend can be drawn. Now we are using the SVG vector graphics displaced inline in the notebook. fr rougier teaching matplotlib A good matplotlib tutorial. show to make the figure appear on the screen. But the backslash already has a meaning in Python strings the escape code character. We can also customize the appearance of the grid lines using the same keyword arguments as the plot function Axis spinesWe can also change the properties of axis spines Twin axesSometimes it is useful to have dual x or y axes in a figure for example when plotting curves with different units together. Commonly scipy and numpy are imported separately with import numpy as np import scipy as sp import matplotlib. The different backends are able to generate graphics with different formats and display event loops. marker size and color use LaTeX formatted labels distance between x and y axis and the numbers on the axes padding between axis label and axis numbers restore defaults default grid appearance custom grid appearance turn off axis spine to the right only ticks on the left side set position of x spine to x 0 set position of y spine to y 0 polar plot using add_axes and polar projection A histogram inset X Y width height set axis range set axis tick locations ax is a 3D aware axis instance because of the projection 3d keyword argument to add_subplot surface_plot with color grading and color bar solve the ode problem of the double compound pendulum again initial state time coordinates solve the ODE problem n frame counter calculate the positions of the pendulums update the line data RESTART THE NOTEBOOK the matplotlib backend can only be selected before pylab is imported e. Generating SVG with the svg backend The IPython notebook inline backendWhen we use IPython notebook it is convenient to use a matplotlib backend that outputs the graphics embedded in the notebook file. The matplotlib object oriented APIThe main idea with object oriented programming is to have objects that one can apply functions and actions on and no object or program states should be global such as the MATLAB like API. 3D axes can be added to a matplotlib figure canvas in exactly the same way as 2D axes or more conveniently by passing a projection 3d keyword argument to the add_axes or add_subplot methods. For scientific papers I recommend using PDF whenever possible. tight_layout method which automatically adjusts the positions of the axes on the figure canvas so that there is no overlapping content Figure size aspect ratio and DPIMatplotlib allows the aspect ratio DPI and figure size to be specified when the Figure object is created using the figsize and dpi keyword arguments. My favorite is subplots which can be used like this That was easy but it isn t so pretty with overlapping figure axes and labels right We can deal with that by using the fig. For example subplot and color symbol selection The good thing about the pylab MATLAB style API is that it is easy to get started with if you are familiar with MATLAB and it has a minumum of coding overhead for simple plots. that are only used to generate image files e. It is relatively straightforward to define custom colormaps. 0 I would recommend using matplotlib inline since it is tidier and you have more control over which packages are imported and how. pyplot as pltThe inline backend has a number of configuration options that can be set by using the IPython magic command config to update settings in InlineBackend. Normally we don t need to bother with changing the default backend but sometimes it can be useful to switch to for example PDF or GTKCairo if you are using Linux to produce high quality vector graphics instead of raster based graphics. One of the key features of matplotlib that I would like to emphasize and that I think makes matplotlib highly suitable for generating figures for scientific publications is that all aspects of the figure can be controlled programmatically. com download storage v1 b kaggle forum message attachments o inbox 2F5337747 2Fc6a59a0fad73ea9fc11720757f81cf13 2FMatplotlib_cheatsheet_datacamp. More information at the Matplotlib web page http matplotlib. org Cookbook Matplotlib Show_colormaps pcolor imshow contour 3D figuresTo use 3D graphics in matplotlib we first need to create an instance of the Axes3D class. The real advantage of this approach becomes apparent when more than one figure is created or when a figure contains more than one subplot. html Another good matplotlib reference. Each of the axes scales are set seperately using set_xscale and set_yscale methods which accept one parameter with the value log in this case Placement of ticks and custom tick labelsWe can explicitly determine where we want the axis ticks with set_xticks and set_yticks which both take a list of values for where on the axis the ticks are to be placed. Some of the many advantages of this library include Easy to get started Support for LaTeX formatted labels and texts Great control of every element in a figure including figure size and DPI. Some of the most common loc values are The following figure shows how to use the figure title axis labels and legends described above Formatting text LaTeX fontsize font familyThe figure above is functional but it does not yet satisfy the criteria for a figure used in a publication. FuncAnimation fig update init_func init frames 200 blit True anim. steps custom dash format line length space length. Kernel Restart Now we are using the svg backend to produce SVG vector graphics Show the produced SVG file. Further reading http www. Figure titles A title can be added to each axis instance in a figure. This line configures matplotlib to show figures embedded in the notebook instead of opening a new window for each figure. A better method is to use the label label text keyword argument when plots or other objects are added to the figure and then using the legend method without arguments to add the legend to the figure The advantage with this method is that if curves are added or removed from the figure the legend is automatically updated accordingly. To set the title use the set_title method in the axes instance Axis labels Similarly with the methods set_xlabel and set_ylabel we can set the labels of the X and Y axes Legends Legends for curves in a figure can be added in two ways. figsize is a tuple of the width and height of the figure in inches and dpi is the dots per inch pixel per inch. This is important for reproducibility and convenient when one needs to regenerate the figure with updated data or change its appearance. To avoid Python messing up our latex code we need to use raw text strings. means a blue line with dots We can also define colors by their names or RGB hex codes and optionally provide an alpha value using the color and alpha keyword arguments Line and marker stylesTo change the line width we can use the linewidth or lw keyword argument. First of all we can use the MATLAB like syntax where b means blue g means green etc. GUI for interactively exploring figures and support for headless generation of figure files useful for batch jobs. The function takes the following arguments fig a figure canvas func a function that we provide which updates the figure init_func a function we provide to setup the figure frame the number of frames to generate and blit which tells the animation function to only update parts of the frame which have changed for smoother animations def init setup figure def update frame_counter update figure for new frame anim animation. html legend location for details. io matplotlib matplotlib. Instead I recommend learning and using matplotlib s object oriented plotting API. LaTeX documents compiled with pdflatex can include PDFs using the includegraphics command. High quality output in many formats including PNG PDF SVG EPS and PGF. For advanced figures with subplots insets and other components it is very nice to work with. The line style can be selected using the linestyle or ls keyword arguments Control over axis appearanceThe appearance of the axes is an important aspect of a figure that we often need to modify to make a publication quality graphics. Matplotlib supports this with the twinx and twiny functions Axes where x and y is zero Advanced 2D plot stylesIn addition to the regular plot method there are a number of other functions for generating different kind of plots. http scipy lectures. ", "id": "imoore/2d-and-3d-plotting-tutorial-in-python", "size": "196", "language": "python", "html_url": "https://www.kaggle.com/code/imoore/2d-and-3d-plotting-tutorial-in-python", "git_url": "https://www.kaggle.com/code/imoore/2d-and-3d-plotting-tutorial-in-python", "script": "animation matplotlib.gridspec ticker scipy.integrate mpl_toolkits.mplot3d.axes3d sin numpy matplotlib.pylab init odeint pylab flux_qubit_potential Axes3D Image matplotlib.pyplot dx cos matplotlib update matplotlib.animation SVG IPython.display ", "entities": "(('ticks', 'where axis'), 'set') (('we', 'figures'), 'generate') (('More information', 'matplotlib'), 'http') (('fr', 'good matplotlib tutorial'), 'rougier') (('Matplotlib', 'PNG JPG EPS SVG PGF'), 'pass') (('Kernel Now we', 'SVG produced file'), 'Restart') (('we', 'matplotlib figure'), 'look') (('functionality', 'Matplotlib'), 'be') (('ExampleA', 'pylab module'), 'cover') (('you', 'quality vector high graphics'), 'don') (('legend', 'numerical various places'), 'be') (('where y', 'plots'), 'support') (('line', 'figure'), 'configure') (('It', 'custom relatively colormaps'), 'be') (('init_func init', '200 blit True anim'), 'update') (('curves', 'wrongly labelled curve'), 'be') (('which', 'rendering graphs'), 'install') (('you', 'MATLAB'), 'design') (('axesSometimes it', 'different units'), 'customize') (('Logarithmic scaleIt', 'one axes'), 'do') (('3D axes', 'add_axes methods'), 'add') (('we', 'grid on lines'), 'gridwith') (('when one', 'appearance'), 'be') (('label just axis texts', 'manually fig'), 'support') (('it', 'simple plots'), 'selection') (('set', 'two ways'), 'label') (('parameters', 'linestype greenish color possible options'), 'be') (('we', 'Axes3D class'), 'Matplotlib') (('you', 'inline'), 'use') (('upper right corner', 'lower corner'), 'leave') (('height', 'inch'), 'be') (('other it', 'subplots insets'), 'be') (('see', 'www'), 'http') (('ffmpeg', 'movie Note file'), 'Generate') (('we', 'symbol alpha'), 'use') (('Some', 'figure size'), 'include') (('contour contour figures', 'two variables'), 'add_axes') (('I', 'PDF'), 'recommend') (('we', 'axes'), 'be') (('we', 'module first matplotlib'), 'need') (('we', 'publication'), 'need') (('s', 'axis labels'), 'let') (('We', 'different policies'), 'use') (('here we', 'LaTeX code'), 'run') (('Figure title', 'figure'), 'title') (('method', 'MATLAB above API'), 'be') (('that', 'InlineBackend'), 'have') (('we', 'data'), 'use') (('started', 'matplotlib'), 'be') (('which', 'PNG'), 'be') (('AnimationsMatplotlib', 'figures'), 'include') (('aspects', 'figure'), 'be') (('Now we', 'notebook'), 'use') (('when figure', 'more than one subplot'), 'become') (('that', 'image files only e.'), 'use') (('font which', 'tick labels axis labels'), 'prepende') (('MATLAB API', 'b.'), 'support') (('that', 'notebook file'), 'generate') (('we', 'text raw strings'), 'avoid') (('Commonly scipy', 'sp import matplotlib'), 'import') (('Figure when object', 'dpi figsize arguments'), 'allow') (('Text annotationAnnotating text', 'text function'), 'show') (('where ticks', 'possibly axes'), 'need') (('we', 'publication quality often graphics'), 'select') (('that', 'interactively exploring figures'), 'with') (('IntroductionMatplotlib', 'graphics excellent 2D scientific figures'), 'be') (('legend', 'figure'), 'be') (('LaTeX documents', 'includegraphics command'), 'include') (('png generation', 'matplotlib'), 'start') (('matplotlib inline', 'only inline plotting'), 'be') (('blue g', 'green etc'), 'use') (('We', 'fig'), 'be') (('we', 'ways'), 'be') (('matplotlib backend', 'only pylab'), 'restore') (('we', 'resolution config higher InlineBackend'), 'switch') (('object', 'API'), 'orient') (('then we', 'matplotlib'), 'start') (('backslash', 'escape code character'), 'have') (('However I', 'anything'), 'd') (('different backends', 'event loops'), 'be') (('we', 'plt'), 'make') (('PGF', 'cases'), 'be') (('packages', 'which'), '0') (('animations def init smoother setup', 'frame anim new animation'), 'take') (('Instead I', 'API'), 'recommend') (('sometimes it', 'axes'), 'number') (('we', 'text legend title label'), 'be') (('we', 'lw keyword argument'), 'mean') (('above it', 'publication'), 'be') (('legend', 'where figure'), 'take') (('figure', 'screen'), 'show') (('large gallery', 'plots matplotlib'), 'create') ", "extra": "['annotation']"}