{"name": "recommender systems in python 101 ", "full_name": " h1 Recommender Systems in Python 101 h1 Loading data CI T Deskdrop dataset h2 shared articles csv h2 users interactions csv h2 Data munging h1 Evaluation h1 Popularity model h1 Content Based Filtering model h1 Collaborative Filtering model h2 Matrix Factorization h2 Hybrid Recommender h2 Comparing the methods h1 Testing h1 Conclusion ", "stargazers_count": 0, "forks_count": 0, "description": "You can know more about state of the art methods published in Recommender Systems on ACM RecSys conference https recsys. Content Based Filtering http recommender systems. There are two possible event types at a given timestamp CONTENT SHARED The article was shared in the platform and is available for users. This model is not actually personalized it simply recommends to a user the most popular items that the user has not previously consumed. Let s build a simple hybridization method as an ensemble that takes the weighted average of the normalized CF scores with the Content Based scores and ranking by resulting score. Here we a use popular latent factor model named Singular Value Decomposition SVD https en. An important decision is the number of factors to factor the user item matrix. users_interactions. csvContains logs of user interactions on shared articles. If you are more like practioner than researcher you might try some Collaborative Filtering frameworks in this dataset like surprise https github. The lower performance of the Content Based model compared to the Popularity model may indicate that users are not that fixed in content very similar to their previous reads. The recommendations really matches my interests as I would read all of them ConclusionIn this notebook we ve explored and compared the main Recommender Systems techniques on CI T Deskdrop https www. com evaluating recommender systems. Also comparing similarity on the resulting matrix is much more scalable especially in dealing with large sparse datasets. liked or commented will have a higher strength in the final user profile. net gabrielspmoreira discovering users topics of interest in recommender systems tdc sp 2016 where I describe a production recommender system focused on Content Based Filtering and Topic Modeling techniques. One key aspect of evaluation is to ensure that the trained model generalizes for data it was not trained on using Cross validation techniques. There are many model based CF algorithms like neural networks bayesian networks clustering models and latent factor models such as Singular Value Decomposition SVD and probabilistic latent semantic analysis. org stable modules generated sklearn. And Recall 10 was even higher 37 as expected. There is large room for improvements of the results. Here we naively assume those non interacted items are not relevant to the user which might not be true as the user may simply not be aware of those not interacted items. Other popular ranking metrics are NDCG N and MAP N whose score calculation takes into account the position of the relevant item in the ranked list max. The resulting matrix is not sparse any more. Evaluating the Collaborative Filtering model SVD matrix factorization we observe that we got Recall 5 33 and Recall 10 46 values much higher than Popularity model and Content Based model. org wiki Vector_space_model it is to compute similarity between articles. We are using here a simple cross validation approach named holdout in which a random data sample 20 in this case are kept aside in the training process and exclusively used for evaluation. CONTENT REMOVED The article was removed from the platform and not available for further recommendation. org wiki Feature_hashing and Wide Deep models https ai. Preference and relevance are subjective and they are generally inferred by items users have consumed previously. org wiki Learning_to_rank models like XGBoost Gradient Boosting Decision Trees with ranking objective Logistic models with categorical features One Hot encoded http scikit learn. 2 and Recall 10 of 47. Now we have a Recall 5 of 34. Each article has its sharing date timestamp the original url title content in plain text the article lang Portuguese pt or English en and information about the user who shared the article author. All evaluation metrics reported here are computed using the test set. It is composed of two CSV files shared_articles. Here we are using a very popular technique in information retrieval search engines named TF IDF https en. COMMENT CREATED The user created a comment in the article. We will demonstrate how to implement Collaborative Filtering Content Based Filtering and Hybrid methods in Python for the task of providing personalized recommendations to the users. csvContains information about the articles shared in the platform. 9 Comparing the methods TestingLet s test the best model Hybrid for my user. It depends only on the user previous choices making this method robust to avoid the cold start problem. csv by contentId column. Top N accuracy metrics consts Getting the items in test set Getting a ranked recommendation list from a model for a given user For each item the user has interacted in test set Getting a random sample 100 items the user has not interacted to represent items that are assumed to be no relevant to the user Combining the current interacted item with the 100 random items Filtering only recommendations that are either the interacted item or from a random sample of 100 non interacted items Verifying if the current interacted item is among the Top N recommended items Recall is the rate of the interacted items that are ranked among the Top N recommended items when mixed with a set of non relevant items if idx 100 0 and idx 0 print d users processed idx Computes the most popular items Recommend the more popular items that the user hasn t seen yet. html which is implemented in TensorFlow https docs. com Mendeley mrec or python recsys https github. The underlying assumption of the collaborative filtering approach is that if a person A has the same opinion as a person B on a set of items A is more likely to have B s opinion for a given item than that of a randomly chosen person. Looking my profile it appears that the top relevant tokens really represent my professional interests in machine learning deep learning artificial intelligence and google cloud platform So we might expect good recommendations here With personalized recommendations of content based filtering model we have a Recall 5 to about 0. For a more precise evaluation and higher accuracy only articles that were available at a given time should be recommended but we let this exercice for you. The objective of a RecSys is to recommend relevant items for users based on their preference. To model the user profile we take all the item profiles the user has interacted and average them. 162 which means that about 16 of interacted items in test set were ranked by this model among the top 5 items from lists with 100 random items. There are other matrix factorization frameworks more specific to CF you might try like surprise https github. Ignoring stopwords words with no semantics from English and Portuguese as we have a corpus with mixed languages Trains a model whose vectors size is 5000 composed by the main unigrams and bigrams found in the corpus ignoring stopwords Weighted average of item profiles by the interactions strength Computes the cosine similarity between the user profile and all item profiles Gets the top similar items Sort the similar items by similarity Ignores items the user has already interacted Creating a sparse pivot table with users in rows and items in columns The number of factors to factor the user item matrix. com gspmoreira articles sharing reading from cit deskdrop dataset. After the factorization we try to to reconstruct the original matrix by multiplying its factors. FOLLOW The user chose to be notified on any new comment in the article. This technique converts unstructured text into a vector structure where each word is represented by a position in the vector and the value measures how relevant a given word is for an article. org wiki Collaborative_filtering This method makes automatic predictions filtering about the interests of a user by collecting preferences or taste information from many users collaborating. The value in each position represents how relevant is a token unigram or bigram for me. It can be easily observed that among my main interests are machine learning deep learning artificial intelligence and google cloud platform. Matrix FactorizationLatent factor models compress user item matrix into a low dimensional representation in terms of latent factors. Data mungingAs there are different interactions types we associate them with a weight or strength assuming that for example a comment in an article indicates a higher interest of the user on the item than a like or than a simple view. Take a look in the summary my solution shared for Outbrain Click Prediction https www. Popularity modelA common and usually hard to beat baseline approach is the Popularity model. com Mendeley mrec python recsys https github. We chose to work with Top N accuracy metrics which evaluates the accuracy of the top recommendations provided to a user comparing to the items the user has actually interacted in test set. This approach is very simple to implement but usually do not scale well for many users. For the sake of simplicity we chose the first random approach for this notebook but you may want to try the second approach to better simulate how the recsys would perform in production predicting future users interactions. It contains about 73k logged users interactions on more than 3k public articles shared in the platform. org wiki Tf E2 80 93idf. Recommender Systems in Python 101This notebook is a practical introduction to the main Recommender System https en. com gspmoreira articles sharing reading from cit deskdrop which contains a real sample of 12 months logs Mar. You can find a reference to implement this metrics in this post http fastml. A nice Python implementation of this approach in available in Crab http muricoca. It can be joined to articles_shared. 2417 which means that about 24 of interacted items in test set were ranked by Popularity model among the top 5 items from lists with 100 random items. In other words these algorithms try to recommend items that are similar to those that a user liked in the past or is examining in the present. It achieved the Recall 5 of 0. It handles the sparsity of the original matrix better than memory based ones. Performs matrix factorization of the original user item matrix Converting the reconstructed matrix back to a Pandas dataframe Get and sort the user s predictions Recommend the highest predicted rating movies that the user hasn t seen yet. This contextual information can be easily incorporated in Learn to Rank https en. Here are some tips In this example we ve completely ignored the time considering that all articles were available to be recommended to users at any time. A reduced presentation could be utilized for either user based or item based neighborhood algorithms that are presented in the previous section. org wiki Recommender_system RecSys techniques. csv users_interactions. There are several advantages with this paradigm. html implemenation of SVD because it is available on Kaggle kernels. See this presentation https www. Let s take a look in the profile. One advantage of using this approach is that instead of having a high dimensional matrix containing abundant number of missing values we will be dealing with a much smaller matrix in lower dimensional space. io matrix factorization recommender. html distributed implementation for large datasets. In particular various candidate items are compared with items previously rated by the user and the best matching items are recommended. Collaborative Filtering modelCollaborative Filtering CF has two main implementation strategies Memory based This approach uses the memory of previous users interactions to compute users similarities based on items they ve interacted user based approach or compute items similarities based on the users that have interacted with them item based approach. value if relevant item is in the first position. The main objective of a recommender system is to leverage the long tail items to the users with very specific interests which goes far beyond this simple technique. We chose a SciPy https docs. Therefore if the model is allowed to memorize too much details of the original matrix it may not generalize well for data it was not trained on. Hybrid RecommenderWhat if we combine Collaborative Filtering and Content Based Filtering approaches Would that provide us with more accurate recommendations In fact hybrid methods have performed better than individual approaches in many studies and have being extensively used by researchers and practioners. In Deskdrop users are allowed to view an article many times and interact with them in different ways eg. Take a look in this presentation https www. See an example of SVD on a movies dataset in this blog post https beckernick. Thus to model the user interest on a given article we aggregate all the interactions the user has performed in an item by a weighted sum of interaction type strength and apply a log transformation to smooth the distribution. Model based This approach models are developed using different machine learning algorithms to recommend items to users. 2017 from CI T s Internal Communication platform DeskDrop. com ocelma python recsys and Spark ALS Matrix Factorization https spark. In Recommender Systems there are a set metrics commonly used for evaluation. For textual items like articles news and books it is simple to use the raw text to build item profiles and user profiles. A typical example of this approach is User Neighbourhood based CF in which the top N similar users usually computed using Pearson correlation for a user are selected and used to recommend items those similar users liked but the current user have not interacted yet. Here we perform the evaluation of the Popularity model according to the method described above. As the popularity accounts for the wisdom of the crowds it usually provides good recommendations generally interesting for most people. com 2016 06 wide deep learning better together with. These methods can also be used to overcome some of the common problems in recommender systems such as cold start and the sparsity problem. It might be surprising to you that usually Popularity models could perform so well Content Based Filtering modelContent based filtering approaches leverage description or attributes from items the user has interacted to recommend similar items. There are more advanced techniques in RecSys research community specially advanced Matrix Factorization and Deep Learning models. The main families of methods for RecSys are Collaborative Filtering https en. Getting the top 1000 Content based filtering recommendations Getting the top 1000 Collaborative filtering recommendations Combining the results by contentId Computing a hybrid recommendation score based on CF and CB scores Sorting recommendations by hybrid score. Indexing by personId to speed up the searches during evaluation Get the user s data and merge in the movie information. html or Feature Hashed https en. Reducing the number of factors increases the model generalization. org content based filtering This method uses only information about the description and attributes of the items users has previously consumed to model user s preferences. You could leverage the available contextual information to model users preferences across time period of day day of week month location country and state district and devices browser mobile native app. It was generated predictions for items the user have not yet interaction which we will exploit for recommendations. Ask the recommender model to produce a ranked list of recommended items from a set composed one interacted item and the 100 non interacted non relevant items Compute the Top N accuracy metrics for this user and interacted item from the recommendations ranked list Aggregate the global Top N accuracy metricsThe Top N accuracy metric choosen was Recall N which evaluates whether the interacted item is among the top N items hit in the ranked list of 101 recommendations for a user. The higher the number of factors the more precise is the factorization in the original matrix reconstructions. We have a new champion Our simple hybrid approach surpasses Content Based filtering with its combination with Collaborative Filtering. And Recall 10 was 0. BOOKMARK The user has bookmarked the article for easy return in the future. EvaluationEvaluation is important for machine learning projects because it allows to compare objectivelly different algorithms and hyperparameter choices for models. org wiki Unit_vector of 5000 length. The average is weighted by the interaction strength in other words the articles the user has interacted the most eg. net gabrielspmoreira discovering users topics of interest in recommender systems tdc sp 2016 from slide 30 for more information on TF IDF and Cosine similarity. But let s keep this assumption. In this notebook we use a dataset we ve shared on Kaggle Datasets Articles Sharing and Reading from CI T Deskdrop https www. It is a unit vector https en. com NicolasHug Surprise mrec https github. csv Take a look in this kernels for a better picture of the dataset Deskdrop datasets EDA DeskDrop Articles Topic Modeling shared_articles. org wiki Singular_value_decomposition. It could be observed that for articles recommendation content based filtering and a hybrid method performed better than Collaborative Filtering alone. For this reason we are keeping in the dataset only users with at leas 5 interactions. com c outbrain click prediction discussion 27897 157215 competition. com gspmoreira articles sharing reading from cit deskdrop. org doc scipy reference generated scipy. This evaluation method works as follows For each user For each item the user has interacted in test set Sample 100 other items the user has never interacted. org docs latest mllib collaborative filtering. Loading data CI T Deskdrop datasetIn this section we load the Deskdrop dataset https www. com ocelma python recsys. The eventType values are VIEW The user has opened the article. As all items will be represented in the same Vector Space Model https en. A better approach would be to filter only articles that were available for users at a given time. Recommender systems have a problem known as user cold start in which is hard do provide personalized recommendations for users with none or a very few number of consumed items due to the lack of information to model their preferences. com tensorflow guide tutorials wide_and_deep. A more robust evaluation approach could be to split train and test sets by a reference date where the train set is composed by all interactions before that date and the test set are interactions after that date. In this case as the CF model is much more accurate than the CB model the weights for the CF and CB models are 100. Hybrid methods Recent research has demonstrated that a hybrid approach combining collaborative filtering and content based filtering could be more effective than pure approaches in some cases. LIKE The user has liked the article. Those basic techniques were used for didactic purposes. Here we see some articles I interacted in Deskdrop from train set. For the sake of simplicity we only consider here the CONTENT SHARED event type assuming naively that all articles were available during the whole one year period. ", "id": "gspmoreira/recommender-systems-in-python-101", "size": "18419", "language": "python", "html_url": "https://www.kaggle.com/code/gspmoreira/recommender-systems-in-python-101", "git_url": "https://www.kaggle.com/code/gspmoreira/recommender-systems-in-python-101", "script": "__init__ stopwords scipy.sparse.linalg get_item_profile inspect_interactions TfidfVectorizer CFRecommender ContentBasedRecommender scipy.sparse MinMaxScaler sklearn.metrics.pairwise numpy recommend_items sklearn.feature_extraction.text ModelEvaluator get_not_interacted_items_sample build_users_profile HybridRecommender sklearn.model_selection evaluate_model_for_user smooth_user_preference matplotlib.pyplot cosine_similarity pandas csr_matrix evaluate_model svds build_users_profiles _get_similar_items_to_user_profile get_items_interacted nltk.corpus _verify_hit_top_n get_item_profiles sklearn.preprocessing PopularityRecommender get_model_name train_test_split ", "entities": "(('com c', 'prediction outbrain discussion'), 'click') (('users', 'very previous reads'), 'indicate') (('train where set', 'test date'), 'be') (('user', 'simply interacted items'), 'assume') (('it', 'well data'), 'train') (('solution', 'Outbrain Click Prediction https www'), 'take') (('methods', 'such cold start'), 'use') (('I', 'train set'), 'see') (('we', 'lower dimensional space'), 'be') (('user', 'article'), 'be') (('that', 'score'), 'let') (('It', 'CSV files two shared_articles'), 'compose') (('which', 'far simple technique'), 'be') (('articles', 'time'), 'be') (('better how recsys', 'users future interactions'), 'choose') (('user', 'user item matrix'), 'Trains') (('article', 'further recommendation'), 'remove') (('automatic predictions', 'many users'), 'make') (('it', 'generally most people'), 'provide') (('which', 'months logs 12 Mar.'), 'com') (('relevant item', 'first position'), 'value') (('comment', 'simple view'), 'be') (('users', 'previously preferences'), 'use') (('user', 'distribution'), 'aggregate') (('important decision', 'user item matrix'), 'be') (('we', 'you'), 'recommend') (('Also comparing', 'much more especially large sparse datasets'), 'be') (('http scikit', 'features categorical One Hot'), 'encode') (('main families', 'RecSys'), 'be') (('problem', 'preferences'), 'have') (('Python nice implementation', 'muricoca'), 'http') (('that', 'present'), 'try') (('Deskdrop users', 'different ways'), 'allow') (('that', 'them'), 'have') (('you', 'surprise https github'), 'try') (('A', 'randomly chosen person'), 'be') (('Here we', 'method'), 'perform') (('net gabrielspmoreira', 'TF IDF similarity'), 'discover') (('we', 'Popularity much higher model'), 'evaluate') (('we', 'CI T Deskdrop https www'), 'match') (('value', 'how token me'), 'represent') (('we', '5 interactions'), 'keep') (('You', 'ACM RecSys conference https recsys'), 'know') (('we', 'recommendations'), 'generate') (('Indexing', 'movie information'), 'get') (('user', 'most eg'), 'weight') (('it', 'item profiles'), 'be') (('method', 'start cold problem'), 'depend') (('We', 'users'), 'demonstrate') (('You', 'post http fastml'), 'find') (('users', 'generally items'), 'be') (('top 1000 Content', 'hybrid score'), 'get') (('Deskdrop', 'DeskDrop Articles Topic Modeling shared_articles'), 'take') (('user', '100 other items'), 'work') (('hybrid approach', 'cases'), 'method') (('contextual information', 'Rank https'), 'incorporate') (('that', 'previous section'), 'utilize') (('Model', 'users'), 'develop') (('interacted item', 'user'), 'ask') (('user', 'them'), 'take') (('user', 'article'), 'create') (('weights', 'CF models'), 'be') (('we', 'CI T Deskdrop https www'), 'use') (('basic techniques', 'didactic purposes'), 'use') (('NDCG MAP score calculation', 'list ranked max'), 'be') (('simple hybrid approach', 'Collaborative Filtering'), 'have') (('We', 'exclusively evaluation'), 'use') (('it', 'Kaggle kernels'), 'implemenation') (('It', 'platform'), 'contain') (('items', 'previously user'), 'compare') (('org wiki it', 'articles'), 'Vector_space_model') (('objective', 'preference'), 'be') (('who', 'article author'), 'have') (('user', 'future'), 'BOOKMARK') (('It', 'better memory based ones'), 'handle') (('You', 'state browser mobile native app'), 'leverage') (('it', 'hyperparameter models'), 'be') (('It', 'deep artificial intelligence'), 'observe') (('it', 'Cross validation techniques'), 'be') (('user', 'that'), 'personalize') (('we', 'factors'), 'try') (('current user', 'items'), 'be') (('datasetIn we', 'Deskdrop dataset https www'), 'Loading') (('Here we', 'information retrieval search engines'), 'use') (('101This notebook', 'Recommender System practical main https'), 'Systems') (('about 24', '100 random items'), '2417') (('how given word', 'article'), 'unstructured') (('gspmoreira articles', 'cit deskdrop'), 'com') (('modelA', 'baseline common usually approach'), 'be') (('user hasn t', 'that'), 'const') (('about 16', '100 random items'), '162') (('liked', 'user final profile'), 'have') (('naively articles', 'year whole one period'), 'consider') (('user', 'article'), 'FOLLOW') (('Reducing', 'model generalization'), 'increase') (('article', 'users'), 'be') (('user', 'similar items'), 'be') (('items', 'Vector Space Model same https'), 'represent') (('evaluation metrics', 'test here set'), 'compute') (('approach', 'very usually well many users'), 'be') (('It', 'Collaborative hybrid better Filtering'), 'observe') (('which', 'TensorFlow https docs'), 'html') (('user hasn t', 'that'), 'recommend') (('html', 'large datasets'), 'distribute') (('2016 where I', 'Content Based Topic Filtering techniques'), 'discover') (('The higher number', 'matrix more precise original reconstructions'), 'be') (('you', 'surprise https github'), 'be') (('Content Based Filtering', 'recommender systems'), 'http') (('hybrid methods', 'extensively researchers'), 'RecommenderWhat') (('we', '5 about 0'), 'appear') (('that', 'given time'), 'be') (('user', 'test actually set'), 'choose') ", "extra": "['test']"}