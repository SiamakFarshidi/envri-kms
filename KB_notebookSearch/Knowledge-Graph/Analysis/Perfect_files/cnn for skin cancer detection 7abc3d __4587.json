{"name": "cnn for skin cancer detection 7abc3d ", "full_name": " h1 Step 1 importing Essential Libraries h1 Step 2 Loading pictures and making Dictionary of images and labels h1 Step 3 Categorical Labels h1 Step 4 Normalization h1 Step 5 Model Building h2 CNN h1 confusion matrix h1 Step 6 Cross Validating Model h1 Step 7 Testing the model h1 Step 8 ResNet50 ", "stargazers_count": 0, "forks_count": 0, "description": "Step 6 Cross Validating Model Step 7 Testing the modelFirst the model has to be fitted with all the data such that no data is left out. confusion matrix Precission Recall F1. Automated classification of skin lesions using images is a challenging task owing to the fine grained variability in the appearance of skin lesions. e the area size pooled each time more the pooling dimension is high more the downsampling is important. relu is the rectifier activation function max 0 x. Combining convolutional and pooling layers CNN are able to combine local features and learn more global features of the image. We have to choose the pooling size i. The second important layer in CNN is the pooling MaxPool2D layer. In the end i used the features in one fully connected Dense layer which is just artificial an neural networks ANN classifier. It combines all the found local features of the previous convolutional layers. The first is the convolutional Conv2D layer. Step 3 Categorical LabelsTurn labels into one hot encoding Step 4 NormalizationNormalize all Values of the pictures by dividing all the RGB values by 255 Step 5 Model Building CNNI used the Keras Sequential API where you have just to add one layer at a time starting from the input. This technique also improves generalization and reduces the overfitting. Each filter transforms a part of the image defined by the kernel size using the kernel filter. These are used to reduce computational cost and to some extent also reduce overfitting. It is like a set of learnable filters. In this kernel I have followed following 14 steps for model building and evaluation which are as follows Step 1 Importing Essential Libraries Step 2 Loading pictures and making Dictionary of images and labels Step 3 Categorical Labels Step 4 Normalization Step 5 Train and Test Split Step 6 Model Building Step 7 Cross validating model Step 8 Testing model Step 9 ResNet50 Step 1 importing Essential Libraries Step 2 Loading pictures and making Dictionary of images and labelsIn this step I load in the pictures and turn them into numpy arrays using their RGB values. It has 2 different classes of skin cancer which are listed below 1. Filters can be seen as a transformation of the image. It consists of 1800 pictures of benign moles and 1497 pictures of malignant classified moles. As the pictures have already been resized to 224x224 there s no need to resize them. The dataset is taken from the ISIC International Skin Image Collaboration Archive. As the dataset is pretty balanced the model will be tested on the accuracy score thus TP TN ALL. Malignant In this kernel I will try to detect 2 different classes of moles using Convolution Neural Network with keras tensorflow in backend and then analyse the result to see how the model can be useful in practical scenario. Step 8 ResNet50The CNN above is not a very sophisticated model thus the resnet50 is also tried It s my lucky number used for converting labels to one hot encoding convert to one hot encoding Load in training pictures Load in testing pictures Create labels Merge data Shuffle data Display first 15 images of moles and how they are classified With data augmentation to prevent overfitting See learning curve and validation curve Set a learning rate annealer list all data in history summarize history for accuracy summarize history for loss define 3 fold cross validation test harness create model Fit the model evaluate the model Fitting model to all data Testing model on test data to evaluate save model serialize model to JSON serialize weights to HDF5 Clear memory because of memory overload Train ResNet50 on all the data list all data in history summarize history for accuracy summarize history for loss Testing model on test data to evaluate save model serialize model to JSON serialize weights to HDF5. It looks at the 2 neighboring pixels and picks the maximal value. The rectifier activation function is used to add non linearity to the network. As the pictures do not have any labels these need to be created. The Flatten layer is use to convert the final feature maps into a one single 1D vector. The kernel filter matrix is applied on the whole image. Mole Classifier KernelSkin cancer is the most common human malignancy is primarily diagnosed visually beginning with an initial clinical screening and followed potentially by dermoscopic analysis a biopsy and histopathological examination. I choosed to set 64 filters for the two firsts conv2D layers. Finally the pictures are added together to a big training set and shuffeled. The CNN can isolate features that are useful everywhere from these transformed images feature maps. This drops randomly a propotion of the network and forces the network to learn features in a distributed way. The pictures have all been resized to low resolution 224x224x3 RGB. Dropout is a regularization method where a proportion of nodes in the layer are randomly ignored setting their wieghts to zero for each training sample. The task of this kernel is to create a model which can classify a mole visually into benign and malignant. This flattening step is needed so that you can make use of fully connected layers after some convolutional maxpool layers. This layer simply acts as a downsampling filter. ", "id": "mahamatnour/cnn-for-skin-cancer-detection-7abc3d", "size": "4587", "language": "python", "html_url": "https://www.kaggle.com/code/mahamatnour/cnn-for-skin-cancer-detection-7abc3d", "git_url": "https://www.kaggle.com/code/mahamatnour/cnn-for-skin-cancer-detection-7abc3d", "script": "Flatten sklearn.metrics keras.preprocessing.image glob cross_val_score keras.layers keras.callbacks train_test_split Dropout Sequential MaxPool2D to_categorical # convert to one-hot-encoding Adam keras.utils.np_utils Conv2D build seaborn numpy auc plot_confusion_matrix ReduceLROnPlateau PIL to_categorical # used for converting labels to one-hot-encoding sklearn.model_selection ImageDataGenerator confusion_matrix KFold Image matplotlib.pyplot RMSprop Dense ResNet50 pandas classification_report keras.optimizers StandardScaler keras.applications.resnet50 accuracy_score BatchNormalization KerasClassifier precision_recall_curve GridSearchCV Model roc_auc_score sklearn.preprocessing backend roc_curve backend as K keras keras.wrappers.scikit_learn keras.models keras.layers.normalization ", "entities": "(('most common human malignancy', 'dermoscopic potentially analysis'), 'be') (('you', 'maxpool convolutional layers'), 'need') (('step I', 'RGB values'), 'follow') (('I', 'firsts conv2D two layers'), 'choose') (('regularization where proportion', 'training sample'), 'be') (('such data', 'data'), 'step') (('data', 'HDF5'), 'be') (('These', 'also overfitting'), 'use') (('dataset', 'ISIC International Skin Image Collaboration Archive'), 'take') (('Finally pictures', 'training together big set'), 'add') (('Filters', 'image'), 'see') (('which', 'visually benign'), 'be') (('kernel filter matrix', 'whole image'), 'apply') (('which', 'Dense one fully connected layer'), 'use') (('which', '1'), 'have') (('pictures', 'low resolution'), 'resize') (('where you', 'input'), 'use') (('Automated classification', 'skin lesions'), 'be') (('It', 'maximal value'), 'look') (('Combining', 'image'), 'be') (('It', '1497 malignant classified moles'), 'consist') (('layer', 'downsampling simply filter'), 'act') (('pictures', 'them'), 'resize') (('This', 'distributed way'), 'drop') (('It', 'previous convolutional layers'), 'combine') (('technique', 'overfitting'), 'improve') (('pictures', 'labels'), 'have') (('that', 'images feature everywhere transformed maps'), 'isolate') (('filter', 'kernel filter'), 'transform') (('how model', 'practical scenario'), 'try') (('activation rectifier function', 'network'), 'use') (('pretty model', 'accuracy score'), 'be') (('Flatten layer', '1D one single vector'), 'be') (('second important layer', 'CNN'), 'be') ", "extra": "['biopsy', 'biopsy of the greater curvature', 'test']"}