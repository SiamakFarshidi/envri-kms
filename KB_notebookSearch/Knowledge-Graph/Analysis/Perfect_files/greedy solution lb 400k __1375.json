{"name": "greedy solution lb 400k ", "full_name": " h1 Greedy solution to the Hashcode problem h1 Sanity checks of our submission ", "stargazers_count": 0, "forks_count": 0, "description": "Sanity checks of our submission Read our input Create some variables to store the solution in Sample our first slide must be horizontal Iteratively add a slide to the sequence Fallback In case we do not find any candidates we just take 1 random horizontal or 2 random vertical pics Get a list of K possible good candidates Candidates consist of all possible horizontal candidates and all combinations of 2 vertical candidates Iterate over candidates and pick the one that increases the score the most. As a result I participated in the Google Hashcode for the first time this year. you basically want to visit all the photos cities and maximize a score. My greedy solution is mainly based on this blog post. As such we create a list of 100 candidates candidate 1 horizontal or 2 vertical photos in each iteration. As a preparation I also solved the one of 2019 which is exactly this problem Here is my greedy solution. Note that this can be improved A LOT by integer programming it s basically a Traveling Salesman Problem but with the extra challenge of having vertical and horizontal photos I. com danieleratti how we placed 1st in italy and 22nd in the world google hashcode 2019 e59e52232b4e The gist of what we do is the following In each iteration we try to assign either 1 horizontal or 2 vertical photos such that the gain in score is maximized. Assign a new picture to the next slide CHECKS 1 We dont want duplicates 2 We want vertical pictures to always be paired with another vertical picture 3 We don t want horizontal pictures to be paired 4 Preferably we assign all of the pictures to slides 5 We cannot assign a picture to two different slides. The candidates are chosen such that they have as many tags in common with the previously assigned slide as this heuristically improved the score. Brute forcing all options all possible horizontal combinations of 2 out of the vertical photos would take way too long and would still not give you the optimal solution. Greedy solution to the Hashcode problemI fell in love with optimization thanks to the Kaggle Christmas competitions. ", "id": "group16/greedy-solution-lb-400k", "size": "1375", "language": "python", "html_url": "https://www.kaggle.com/code/group16/greedy-solution-lb-400k", "git_url": "https://www.kaggle.com/code/group16/greedy-solution-lb-400k", "script": "defaultdict lru_cache cost sequence_cost collections functools numpy tqdm ", "entities": "(('As we', '1 2 vertical iteration'), 'create') (('Greedy solution', 'Kaggle Christmas thanks competitions'), 'fall') (('I', 'first time'), 'participate') (('5 We', 'two different slides'), 'assign') (('such gain', 'score'), 'com') (('exactly Here greedy solution', '2019'), 'solve') (('greedy solution', 'blog mainly post'), 'base') (('Brute', 'too long still optimal solution'), 'take') (('that', 'score'), 'read') (('you', 'score'), 'want') (('this', 'heuristically score'), 'choose') (('it', 'vertical photos'), 'note') ", "extra": "[]"}