{"name": "simple cnn classification model with acc of 86 ", "full_name": " h1 Train and validate CNN model for Invasive Ductal Carcinoma classification h3 Unfortunately I did not run this Notebook in Kaggle because it takes too long to train h3 Package information ", "stargazers_count": 0, "forks_count": 0, "description": "8546Epoch 00003 val_accuracy improved from 0. Data generator Define the path to the data set. 8603787560306688Sensitivity 0. 8473Epoch 2 52559 2559 ETA 0s loss 0. 8081856518455419Model has total accuracy of of 86 however model Sensitivity true positive rate could be improved. h52559 2559 13984s 5s step loss 0. Package information Anaconda contained packages numpy pandas sklearn matplotlib Aditional packages Tensorflow 2. 8596Epoch 00005 val_accuracy improved from 0. For more details check my GitHub. Alternatevly one can create create testing validating and training directories with 0 and 1 as subdirectories. com SaraKaliman BreastCancer_Classification blob master Cancer_clasifier_Accuracy. 3291 val_accuracy 0. 3278 val_accuracy 0. 3207 val_accuracy 0. The exact arhitecture of the CNN is decided upon exploratory analysis of train and validation errors on the substet of 30 000 and 20 000 images respecitly. The data used for training this model is dowlodaed from Kaggle and pre arranged using by using 20 of the data as Test set and the rest of the data as train 90 and validation set 10. 8546Epoch 3 52559 2559 ETA 0s loss 0. 3506 val_accuracy 0. Each layer if followed by a max pool kernel of size 2x2. 8574Epoch 00004 val_accuracy did not improve from 0. 8561Epoch 5 52558 2559. Found 99906 images belonging to 2 classes. 1000 1000 3593s 4s stepConfussion matrix is 66411 5040 8909 19546 Accuracy 0. 85771 saving model to model. Define number of Epochs the Batch Size and global randon seed Output Layer Check if the right classes are recognized by the DirectoryIterator Create the model Print model summary Define the optimizer Compile the model create the checkpoint for the model with best accuracy on validation set Train the model history my_cancer_model. Balanced accuracy is 80. h52559 2559 8710s 3s step loss 0. Unfortunately I did not run this Notebook in Kaggle because it takes too long to train. Train and validate CNN model for Invasive Ductal Carcinoma classification IDC accounts for the vast mayority of breast cancers and it is important to develop an accurate AI model for classification of Whole Slide Image WSI patches. fit train_generator validation_data validation_generator epochs NUM_EPOCHS callbacks checkpoint serialize model to JSON serialize weights to HDF5 Save model history with json save to json Plot the Loss as a function of number of Epochs Plot the Accuracy as a function of number of Epochs Run this cell if you want to load saved model and weights Predictions from the model on test set Create Confusion matrix Calculate and print acc spec sens. ETA 2s loss 0. 92946214888525F1 score 0. 86010 saving model to model. I hope this Notebook can help to understand that sometimes very simple CNN networks can give high accuracy and outperform more complicated arhitectures which also take long time to train. As regularization Batch Normalization is used and as activation function ReLu. 3348 val_accuracy 0. 8577Epoch 4 52559 2559 ETA 0s loss 0. 85457 saving model to model. ipynb file from my GitHub before. h52559 2559 10673s 4s step loss 0. 857712559 2559 10655s 4s step loss 0. 8601 Saving the model Save the model using joson weights in h5 a file and model history as DataFrame Plot the results Model loss and accuracy are ploted as number of Epochs The images and full Jupiter Notebook are available in my GitHub account https github. 7370147621651175BAC 0. png Validate the model on the test set Predicting the classes on the test set and calculating the confusion matrix. Here I present a very simply CNN model with just 2 convolutional layers. 6869091548058338Specificity 0. 23 and F1 score of 71. 8505Epoch 00002 val_accuracy improved from 0. 8 for a CNN model has been reported in the original publication. This small CNN arhitecture achives high accuracy after just 5 Epoche pointing to an advatage of simple network arhitectures in classification of IDC patches. Be sure that you had run arrange_dataset. Howwver F1 score is higher than in the publication by A. 8324Epoch 00001 val_accuracy improved from inf to 0. Train the model In each Epoch validation accuracy is checked and if it has imporved model weights are saved in hdf5 file Model Cancer_clasifier _________________________________________________________________ Layer type Output ShapeParam _________________________________________________________________input_1 InputLayer None 50 50 3 0 _________________________________________________________________conv2d Conv2D None 50 50 8 104 _________________________________________________________________batch_normalization BatchNo None 50 50 8 32 _________________________________________________________________activation Activation None 50 50 8 0 _________________________________________________________________max_pooling2d MaxPooling2D None 25 25 8 0 _________________________________________________________________conv2d_1 Conv2D None 25 25 16 2064 _________________________________________________________________batch_normalization_1 Batch None 25 25 16 64 _________________________________________________________________activation_1 Activation None 25 25 16 0 _________________________________________________________________max_pooling2d_1 MaxPooling2 None 12 12 16 0 _________________________________________________________________flatten Flatten None 2304 0 _________________________________________________________________dense Dense None 1 2305 __________________________________________________________________________________________________________________________________Total params 4 569Trainable params 4 521Non trainable params 48Epoch 1 52559 2559 ETA 0s loss 0. where F measure and balancedaccuracy were 71. First layer has only 8 filters with kernel size of 2x2 and the second 16 filters of 4x4 size. The balanced accuracy of 84. h52559 2559 18848s 7s step loss 0. 84733 saving model to model. 2First upgrade pip pip install upgrade pip Instal tensorflow pip install tensorflow Or update Tensorflow pip install upgrade tensorflow Define the CNN model Model has only 2 layers with 8 and 16 filters respectively. ", "id": "sarakaliman/simple-cnn-classification-model-with-acc-of-86", "size": "7306", "language": "python", "html_url": "https://www.kaggle.com/code/sarakaliman/simple-cnn-classification-model-with-acc-of-86", "git_url": "https://www.kaggle.com/code/sarakaliman/simple-cnn-classification-model-with-acc-of-86", "script": "Flatten sklearn.metrics tensorflow.keras.initializers tensorflow.keras.optimizers model_from_json tensorflow.keras.layers tensorflow.keras.preprocessing.image tensorflow.keras.callbacks Dropout tensorflow.keras.models Adam Conv2D numpy Input ModelCheckpoint confusion_matrix ImageDataGenerator matplotlib.pyplot Activation Dense tensorflow pandas BatchNormalization Model MaxPooling2D GlorotNormal Cancer_clasifier ", "entities": "(('8', 'original publication'), 'report') (('total accuracy', 'true positive rate'), 'have') (('images', 'Jupiter GitHub account https full github'), '8601') (('CNN small arhitecture', 'IDC patches'), 'achive') (('00003 val_accuracy', '0'), '8546Epoch') (('00004 val_accuracy', '0'), '8574Epoch') (('00005 val_accuracy', '0'), '8596Epoch') (('params', '4 569Trainable 4 521Non trainable params'), 'check') (('you', 'Create Confusion matrix Calculate'), 'serialize') (('First layer', 'second 16 4x4 size'), 'have') (('Here I', 'just 2 convolutional layers'), 'present') (('Alternatevly one', 'subdirectories'), 'create') (('CNN model Model', '8 filters'), 'upgrade') (('you', 'arrange_dataset'), 'be') (('png', 'confusion matrix'), 'Validate') (('exact arhitecture', '30 20 000 images'), 'decide') (('it', 'Kaggle'), 'run') (('pandas', 'matplotlib Aditional packages'), 'contain') (('which', 'also long time'), 'hope') (('it', 'Whole Slide Image WSI patches'), 'train') (('optimizer model', 'Train'), 'Check') (('regularization Batch Normalization', 'activation function ReLu'), 'use') (('Howwver F1 score', 'A.'), 'be') (('Test', '90 10'), 'be') (('Data generator', 'data set'), 'Define') (('00001 val_accuracy', '0'), '8324Epoch') (('00002 val_accuracy', '0'), '8505Epoch') ", "extra": "['test']"}