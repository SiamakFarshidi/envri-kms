{"name": "tilewise pipeline ", "full_name": " h2 Model h2 WSI Model h2 Normalization h2 Predict h1 Prediction ", "stargazers_count": 0, "forks_count": 0, "description": "get W_source if not provided deconvolve mask out keep in mind image is inverted If 2 stains third stain is cross product of 1st 2 channels calculated using complement_stain_matrix rgb_to_od compatibility od_to_rgb compatibility reshape output transform type Normalize new vector to have unit norm mask out irrelevant values get rid of NANs and infinities Principal components matrix Input pixels projected into the PCA plane Pixels above the magnitude threshold The angles The stain vectors The stain matrix Index corresponding to percentile find stains matrix from source image Get W_target Normalize to ideal stain matrix if none is provided Get W_target from target image Convolve source image StainsFloat with W_target return masked values using unnormalized image. ND array rolling 2D window array horizontal step abscissa number of columns vertical step ordinate number of rows nn. MaxPool2d 2 reshape output transform type return get W_source If Macenco method reorder channels in W_target and W_source as desired. MaxPool2d 2 nn. This is actually a necessary step in macenko s method since we re not guaranteed the order of the different stains. Model WSI Model Normalization Predict Prediction IF test_images is not exists we will use some train images. ", "id": "malyshevvalery/tilewise-pipeline", "size": "58", "language": "python", "html_url": "https://www.kaggle.com/code/malyshevvalery/tilewise-pipeline", "git_url": "https://www.kaggle.com/code/malyshevvalery/tilewise-pipeline", "script": "reduce __init__ get_percentile_vector _get_channel_order torch dbn _ordered_stack color_deconvolution_routine magnitude tensorflow.keras.preprocessing.image exclude_nonfinite Path _get_angles tensorflow.keras.models forward PandaModel(nn.Module) OpenSlide getsizeof numpy pathlib pad sda_to_rgb roll img_to_array Iterable tile_filter typing _reorder_stains Tuple nn get_principal_components skimage.measure load_img matplotlib.pyplot Tensor rgb_to_sda tqdm.notebook tensorflow pandas Union color_deconvolution tqdm stain_unmixing_routine argpercentile complement_stain_matrix torch.nn.functional Conv2dBlock(nn.Module) preprocess_input find_stain_index convert_matrix_to_image cv2.cv2 load_model convert_image_to_matrix normalize Model make_head Type block_reduce color_convolution sys tensorflow.keras.applications.resnet50 separate_stains_macenko_pca openslide rgb_separate_stains_macenko_pca ", "entities": "(('ND rolling 2D window step abscissa array array horizontal number', 'rows'), 'nn') (('we', 'train images'), 'Predict') (('we', 'different stains'), 'be') (('none', 'unnormalized image'), 'invert') ", "extra": "['test']"}