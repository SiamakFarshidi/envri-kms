{"name": "quickdraw with wavenet classifier ", "full_name": " h1 Overview h2 This Notebook h2 Fun Models h3 Next Steps h3 Model Parameters h1 Reading and Parsing h1 Stroke based Classification h1 WaveNet to Parse Strokes h1 Reading Point by Point h1 Submission h2 Show some predictions on the submission dataset ", "stargazers_count": 0, "forks_count": 0, "description": "We use the implementation here https github. com google tinyquickdraw it would actually be interesting to see how beneficial a transfer learning approach using that data as a starting point could be. com mjpyeon wavenet classifier blob master WaveNetClassifier. gif Reading Point by Point SubmissionWe can create a submission using the model Show some predictions on the submission dataset string list unwrap the list replace stroke id with 1 for continue 2 for new since 0 is no stroke pad the strokes with zeros only keep valid points probably needs to be more patient but kaggle time is limited short sequences make CudnnLSTM crash ugh only keep valid points flip y only keep valid points. Fun ModelsAfter the classification models we try to build a few models to understand what the WaveNet actually does. Here we experiment step by step to see how the prediction changes with each stop Next StepsThe next steps could be use more data to train include the country code different countries draw different things different ways more complex models Model ParametersHere we keep all of the parameters to make keeping track of versions and hyperparameter optimization easier Reading and ParsingSince it is too much data 23GB to read in at once we just take a portion of it for training validation and hold out testing. OverviewThe notebook is modified from one that was made for the Quick Draw Dataset https www. This NotebookThe notebook takes and preprocesses the data from the QuickDraw Competition step strokes and trains an a WaveNet style classifier wavenet in its original implemention is https deepmind. WaveNet to Parse StrokesThe model suggeted from the WaveNet article by DeepMind taken from site mentioned above is Suggested Model https storage. com deepmind live cms documents wavenet_conv_gif. This should give us an idea about how well the model works but leaves lots of room for improvement later Stroke based ClassificationHere we use the stroke information to train a model and see if the strokes give us a better idea of what the shape could be. com blog high fidelity speech synthesis wavenet is intended for synthesis but the dilated convolution approach can be applied. ", "id": "kmader/quickdraw-with-wavenet-classifier", "size": "1999", "language": "python", "html_url": "https://www.kaggle.com/code/kmader/quickdraw-with-wavenet-classifier", "git_url": "https://www.kaggle.com/code/kmader/quickdraw-with-wavenet-classifier", "script": "GlobalAveragePooling1D sklearn.metrics glob keras.layers keras.callbacks tensorflow.python.client top_3_accuracy get_Xy keras.preprocessing.sequence EarlyStopping Multiply read_batch keras.utils.np_utils numpy get_available_gpus keras.metrics ReduceLROnPlateau literal_eval Input residual_block ModelCheckpoint device_lib confusion_matrix LabelEncoder clear_output matplotlib.pyplot Activation pandas classification_report to_categorical AveragePooling1D Conv1D _stack_it Model ast Add sklearn.preprocessing LearningRateScheduler pad_sequences keras.models IPython.display top_k_categorical_accuracy ", "entities": "(('We', 'https here github'), 'use') (('that', 'Quick Draw Dataset https www'), 'modify') (('shape', 'better idea'), 'give') (('WaveNet', 'what'), 'ModelsAfter') (('too much 23 we', 'testing'), 'experiment') (('NotebookThe notebook', 'original implemention'), 'take') (('crash probably more patient limited short ugh', 'only valid points'), 'Point') (('Parse StrokesThe model', 'site'), 'be') (('convolution dilated approach', 'synthesis'), 'intend') (('transfer learning actually how approach', 'starting point'), 'be') ", "extra": "['patient', 'test']"}