{"name": "class activation mapping for covid 19 cnn ", "full_name": " h1 Introduction and Set up h1 Load the images h1 Visualize our images h1 Load in our saved model h1 Evaluate our model h1 Grad CAM Setup h1 Make grad CAM heatmap h1 Define superimposing function h1 Visualize class activation mapping ", "stargazers_count": 0, "forks_count": 0, "description": "We need to identify our last convolution layer. The weights of the model will be preserved as well. One of the hardest aspects of computational biology is maneuvering the differences between biological vs computational significance. Keras has an easy API to just load in previously trained models. Our original model from the pneumonia notebook was used as a binary classifier but our dataset has three classes. Before we run our notebook make sure to change the accelerator to TPU for quick training. Make grad CAM heatmapLet s define our grad CAM function. Grad CAM SetupCheck out Keras IO Grad CAM Code Example https keras. The Grad CAM visualizations may help pinpoint what differentiates these classes of images. cache filename to cache preprocessing work for datasets that don t fit in memory. Evaluate our modelWe correctly classify all of our testing images as well Even though we had a very limited number of images we could build a great model by loading in a pre trained model. From an initial analysis it may seem that COVID 19 and pneumonia images will be relatively similar given than many cases of COVID 19 cause pnuemonia. It helps visualize what the important parts of your image are for classification. We need to get the output of the last convolution layer. io examples vision grad_cam for the original source code. Looking at the rest of the images will give us a clearer picture. Having collaborative discussions with experts in both fields will help answer some of these questions. convert the path to a list of path components The second to last is the class directory convert the compressed string to a 3D uint8 tensor Use convert_image_dtype to convert to floats in the 0 1 range. In this notebook we re going to be using Grad CAM to see what parts of the image are important for the CNN when classifying between COVID 19 and pneumonia X rays. Introduction and Set upGradient weighted class activation mapping is a great way to better understand what s happening in your CNN. To start let s first look at the structure of our model. Since we only need the outputs of the layer and not the actual layer itself we can specify sequential_3 our 7th layer in oour model as the last convolution layer. Thankfully Keras API makes this change simple. 1 0 0 means NORMAL. For the Pnueumonia images at least for the 10 images shown here it seems that images are seen in a more holistic manner than the COVID 19 images by the model. We also one hot encode our labels i. com amyjang tensorflow pneumonia classification on x rays. Load the imagesDivide the set into training validation and testing sets. last convolution block of the model array is a float32 NumPy array We add a dimension to transform our array into a batch of size 1 180 180 3 First we create a model that maps the input image to the activations of the last conv layer Mark the classifying layers Second we create a model that maps the activations of the last conv layer to the final class predictions Then we compute the gradient of the top predicted class for our input image with respect to the activations of the last conv layer Compute activations of the last conv layer and make the tape watch it Compute class predictions This is the gradient of the top predicted class with regard to the output feature map of the last conv layer This is a vector where each entry is the mean intensity of the gradient over a specific feature map channel We multiply each channel in the feature map array by how important this channel is with regard to the top predicted class The channel wise mean of the resulting feature map is our heatmap of class activation For visualization purpose we will also normalize the heatmap between 0 1 Prepare image Generate class activation heatmap Rescale the original image We rescale heatmap to a range 0 255 We use jet colormap to colorize heatmap We use RGB values of the colormap We create an image with RGB colorized heatmap Superimpose the heatmap on original image. Define the function to get a NumPy repressentation of our image. The following functions will help us format our dataset into the necessary image label tuple for easy training. load the raw data from the file as a string This is a small dataset only load it once and keep it in memory. Visualize class activation mappingLet s compare what the model uses to classify COVID 19 X rays versus Pneumonia X rays. We also need to specifiy our classifying layers. That s not a problem because we can look at the structures of internal models as well. Define superimposing functionLet s superimpose the heatmap on the original image to visualize what the CNN marks as important and is used to classify the image. This may be biologically significant or it may be an artificial artifact of the model. Therefore before we train our model we have to pop our top level classifying layer and replace it with a 3 node dense layer. resize the image to the desired size. For our model this would be the convolution layer within our sequential_3 model in our summary above. The flatten layer and the layers that follow it does the classifying for us so we ll label layers 5 as our classifying layers. Visualize our images Load in our saved modelWe want to load in the model from the pneumonia notebook https www. However we ve only displayed 20 images here. Parts of the image that are redder on the rainbow spectrum are the more important parts of the image as defined by the CNN and purple parts of the image are less important. For this set of 10 COVID 19 images it seems that our model focuses on one lung more than the other. Because I used Sequential instead of Functional API for my pneumonia model in my other notebook the blocks that I used show us as nested Sequential models instead of as individual layers. The top two rows are COVID 19 images and the botton two rows are Pneumonia images. First let s define an early stopping callback. ", "id": "amyjang/class-activation-mapping-for-covid-19-cnn", "size": "4203", "language": "python", "html_url": "https://www.kaggle.com/code/amyjang/class-activation-mapping-for-covid-19-cnn", "git_url": "https://www.kaggle.com/code/amyjang/class-activation-mapping-for-covid-19-cnn", "script": "matplotlib.cm sklearn.model_selection numpy matplotlib.pyplot get_img_array KaggleDatasets tensorflow decode_img pandas kaggle_datasets keras process_path prepare_for_training superimposed_cam show_batch train_test_split make_gradcam_heatmap get_label ", "entities": "(('this', 'summary'), 'be') (('Looking', 'clearer picture'), 'give') (('biologically it', 'artificial model'), 'be') (('more important parts', 'purple image'), 'be') (('I', 'instead individual layers'), 'use') (('s', 'model'), 'start') (('However we', 've only 20 images'), 'display') (('model', 'more other'), 'seem') (('we', 'node 3 dense layer'), 'have') (('Having', 'questions'), 'help') (('images', 'model'), 'seem') (('We', 'convolution last layer'), 'need') (('weights', 'model'), 'preserve') (('parts', 'when COVID'), 'go') (('We', 'original image'), 'be') (('Keras', 'just previously trained models'), 'have') (('important parts', 'classification'), 'help') (('relatively many cases', '19 pnuemonia'), 'seem') (('This', 'memory'), 'load') (('One', 'computational significance'), 'maneuver') (('we', 'quick training'), 'make') (('grad CAM heatmapLet', 'CAM grad function'), 'make') (('we', 'pre trained model'), 'evaluate') (('we', 'internal models'), 's') (('dataset', 'three classes'), 'use') (('actual we', 'convolution last layer'), 'need') (('model', 'Pneumonia X rays'), 'compare') (('what', 'images'), 'help') (('class directory', '0 1 range'), 'convert') (('Define superimposing functionLet', 'CNN important image'), 'superimpose') (('great better what', 'CNN'), 'be') (('We', 'also classifying layers'), 'need') (('so we', '5 classifying layers'), 'do') (('First s', 'stopping early callback'), 'let') (('us', 'easy training'), 'help') ", "extra": "['test', 'lung']"}