{"name": "hardhat training ", "full_name": " h1 Implementasi Detektor h1 Image Mask Detector ", "stargazers_count": 0, "forks_count": 0, "description": "append label else labels_non_helmet. Implementasi DetektorUntuk implementasi jangan menjalankan semua cell diatas kecuali cell no 1 2 dan 3 Image Mask Detector impor pustaka yang diperlukan download imutils buat argparse class karena pada kaggle tidak dapat menginstall argparse untuk training model untuk implementasi model inisiasi deep learning hyperparameter learning rate epocsh batch size mengambil gambar dari dataset dan membaginya menjadi data images dan labels loop pada image paths ambil label dari image paths ambil image dan preprocess dengan ukuran 224x224 resize image scaling intensitas pixel 1 1 update data dan labels if labels helmet labels_helmet. fit trainX trainY validation_data testX testY epochs 20 batch_size 32 buat prediksi dari data testing cari indeks label dengan nilai prediksi terbesar argmax tampilkan hasil klasifikasi serialize model to disk plot training loss dan akurasi dalam bentuk grafik matplotlib load model face detektor load model face mask detector buat fungsi untuk mendeteksi mask frame video faceNet model pendeteksi face maskNet model pendeteksi mask buat blob lewatkan blob pada face detection initialize list dari face lokasi dan prediksi loop pada detections extract confidence probabilitas pada detections filter weak detections yang kurang dari confidence minimum buat bounding box pada face yang terdeteksi pastikan bounding box berada dalam frame extract face ROI Region of Interest convert dari BGR to RGB ordering resize 224x224 dan preprocess append face dan bounding box pada list yg telah dibuat run faces yang telah didapat ke face mask detector buat prediksi saat ada face terdeteksi buat batch predictions untuk mendeteksi semua face secara bersamaan return 2 tuple face locations dan nilai prediksi initialize file video ambil variable height width dan fps dari video simpan video output loop pada frame video deteksi face pada video dan tentukan apakah memakai masker atau tidak loop pada lokasi face yang terdeteksi unpack bounding box dan nilai prediksi tentukan label yang digunakan dan warna untuk label tersebut hijau dan merah sertakan nilai probabilitas pada label tampilkan label dan bounding box pada frame write video yang telah di proses ke output load image plt. imshow image plt. append label pastikan data dan labels dalam format numpy arrays print INFO helmet data len labels_helmet print INFO non helmet data len labels_non_helmet ubah label dari string ke integer dengan metode one hot encoding partisi data menjadi test 80 dan training 20 buat training image generator untuk augmentasi data proses fine tuning load MobileNetV2 network pastikan head FC layers tidak terpasang buat head model FC layers pasang headModel diatas baseModel hanya headModel yang akan di training freeze baseModel sehingga tidak ter training untuk freeze loop setiap layer pada base model compile model yang telah dibuat untuk model 2 classes gunakan binary_crossentropy untuk model 2 classes gunakan categorical_crossentropy training headModel H model. show buat blob dari image lewatkan blob pada face detection loop pada detections extract confidence probabilitas filter weak detections yang kurang dari confidence minimum buat bounding box pada face yang terdeteksi pastikan bounding box berada dalam frame extract face ROI Region of Interest convert dari BGR to RGB ordering resize 224x224 dan preprocess tentukan label yang digunakan dan warna untuk label tersebut hijau dan merah sertakan nilai probabilitas pada label tampilkan label dan bounding box pada frame. ", "id": "didiruh/hardhat-training", "size": "128", "language": "python", "html_url": "https://www.kaggle.com/code/didiruh/hardhat-training", "git_url": "https://www.kaggle.com/code/didiruh/hardhat-training", "script": "Flatten sklearn.metrics tensorflow.keras.applications.mobilenet_v2 tensorflow.keras.utils LabelBinarizer tensorflow.keras.optimizers tensorflow.keras.layers VideoStream tensorflow.keras.preprocessing.image ap np_utils Dropout tensorflow.keras.models Adam MultiLabelBinarizer AveragePooling2D detect_and_predict_mask numpy tensorflow.keras.applications Input img_to_array sklearn.model_selection ImageDataGenerator load_img matplotlib.pyplot MobileNetV2 Dense keras.utils classification_report imutils.video to_categorical imutils preprocess_input load_model Model sklearn.preprocessing paths train_test_split ", "entities": "(('dan preprocess tentukan label 224x224 yang', 'box pada frame'), 'show') (('di', 'output load image ke plt'), 'trainY') (('labels', '1 update data dan 1 labels'), 'menjalankan') (('untuk model 2 classes', 'gunakan categorical_crossentropy training headModel H model'), 'pastikan') ", "extra": "['test', 'bag']"}