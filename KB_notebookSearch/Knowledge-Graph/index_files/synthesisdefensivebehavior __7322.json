{"name": "synthesisdefensivebehavior ", "full_name": " h1 0 Introduction h3 Case No 1 h1 1 Data h1 3 Model h1 3 Results h2 Visual Investigation h2 How is Denver doing in our first example AND how are our policies doing h1 4 Summary and Future Outlook h1 1 Links and Resources ", "stargazers_count": 0, "forks_count": 0, "description": "78 of those entries are features correlated to specific players 2 are the ball absolute position and the last 2 features are the meta data. We use a sequence length of 15 frames and train with sequence overlap of 5 frames. The models are not fully converged and we assume that after a few more hours of training we are going to have a more precise model without any wiggeling. Seems like our model is a little bit stuttery and a few inches of yet it already captures the movement of players and their running destination. So you basically scatched the offensive play and you know how the defensive team is going to line up. Introduction in this report we present our analysis for the NFL Big Data Bowl Competition. Therefore our dataset consist of a sequence of demonstrations of the players positions and its meta data described in 2. The validation set contains 8. The problem is abstracted to learning the action a_k of agent k corresponding to policy pi_k as pi_k s_k a_k where s_k describes the state of agent k. 0686 Immitation Learning https arxiv. This is how the players actually moved before the pass was thrown Would you guessed the movement in a similar faishon Or your defensive coach We present the Average Defense Behavior Prediction Network which is able to simulate the average defensive team behavior. Below we can see how our algorithm is predicting the defensive sequence. With the current model it is not really useful to change meta data as number of down yards to go or player alignment as the details of the predicted position would vanish in the noise of the model yet I am confident future models in the Repository https github. to_numpy 1 Endzones fontname Arial fontname Arial 308 28 11 317 28 11 9 30 13 308 28 11 317 28 11 9 30 13 np. ResultsDue to a lag of time we did not train our networks till the validation set did not further improve or build ensamble models those will be found in the github repository belonging to this report. and create an updated dataset mathcal D _ star 3. Summary and Future OutlookWe trained a neural network witch is able to capture general movement of players. To prevent the model to deveate to much from the training distribution we use DAgger to train the estimator. com marcimarc1 NFL2021 DAgger https arxiv. 03121 Analysed player movement of the simulation Included Meta data of the game state to change behavior Case No. Overall we train with 62. The models discussed here hat a mean training error of 1. first we included the features of the defensive team sorted after following positions 1. This problem is described in Ross et al. 0686 and is a subarea of reinforcement learning Policy Learning. Links and Resources Repo https github. How is Denver doing in our first example AND how are our policies doing Well to answer this quesition just have a look into our models prediction for the respective playThe model seems to be a little bit more defensive then the players actually would be but it predicts the movement of the players for this simple formation well while in the previous more complicated play the defensive positions were predicted worse. DAgger is coded as 1. So if the defensive team looks i. All the presented features resulted in a feature vector length of 82. Above we can see the play from ball snap to forward pass. QB As the most positions are double staffed we filled up the positions in the appearing order. Let s compare the estimated trajectories from ball snap to Quarterback forward pass with the true trajectories to get a feeling for the accuracy of the predictions Visual Investigation Let s investigate the play where Keenum is passing deep left to Sutton and gained 25 yards. Denver is shown in yellow while the LA Chargers are defending in blue. Therefore We leveraged immitation learning to simulate defensive team behavior Paper https arxiv. For each player we had the features absolute position relative position to the ball velocity in x and y coordinates for each timestep we hand the model the information of features of each player down yards left for the offensive team to get the next touchdownWe do NOT use the orientation of the players as it is hard to predict the upper body orientation as it is somewhat uncorrelated to the movement and have not really improved the prediction as it also needed to be estimated. Model The problem of synthesising the defensive team can be formulated as predicting the next position of a set of previous positions of a single agent and collaborators. the input data consists of all the plays conducted with 13 tracked players and the football. And he would scribble something on the board which helps to adapt your offensive play. com marcimarc1 NFL2021 are going to be able to capture small differences in defender movement. DataFor training the model we used 14 weeks of the regular season game data 2 weeks for evaluation and one week for testing. 000 training samples a 15 frame sequences with 82 features. Update trainig Data with prediction from 1. Predict next action with estimator from the baseline dataset2. somewhat 2CB 2S 2DE 1DB the positions where filled as CB CB S S DB DE DE. DE The offensive team is sorted as follows 1. We assume that every single agents identity does not change over a single demonstration this means that the role does NOT change dynamically within the same sequence this reduces our prediciton problem as we do not need to match the agents with their corresponding models in training. This could look like After scatching your offensive play you basically need your defensive coach who tells you how he would defend it. 03121 As estimator we use LSTM Networks as they are especially matching the requirements of learning sequential information. 2m were not pretrained with the pure immitation dataset and were not fully converged at the time of submitting the report. 1Imagine you are the coach of the Denver Broncos your team is a few yards away of scoring a touchdown and you and your team are of course interested how the opposing teams defense is going to behave. The test set is the last week of the regualar season. Theoretically it is possible to scatch offensive plays and let the model generate the defensive player movement. This decentralized setting can be decomposed into minimizing mathcal L _ imitation sum_k mathrm E _s l pi_k s_k where l determines the loss function In our case its the L1 Loss. Train Estimator with dataset mathcal D _ star The main idea is to use the learned policy s own prediction in the construction of subsequent states thus simulating the test time performance during training. expand_dims trajectory teamInfo. One of the most interesting questions posed by the NFL was How does a defense react to certain types of offensive plays In this report we want to give a tool that can estimate how defense is reacting to specific offensive plays. The players are sorted according to their team and position. The training data are all the plays from ball snap until the bitter end. ", "id": "marcimarc/synthesisdefensivebehavior", "size": "7322", "language": "python", "html_url": "https://www.kaggle.com/code/marcimarc/synthesisdefensivebehavior", "git_url": "https://www.kaggle.com/code/marcimarc/synthesisdefensivebehavior", "script": "roll_out create_football_field multiprocessing tensorflow.keras.optimizers tensorflow.keras.layers Dropout Sequential SGD tensorflow.keras.models LSTM Adam matplotlib.patches collections Adagrad compute_speed numpy sqrt GRU TimeDistributed get_sequences_from_game print_function roll_out_val matplotlib.pyplot RMSprop Activation Dense tensorflow pandas tensorflow.keras.backend Counter BatchNormalization Pool load_model __future__ matplotlib.lines matplotlib.animation math keras.models ", "entities": "(('models', '1'), 'hat') (('network neural witch', 'players'), 'train') (('presented features', '82'), 'result') (('DE offensive team', '1'), 'sort') (('where Keenum', '25 yards'), 'let') (('players', 'team'), 'sort') (('problem', 'single agent'), 'model') (('we', 'wiggeling'), 'converge') (('2', 'specific players'), 'be') (('how defense', 'specific offensive plays'), 'be') (('which', 'team average defensive behavior'), 'be') (('training data', 'bitter end'), 'be') (('little bit a few it', 'players'), 'seem') (('2 m', 'report'), 'pretraine') (('double we', 'appearing order'), 'QB') (('how algorithm', 'defensive sequence'), 'see') (('how he', 'it'), 'need') (('which', 'offensive play'), 'scribble') (('it', 'really prediction'), 'have') (('main idea', 'training'), 'Estimator') (('they', 'sequential information'), '03121') (('we', 'estimator'), 'prevent') (('we', 'NFL Big Data Bowl Competition'), 'introduction') (('we', 'training'), 'assume') (('Therefore We', 'team behavior Paper https leveraged defensive arxiv'), 'immitation') (('test set', 'last regualar season'), 'be') (('Above we', 'forward pass'), 'see') (('I', 'Repository https confident future github'), 'vanish') (('player Analysed movement', 'behavior Case'), '03121') (('how defensive team', 'basically offensive play'), 'scatche') (('LA Chargers', 'blue'), 'show') (('problem', 'agent k.'), 'abstract') (('those', 'report'), 'resultsdue') (('We', '5 frames'), 'use') (('input data', '13 tracked players'), 'consist') (('defensive positions', 'previous more complicated play'), 'be') (('first we', 'positions'), 'include') (('how opposing teams', 'course'), '1Imagine') (('where l', 'L1 Loss'), 'decompose') (('we', 'one testing'), 'train') (('model', 'player defensive movement'), 'be') ", "extra": "['test']"}