{"name": "cat dog classifiction using keras from scratch ", "full_name": " h1 Convolution Neural Network in Keras h3 Content h3 Importing Required Module h2 Data Spliting h2 Creating CNN model h3 Basics of CNN h2 Training Classifier h2 Visualization h2 Accuracy and Prediction h2 Future Work h4 you found this notebook helpful or you just liked it some upvotes would be very much appreciated That will keep me motivated ", "stargazers_count": 0, "forks_count": 0, "description": "Max pooling Layer A pooling layer is another building block of a CNN. Droput It is use to avoid overfitting by droping some random parameters form layer. Pooling layer operates on each feature map independently. Architecture Creating a convolution network of alternate convolution and max pooling network. In a dense layer every node in the layer is connected to every node in the preceding layer. Convolution Neural Network in KerasThis kernel is created form scratch and will show how to build CNN. If it is one we are moving it one pixel each time and recording the value adding up all the multiplied values. Dense Dense fully connected layers which perform classification on the features extracted by the convolutional layers and downsampled by the pooling layers. 3 x 3 feature detector is commonly used but other sizes can be used. Using dropout to avoid overfitting. ImageDataGenerator use for generating batches of tensor image data with real time data augmentation. creating sequential model of CNN creating convolution layer creating maxpool layer creating input vector for dense layer create dense layer or fully connected layer use to avoid overfitting by droping some parameters generate image use for visualization calling functions to create data. Creating list to store image name labels matrix pixel value Defining Funtion for creating data which takes data from both test and training test. Its function is to progressively reduce the spatial size of the representation to reduce the amount of parameters and computation in the network. Content Data Preprocessing Data Spliting Building CNN classifier Training Classiifer Visualization Future Work Importing Required ModuleDefining training and testing directory. Convolution Layer The aim of convolution operation is to reduce the size of an image by using feature detectors that keep only the specific patterns within the image. Stride is the number of pixels with which we slide the detector. Many feature detectors are used and the algorithm finds out what is the optimal way to filter images. Two dense layer of 128 and 1 neuron. Training Classifier Visualization Accuracy and Prediction Future Work Improving Architecture Increasing Data Size Using hyper parameter Using Pretrained model such VGG you found this notebook helpful or you just liked it some upvotes would be very much appreciated That will keep me motivated working with mainly resizing images dealing with arrays dealing with directories mixing up or currently ordered data that might lead our network astray in training. Converting string label into 0 1 using LabelEncoder Data Spliting Creating CNN model Basics of CNN CNN A convolutional neural network CNN is a type of artificial neural network used in image recognition and processing that is specifically designed to process pixel data. The data will be looped over in batches. ", "id": "akashkankariya10/cat-dog-classifiction-using-keras-from-scratch", "size": "2562", "language": "python", "html_url": "https://www.kaggle.com/code/akashkankariya10/cat-dog-classifiction-using-keras-from-scratch", "git_url": "https://www.kaggle.com/code/akashkankariya10/cat-dog-classifiction-using-keras-from-scratch", "script": "sklearn.metrics keras.preprocessing.image keras.layers image              # generate image train_test_split random shuffle                         # mixing up or currently ordered data that might lead our network astray in training. np_utils shuffle                         # mixing up or currently ordered data that might lead our network Dropout                   # use to avoid overfitting by droping some parameters seaborn numpy Convolution2D             # creating convolution layer Dense                     # create dense layer or fully connected layer Sequential                # creating sequential model of CNN sklearn.model_selection ImageDataGenerator confusion_matrix LabelEncoder image matplotlib.pyplot keras.utils create_data Flatten                   # creating input vector for dense layer MaxPooling2D              # creating maxpool layer keras.preprocessing sklearn.preprocessing keras.models ", "entities": "(('Dense fully connected which', 'pooling layers'), 'Dense') (('that', 'pixel specifically data'), 'convert') (('It', 'layer'), 'droput') (('pooling layer', 'building CNN'), 'Max') (('that', 'astray training'), 'Accuracy') (('Content Data Preprocessing Data Spliting Building CNN classifier Training Classiifer Visualization', 'Future Work ModuleDefining training directory'), 'require') (('we', 'multiplied values'), 'move') (('Pooling layer', 'feature map'), 'operate') (('Convolution Neural Network', 'form how CNN'), 'create') (('CNN', 'data'), 'create') (('that', 'image'), 'Layer') (('we', 'detector'), 'be') (('node', 'preceding layer'), 'connect') (('function', 'network'), 'be') (('algorithm', 'optimal images'), 'use') (('which', 'test test'), 'create') ", "extra": "['test']"}