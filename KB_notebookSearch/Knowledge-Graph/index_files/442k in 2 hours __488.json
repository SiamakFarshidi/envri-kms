{"name": "442k in 2 hours ", "full_name": " h2 Optimizing a photo album from Hash Code 2019 h2 Stages h2 Arrange photos h2 Post processing h2 Create submission ", "stargazers_count": 0, "forks_count": 0, "description": "Optimizing a photo album from Hash Code 2019I think it is not necessary to implement greedy search through all images. com huikang 441k in 11 mins for more details start from photo with most tags so we can easily match photos with more tags with photos with less tags we do not need to consider between pairs we have found an optimal match early stopping in the search for a paired photo penalise if the total number of tags is odd to encourage the total number of tags around 22. Instead I tried to split all photos into several subsequences and optimized them individually. Stages arrange photos post processing Arrange photos Post processingOur submission consists of separate subsequences and we never thought about how these subsequences fit together. Create submission define some models and functions slide size distribution score number of slides loss subsequence post processing trying to reduce number of subsequences all subsequences must remain perfect Match vertical photos Please see https www. Here we shuffle the submission to get maximum score. ", "id": "egrehbbt/442k-in-2-hours", "size": "488", "language": "python", "html_url": "https://www.kaggle.com/code/egrehbbt/442k-in-2-hours", "git_url": "https://www.kaggle.com/code/egrehbbt/442k-in-2-hours", "script": "lru_cache dataclass __and__ List __hash__ from_string max_score dataclasses post_process _reverse sequence_lost_score defaultdict match_vertical_photos __repr__ check_sequence show shuffle collections enum numpy calc_lost_score read_file create_submission lazy_calc_score sequence_max_score typing Photo stitch functools matplotlib.pyplot __or__ pandas Union insert __len__ calc_score tqdm sequence_score create_sub_sequences __sub__ create_photo_sequences _do_insert Enum Orientation(Enum) _apply __str__ _improve calc_max_score _do_shuffle Callable ", "entities": "(('Here we', 'maximum score'), 'shuffle') (('subsequences', 'https perfect Match vertical www'), 'define') (('how subsequences', 'separate subsequences'), 'arrange') (('it', 'images'), 'think') (('Instead I', 'them'), 'try') (('total number', '22'), 'com') ", "extra": "[]"}