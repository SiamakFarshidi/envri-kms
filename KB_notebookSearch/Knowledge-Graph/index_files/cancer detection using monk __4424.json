{"name": "cancer detection using monk ", "full_name": " h1 Monk Library h1 Table of contents h1 Details on the dataset h1 Install Monk h1 Quick mode training h1 Run validation h1 Running inference on test images h1 Train Validation Accuracy Curve h1 Train Validation Loss Curve h1 Repeating using pytorch backend with a different model ", "stargazers_count": 0, "forks_count": 0, "description": "jpeg. txt Select the requirements file as per OS and CUDA version Imports To use mxnet gluon backendfrom gluon_prototype import prototype To use pytorch backendfrom pytorch_prototype import prototype Creating and managing experiments Provide project name Provide experiment name For a specific data create a single project Inside each project multiple experiments can be created Every experiment can be have diferent hyper parameters attached to itThis creates files and directories as per the following structureworkspace Cancer Detection Using MONK Project name can be different Using Keras Backend Experiment name can be different experiment state. org cancer cancer basics lymph nodes and cancer. txt If using Kaggle uncomment the following command cd monk_v1 installation Misc pip install r requirements_kaggle. com c histopathologic cancer detection dataThe modified dataset contains images of original dataset is renamed cropped to central 32 32 region converted to gray and. It is cropped because in the original dataset a positive label indicates that the center 32x32px region of a patch contains at least one pixel of tumor tissue. jpeg img2. json output logs All training logs and graphs saved here models all trained models saved here Quick mode training Using Default Function dataset_path model_name num_epochsDataset folder structureparent_directory CANCER img1. com Tessellate Imaging monk_v1 Monk is an opensource low code tool for computer vision and deep learning Monk features low code unified wrapper over major deep learning framework keras pytorch gluoncv syntax invariant wrapper Monk Enables users to create manage and version control deep learning experiments users to compare experiments across training metrics users to quickly find best hyper parameters Table of contents DATASET data Install Monk install Creating and Managing experiments cm Details on the dataset The original DATASET is https www. com Tessellate Imaging monk_v1. Monk Library https github. Start Training Read the training summary generated once you run the cell and training is completed Using pytorch backend Read the summary generated once you run this cell. csv of the original dataset. and so on Normal img1. txt Select the requirements file as per OS and CUDA version when using a local system or cloud cd monk_v1 installation Linux pip install r requirements_cu9. html Install Monk git clone https github. Need not save intermediate epoch weights Start Training Read the training summary generated once you run the cell and training is completed Compare experiments Invoke the comparison class Create a project. and so on Validating the trained classifierLoad the experiment in validation mode Set flag eval_infer as TrueLoad the validation dataset Run validation Running inference on test imagesLoad the experiment in inference mode Set flag eval_infer as TrueSelect image and Run inference Train Validation Accuracy Curve Train Validation Loss Curve Repeating using pytorch backend with a different model Creating and managing comparison experiments Provide project name Add experiments Run Analysis Visualize and study comparison metricsTraining Accuracy CurvesTraining Loss CurvesValidation Accuracy CurvesValidation loss curvesTraining time curvesBest Validation accuracies Monk Using keras backend Read the summary generated once you run this cell. More information on Histopathologic Cancer Detection Identify metastatic tissue in histopathologic scans of lymph node sections https www. git If using Colab install using the commands below cd monk_v1 installation Misc pip install r requirements_colab. 20 of train images of original dataset is in validation folder80 of train images of original dataset is in train folderAll images of test folder of original dataset is in test folderBoth train and validation folder of this modified dataset has CANCER and Normal folderimages are put to this CANCER and Normal folder based on the label provided in the train_labels. ", "id": "sinchubhat/cancer-detection-using-monk", "size": "4424", "language": "python", "html_url": "https://www.kaggle.com/code/sinchubhat/cancer-detection-using-monk", "git_url": "https://www.kaggle.com/code/sinchubhat/cancer-detection-using-monk", "script": "keras_prototype compare Image compare_prototype pytorch_prototype IPython.display prototype ", "entities": "(('requirements', 'when local system'), 'select') (('Normal folderimages', 'train_labels'), 'be') (('Cancer Detection', 'MONK Project Using name'), 'select') (('you', 'cell'), 'start') (('json output', 'num_epochsDataset folder structureparent_directory CANCER img1'), 'log') (('More information', 'lymph node sections https www'), 'Identify') (('Misc pip', 'r requirements_kaggle'), 'txt') (('center 32x32px region', 'tumor tissue'), 'crop') (('original DATASET', 'dataset'), 'com') (('comparison class', 'project'), 'save') (('dataset', 'central 32 32 region'), 'modify') (('monk_v1 installation Misc cd pip', 'r requirements_colab'), 'git') (('you', 'cell'), 'classifierLoad') ", "extra": "['test']"}