{"name": "identification and segmentation of nuclei in cells ", "full_name": " ", "stargazers_count": 0, "forks_count": 0, "description": "Methods for assessing nuclear size and shape typically involve identifying the nucleus via traditional image segmentation approaches. pap smear tests and the diagnosis of cervical cancer. Here we demonstrate a deep learning approach for the identification and segmentation of nuclei from images of cells. Identification and Segmentation of Nuclei From Images of Cells A Deep Learning Approach The nucleus is an organelle present within all eukaryotic cells including human cells. Abberant nuclear shape can be used to identify cancer cells e. com keegil keras u net starter lb 0 277 notebook and https www. As such the quantitative assessment of nuclear size and shape has important biomedical applications. 2009 Link 3 https www. com gaborvecsei basic pure computer vision segmentation lb 0 229. Below is an implementation of an OpenCV image segmentation task using the same images of nuclei in cells. gov pubmed 15343274 Link 2 Webster M. gov pubmed 26940517 Step 1 Import Libraries Step 2 Explore Data Image segmentation can easily be performed via the use of the Python library OpenCV but we want to use deep learning to develop an even more accurate result. the predicted segmentation mask for X_train is most similar to the provided solution Y_test. Likewise a growing body of literature suggests that there is some connection between the shape of the nucleus and human disease states such as cancer and aging. For more information about the relationship between nuclear shape and human disease please refer to the following resources Link 1 https www. com kmader nuclei overview to submission notebook and https www. Step 3 Load Data Step 4 Visualize Training Data Step 5 Define Helper Functions Step 6 Evaluate Convolutional Network Step 7 Display Result and Compare to Training Data Step 8 Evaluate Convolutional Network with U Net Architecture Step 9 Display Result and Compare to Training Data The results using the U Net convolutional network are most accurate i. Remember to enable GPU Otsu s thresholding after Gaussian filtering Plot Here Set some parameters Get train and test IDs Get and resize train images and masks Get and resize test images try to add loss to see the loss learning curve summarize history for loss Define IoU metric RLE encoding for submission use dilations to get a slightly larger field of view the final processing Threshold predictions Perform a sanity check on some random training samples Perform a sanity check on some random validation samples Build U Net model Fit model Submit Results for OpenCV Approach Submit Results for OpenCV Approach Submit Results for Deep Learning Approaches Create list of upsampled test masks Create submission DataFrame. Step 10 Save and Submit Results Credit Many functions are adaptations from https www. ", "id": "paultimothymooney/identification-and-segmentation-of-nuclei-in-cells", "size": "2208", "language": "python", "html_url": "https://www.kaggle.com/code/paultimothymooney/identification-and-segmentation-of-nuclei-in-cells", "git_url": "https://www.kaggle.com/code/paultimothymooney/identification-and-segmentation-of-nuclei-in-cells", "script": "keras.layers dice_coef dice_coef_loss Lambda chain keras.callbacks layers concatenate_images skimage.io matplotlib.pyplot SIMPLE ModelCheckpoint plotPredictions Model UpSampling2D keras.layers.pooling plot_learning_curve threshold skimage.transform Activation keras.models imread_collection keras to_categorical keras.utils.vis_utils initializers MaxPooling2D Dropout rle_encoding imread models os.path tensorflow pandas keras.layers.merge join saveResults plotKerasLearningCurve openCVdemo plot_model keras.preprocessing.image numpy ImageDataGenerator BatchNormalization on_epoch_end UNET keras.layers.convolutional ReduceLROnPlateau resize skimage.morphology Conv2D Conv2DTranspose MetricsCheckpoint(Callback) keras.layers.core imshow plotTrainData Flatten prob_to_rles train_test_split callbacks mean_iou Dense Callback backend as K tqdm Sequential backend sklearn.model_selection EarlyStopping load_model concatenate Input keras.utils apply_morphology label __init__ itertools ", "entities": "(('Threshold final processing predictions', 'test masks Create submission upsampled DataFrame'), 'remember') (('nucleus', 'human cells'), 'identification') (('segmentation predicted mask', 'most provided solution'), 'be') (('quantitative assessment', 'important biomedical applications'), 'have') (('Likewise growing body', 'such cancer'), 'suggest') (('we', 'even more accurate result'), 'pubmed') (('results', 'U Net convolutional network'), 'Result') (('Results Step 10 Save Many functions', 'https www'), 'Credit') (('Here we', 'cells'), 'demonstrate') (('Methods', 'image segmentation traditional approaches'), 'involve') (('Abberant nuclear shape', 'cancer cells e.'), 'use') "}