{"name": "tutorial how to build a movie recommender system ", "full_name": " h1 CONTENT BASED FILTERING h3 Table of contents h1 Acquiring the Data h1 Preprocessing h1 Content Based recommendation system h4 Add movieId to input user h3 Advantages and Disadvantages of Content Based Filtering ", "stargazers_count": 0, "forks_count": 0, "description": "Using regular expressions to find a year stored between parentheses We specify the parantheses so we don t conflict with movies that have years in their titles Removing the parentheses Removing the years from the title column Applying the strip function to get rid of any ending whitespace characters that may have appeared Every genre is separated by a so we simply have to call the split function on Copying the movie dataframe into a new one since we won t need to use the genre information in our first case. Lets download the dataset. Let s start by extracting the genre table from the original dataframe With the input s profile and the complete list of movies and their genres in hand we re going to take the weighted average of every movie based on the input profile and recommend the top twenty movies that most satisfy it. We ll only need the actual genre table so let s clean this up a bit by resetting the index and dropping the movieId title genres and year columns. In our case we re going to try to figure out the input s favorite genres from the movies and ratings given. Next let s look at the ratings dataframe. Filtering out the movies from the input Resetting the index to avoid future issues Dropping unnecessary issues due to save memory and to avoid issues Dot produt to get weights The user profile Now let s get the genres of every movie in our original dataframe And drop the unnecessary information Multiply the genres by the weights and then take the weighted average Sort our recommendations in descending order Just a peek at the values The final recommendation table. We also drop unnecessary columns for the input to save memory space. For every row in the dataframe iterate through the list of genres and place a 1 into the corresponding column Filling in the NaN values with 0 to show that a movie doesn t have that column s genre Drop removes a specified row or column from a dataframe Filtering out the movies by title Then merging it so we can get the movieId. Now here s the recommendation table Now Let s write our recommendation to a csv file. In this case we store every different genre in columns that contain either 1 or 0. With that let s also split the values in the __Genres__ column into a __list of Genres__ to simplify future use. To download the data we will use wget to download it from IBM Object Storage. This can be achieved by applying Python s split string function on the correct column. PreprocessingFirst let s get all of the imports out of the way Now let s read each file into their Dataframes Let s also remove the year from the __title__ column by using pandas replace function and store in a new __year__ column. Now we re ready to start learning the input s preferences To do this we re going to turn each genre into weights. Content Based recommendation systemNow let s take a look at how to implement __Content Based__ or __Item Item recommendation systems__. Since keeping genres in a list format isn t optimal for the content based recommendation system technique we will use the One Hot Encoding technique to convert the list of genres to a vector where each column corresponds to one possible value of the feature. It s implicitly merging it by title. Dropping information we won t use from the input dataframe Final input dataframe If a movie you added in above isn t here then it might not be in the original dataframe or it might spelled differently please check capitalisation. Feel free to add more in Just be sure to write it in with capital letters and if a movie starts with a The like The Matrix then write it in like this Matrix The. We re going to start by learning the input s preferences so let s get the subset of movies that the input has watched from the Dataframe containing genres defined with binary values. This encoding is needed for feeding categorical data. Using this we can recommend movies that satisfy the user s preferences. Add movieId to input userWith the input complete let s extract the input movie s ID s from the movies dataframe and add them into it. This technique attempts to figure out what a user s favourite aspects of an item is and then recommends items that present those aspects. These systems have become ubiquitous and can be commonly seen in online stores movies databases and job finders. We can do this by using the input s reviews and multiplying them into the input s genre table and then summing up the resulting table by column. CONTENT BASED FILTERINGRecommendation systems are a collection of algorithms used to recommend items to users based on information taken from the user. Let s begin by creating an input user to recommend movies to Notice To add more movies simply increase the amount of elements in the __userInput__. In this notebook we will explore Content based recommendation systems and implement a simple version of one using Python and the Pandas library. We won t be needing the timestamp column so let s drop it to save on memory. Table of contents Acquiring the Data Preprocessing Content Based Filtering Acquiring the DataTo acquire and extract the data simply run the following Bash scripts Dataset acquired from GroupLens http grouplens. Advantages and Disadvantages of Content Based Filtering Advantages Learns user s preferences Highly personalized for the user Disadvantages Doesn t take into account what others think of the item so low quality item recommendations might happen Extracting data is not always intuitive Determining what characteristics of the item the user dislikes or likes is not always obvious Courtesy to IBM https labs. Let s also store this dataframe in another variable since genres won t be important for our first recommendation system. org datasets movielens. We can achieve this by first filtering out the rows that contain the input movie s title and then merging this subset with the input dataframe. ai Please upvote if you like this or find this notebook useful thanks. Now we have the weights for every of the user s preferences. Every row in the ratings dataframe has a user id associated with at least one movie a rating and a timestamp showing when they reviewed it. This operation is actually a dot product between a matrix and a vector so we can simply accomplish by calling Pandas s dot function. Dataframe manipulation library Math functions we ll only need the sqrt function so let s import only that Storing the movie information into a pandas dataframe Storing the user information into a pandas dataframe Head is a function that gets the first N rows of a dataframe. 1 shows that a movie has that genre and 0 shows that it doesn t. This is known as the User Profile. ", "id": "mdmahmudferdous/tutorial-how-to-build-a-movie-recommender-system", "size": "5170", "language": "python", "html_url": "https://www.kaggle.com/code/mdmahmudferdous/tutorial-how-to-build-a-movie-recommender-system", "git_url": "https://www.kaggle.com/code/mdmahmudferdous/tutorial-how-to-build-a-movie-recommender-system", "script": "math matplotlib.pyplot sqrt pandas numpy ", "entities": "(('s', '_ Based _'), 'let') (('Now we', 'preferences'), 'have') (('input', 'binary values'), 'go') (('that', 'preferences'), 'recommend') (('user', 'IBM https always obvious labs'), 'personalize') (('where column', 'feature'), 'since') (('we', 'weights'), 're') (('Matrix', 'Matrix'), 'be') (('Next s', 'ratings dataframe'), 'let') (('genres', 'recommendation first system'), 'let') (('Bash scripts simply following Dataset', 'grouplens'), 'run') (('that', '1'), 'store') (('s', '_ _ column'), 'let') (('that', 'dataframe'), 'function') (('This', 'correct column'), 'achieve') (('when they', 'it'), 'have') (('we', 'movies'), 'go') (('you', 'notebook'), 'ai') (('encoding', 'categorical data'), 'need') (('input ID', 'it'), 'add') (('s', 'future use'), 'split') (('We', 'column'), 'do') (('that', 'input dataframe'), 'achieve') (('CONTENT BASED FILTERINGRecommendation systems', 'user'), 'be') (('we', 'movieId'), 'remove') (('so s', 'memory'), 'win') (('that', 'most it'), 'let') (('it', 't.'), 'show') (('Now s', 'recommendation final table'), 'filter') (('we', 'IBM Object Storage'), 'download') (('Now s', 'csv file'), 's') (('input', 'memory space'), 'drop') (('systems', 'movies databases'), 'become') (('that', 'aspects'), 'attempt') (('so s', 'title movieId genres'), 'need') (('it', 'differently capitalisation'), 'information') (('we', 'dot simply function'), 'be') (('s', '_ _ userInput _ _'), 'let') (('we', 'Python'), 'explore') (('we', 'first case'), 'specify') "}