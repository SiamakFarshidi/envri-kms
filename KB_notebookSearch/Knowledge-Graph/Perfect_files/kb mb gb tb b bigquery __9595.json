{"name": "kb mb gb tb b bigquery ", "full_name": " h2 The advent of Big Data h4 Lets first check what the columns of the dataset contain h3 Firing the Simplest Query checking total rows in the file h3 Checking number of users in the dataset h4 Using UNION DISTINCT h4 Using UNION ALL h3 Unique Devices in the dataset h3 Most Used Camera Devices h3 Camera Aperature h3 Labels h2 User with Highest Clicks h3 Camera s used By the Top Photographer h2 Mapping All The Users Dataset Inspiration h3 Path Of Totality h2 Mapping Photos Taken By Hours h2 Thank You ", "stargazers_count": 0, "forks_count": 0, "description": "The only difference between the above and previous query is that we have added a WHERE statement which is used to filter out mobiles and DSLR s using the is_mobile True False condition. Above we have it in the Select Statement. It is nothing but a query inside another query. So we need to first append or concat all the 3 files and then find the distinct users in them. Now we cannot directly query BigTable using Pandas. UNION ALL It extracts the user column from all the 3 files and directly appends all the 3 files. To overcome this analytics incapability Google has come up with its great product BIGQUERY. xd Using UNION DISTINCT Using UNION ALLIt is evident that UNION ALL takes less time than UNION DISTINCT. If you like this notebook Do upvote it. Path Of TotalityThe path of totality in layman terms is the line along which the solar eclipse motion is followed. lol So we have located all the contributors of the project and can see how many of them were in and away from the path of totallityClick on the points to get additional informtion. We can do this in a few ways. I will also try to explain the SQL queries wherever needed. A simple but tedious way is running the same query with different file and adding the output of all 3 queries. The problem is that Pandas loads the entire dataset into the RAM. This operation is done twice and thus we have a list of all unique users. Thank You Loading packages for analytics work Loading packages for BigQuery work. Google BigQuery is a cloud based big data analytics web service for processing very large read only data sets. Lets see average photos takn by each user Unique Devices in the dataset Most Used Camera DevicesWow Iphone 6 is the highest used device for capturing photos also higher as compared to DSLR s. I would highly encourage you to please this BigQuery Starter Notebook by Megan Risdal https www. So we need to first extract the desired data from the pool of data available convert it into Pandas Dataframe and then explore and analyse it. And also a single user from UK maybe. cy the y coordinate center of the detected circle in pixels exposure time The exposure time of the photograph represented as a ratio vision_labels list of labels predicted for the image by Google Cloud Vision is_mobile whether the photo was taken on a mobile phone totality whether the photo is predicted to be in totality by its GPS lat lon image_datetime Firing the Simplest Query checking total rows in the file So the first file has 35294 rows. We will using a Folium Map for doing so. Some DSLR s aperture are even more than 40 whereas the range of aperature for mobile phones is generally between 2 and 3 with a few exceptions going above 5. The above map plots the users by their location of photographers. Lets see what the query does. Now let s check the most used camera s by the is_mobile column i. As far as I know the USA map the states of Wyoming Oregon Georgia South Carolina Illinois and many more fall under the path of totality. It is evident that the maximum number of photos were taken in the hours 17 and 18. e we do not know if a user eg Alex s information is just present in file 1 or also in file 2 and 3. BigQuery has support for SQL syntax thus we will directly query and extract data from the BigTable using SQL and carry forward analysis using Pandas. UNION DISTINCT It extracts the user column from all the 3 files. cx the x coordinate center of the detected circle in pixels. The query works by first executing each of the 3 subqueries and then the output of each of the subqueries are added and the final sum is calculated. The green points are for users who clicked photos using their cellphones whereas the red points are those who clicked photos using professional camera s. e lets check the most famous mobile camera and DSLR camera companies. The solution to this problem is SQL. But for a lazy person like me lets fire multiple queries in a single go. User with Highest Clicks Camera s used By the Top Photographer Mapping All The Users Dataset Inspiration As stated in the dataset the inspiration of the dataset is to map the locations of the project contributors i. As the world steadily becomes more connected with an ever increasing number of electronic devices that s only set to grow over the coming years. com mrisdal safely analyzing github projects popular licenses. radius the radius of the detected circle in pixels. Thus processing large datasets takes time. BigQuery was designed for analyzing data on the order of billions of rows using a SQL like syntax. We will locate each photographer on the map and check how many were in and out of the Path of Totality. We can use SQL to transform the data into something manageable by pandas before loading it in memory. Now our local computers are not capable of loading and processing such huge chunks of data. If u liked the notebook Do Upvote. So let us check total rows in all the 3 files. Our current output of data is roughly 2. Thanks a lot Megan for the notebook Now coming to the Notebook I will try to explore the Eclipse MegaMovie Dataset which is a collection of photos submitted by a group of volunteers from locations across the United States during the August 21 2017 total solar eclipse. Above we use 2 seperate queries to get two separate dataframes for top mobile cameras and DSLR s. We will see 2 such queries and also check the time both of them take to execute. Also we cannot load complete databases into Pandas. storage_uri The URI at which the photo can be downloaded from Google Cloud Storage model The model of the camera make Company of the camera uploaded_date The date and time at which the photo was uploaded to the Megamovie website camera_datetime The time at which the photo was taken according to the Camera clock image_datetime The date and time at which the photo was taken as provided by GPS data or imputed from the camera_datetime datetime_repaired True if the image_datetime field was imputed from the camera_datetime and the timezone adjusted by the lat lon lat Latitude at which photo was taken equatorial_mount Whether the camera was mounted equatorially true or not false lon Longitude at which the photo was taken State the US state that the photo was taken in image_type The file format of the image width Width of photo in pixels height Height of the photo in pixels detected_circle. Almost all photgraphers were in the path os totality sparring a few who were at the south western and north eastern parts of USA. But we have 3 files in the dataset. We can clearly see the Path of Totality from the north west part of USA to south eastern part. We then sort the data using the Count column in descending order. 5 quintillion bytes a day. Mapping Photos Taken By HoursThe above animation shows the loactions of photos taken by hours. I hope this notebook proved to be a good source for getting started with BigQuery. It runs on the Google Cloud Storage infrastructure and can be accessed with a REST oriented application program interface API. It is mostly a straight line but it looks curved due to the earth s curved surface. Checking number of users in the datasetWe are not sure if a user s information is just limited to a single file i. Lets first check what the columns of the dataset contain id Unique identifier for each photo. The query with the least time should be preferred as Time is Money. Camera AperatureIt is evident that the aperature s of the professional DSLR s have a very high range as compared to mobile camera s. A prime reason for this is surely the compact size and its great camera quality. Coming to the query we first extract the user and model columns from the files then groupby the data extracted using the models and get a count of users using the devices. SQL is very efficient slicing and dicing the data but lacks the power of analytics as that in Pandas. The advent of Big Data 90 of the data in the world today has been created in the last two years alone. A subquery can appear in a SELECT FROM or WHERE statement. It then group s by the users and finally the count of unique users is given. upload_session_id Identifier that joins all photos uploaded in a single session by a single user user A numeric ID which is unique for each user image_bucket The bucket the image was assigned to megamovie if the uploader was a member of the Megamovie Photo Team. As expected the algorithm generated keywords related to celestial bodies eclipse colur of the sky etc. Note Always remember the proper sequence of a SQL Query FROM ON WHERE GROUP BY HAVING SELECT DISTINCT ORDER BYSo the above query is a type of Nested Query or Subquery which is very common in SQL. LabelsLet s check the labels or keywords that the Computer Vision Algorithm from Google generated by processing the image. This transition of BigTable data into Pandas Dataframe is very easy and is just 2 3 steps procedure. I remember loading a 1GB file once into my local machine for analysis and my machine was very slow in processing it poor i3. Copy the link in another tab from the popup to see the image. Before appending two outputs it checks for distinct users. We can see that Iphones are competing well with the DSLR s. ", "id": "ash316/kb-mb-gb-tb-b-bigquery", "size": "9595", "language": "python", "html_url": "https://www.kaggle.com/code/ash316/kb-mb-gb-tb-b-bigquery", "git_url": "https://www.kaggle.com/code/ash316/kb-mb-gb-tb-b-bigquery", "script": "IPython.display BigQueryHelper animate numpy seaborn animation mpl_toolkits.basemap STOPWORDS imread bq_helper matplotlib.patches matplotlib.pyplot IFrame pandas Basemap scipy.misc color rc matplotlib WordCloud HTML display folium wordcloud ", "entities": "(('USA', 'totality'), 'map') (('eclipse solar motion', 'which'), 'be') (('final sum', 'subqueries'), 'work') (('who', 'camera professional s.'), 'be') (('Computer Vision Algorithm', 'image'), 'check') (('Thus processing', 'time'), 'take') (('twice thus we', 'unique users'), 'do') (('We', 'descending order'), 'sort') (('maximum number', 'hours'), 'be') (('who', 'USA'), 'be') (('SQL', 'Pandas'), 'be') (('Also we', 'Pandas'), 'load') (('I', 'Megan Risdal https www'), 'encourage') (('It', 'query'), 'be') (('Now we', 'Pandas'), 'query') (('user eg Alex information', '1 also file'), 'know') (('columns', 'Unique photo'), 'check') (('It', 'application program interface REST oriented API'), 'run') (('mostly straight it', 'curved surface'), 'be') (('e lets', 'most famous mobile camera'), 'check') (('aperature s', 'mobile camera s.'), 'be') (('subquery', 'WHERE statement'), 'appear') (('We', 'memory'), 'use') (('So we', 'them'), 'need') (('UNION ALL', 'UNION DISTINCT'), 'be') (('Google BigQuery', 'data only sets'), 'be') (('even more than range', '5'), 'be') (('query', 'Time'), 'prefer') (('It', 'directly 3 files'), 'union') (('Photos', 'hours'), 'show') (('how many', 'Totality'), 'locate') (('machine', 'very poor i3'), 'remember') (('it', 'distinct users'), 'before') (('We', 'south eastern part'), 'see') (('above map', 'photographers'), 'plot') (('thus we', 'Pandas'), 'query') (('advent', 'today last two years'), 'create') (('algorithm', 'etc'), 'expect') (('transition', 'Pandas Dataframe'), 'be') (('first desired data', 'then it'), 'need') (('that', 'only coming years'), 'become') (('inspiration', 'project contributors i.'), 'user') (('both', 'them'), 'see') (('Above we', 'Select Statement'), 'have') (('photo', 'pixels detected_circle'), 'uri') (('information', 'file just single i.'), 'be') (('simple way', '3 queries'), 'run') (('I', 'SQL also queries'), 'try') (('how many', 'additional informtion'), 'lol') (('which', 'DSLR True False condition'), 'be') (('BigQuery', 'syntax'), 'design') (('finally count', 'unique users'), 's') (('Pandas', 'RAM'), 'be') (('which', 'very SQL'), 'remember') (('Iphones', 'DSLR well s.'), 'see') (('Most Used Camera DevicesWow Iphone', 'DSLR also s.'), 'see') (('which', 'August 21 2017 total solar eclipse'), 'thank') (('we', 'devices'), 'extract') (('Now local computers', 'data'), 'be') (('UNION It', '3 files'), 'DISTINCT') (('Now s', 'is_mobile column i.'), 'let') (('prime reason', 'this'), 'be') (('So us', '3 files'), 'let') (('Above we', 'DSLR s.'), 'use') (('notebook', 'good BigQuery'), 'hope') (('com mrisdal', 'popular licenses'), 'analyze') (('Google', 'product great BIGQUERY'), 'come') (('uploader', 'Megamovie Photo Team'), 'Identifier') (('So first file', '35294 rows'), 'cy') "}