{"name": "build your own blockchain ", "full_name": " h1 Overview h1 Show the chain h1 Validate the Chain h1 Edit a block h1 Delete a block ", "stargazers_count": 0, "forks_count": 0, "description": "Now that we re able to create a genesis block we need a function that will generate succeeding blocks in the blockchain. And of course we need to add the succeeding blocks. We ll create a function that simply returns a genesis block to make things easy. Show the chainNow we can show each item in the chain Validate the ChainWe can validate the chain by checking the hash at each point Edit a blockHere we can try to edit the data in one of the blocks and see if it is still valid Delete a blockNow we can try to delete a block and see what happens Define what a Snakecoin block is Generate genesis block Manually construct a block with index zero and arbitrary previous hash Create the blockchain and add the genesis block Show the blockchain Generate all later blocks in the blockchain How many blocks should we add to the chain after the genesis block Add blocks to the chain Tell everyone about it replace the original so we can try something else remove the 5th item. Now we can create our blockchain In our case the blockchain itself is a simple Python list. In SnakeCoin we re going to store both. The first element of the list is the genesis block. But with that being said a question arises how does the first block in the blockchain get there Well the first block or genesis block is a special block. We need to start adding blocks to the actual chain. When new blocks hash information from previous blocks the integrity of the blockchain increases with each new block. com crypto currently lets build the tiniest blockchain e70965a248b from Gerald Nash but wrapped in a Kaggle Kernel to make it easier to view and modify. Awesome We have our block structure but we re creating a blockchain. OverviewThe code here is based on the gist https gist. Oh and the data can be anything you want. Like Bitcoin each block s hash will be a cryptographic hash of the block s index timestamp data and the hash of the previous block s hash. We can do this with a for loop. That s the majority of the hard work. Because SnakeCoin is the tiniest blockchain we ll only add 20 new blocks. com aunyks 8f2c2fd51cc17f342737917e1c2582e2 and story https medium. And to help ensure integrity throughout the blockchain each block will have a self identifying hash. It has also been fixed to work with Python 3 We ll start by first defining what our blocks will look like. This block is of index 0 and it has an arbitrary data value and an arbitrary value in the previous hash parameter. In many cases it s added manually or has unique logic allowing it to be added. In blockchain each block is stored with a timestamp and optionally an index. This function will take the previous block in the chain as a parameter create the data for the block to be generated and return the new block with its appropriate data. If we didn t do this it would be easier for an outside party to change the past and replace our chain with an entirely new one of their own. As I mentioned earlier each block requires information from the previous block. This chain of hashes acts as cryptographic proof and helps ensure that once a block is added to the blockchain it cannot be replaced or removed. ", "id": "kmader/build-your-own-blockchain", "size": "2809", "language": "python", "html_url": "https://www.kaggle.com/code/kmader/build-your-own-blockchain", "git_url": "https://www.kaggle.com/code/kmader/build-your-own-blockchain", "script": "validate_blockchain __repr__ create_genesis_block warn hashlib hash_block next_block __init__ datetime warnings Block ", "entities": "(('there first block block', 'blockchain'), 'say') (('tiniest we', 'only 20 new blocks'), 'be') (('it', 'manually unique logic'), 'add') (('we', 'else 5th item'), 'show') (('OverviewThe code', 'gist https here gist'), 'base') (('block', 'appropriate data'), 'take') (('blocks', 'first what'), 'fix') (('it', 'blockchain'), 'help') (('we', 'blockchain'), 'have') (('block', 'timestamp'), 'store') (('We', 'actual chain'), 'need') (('outside party', 'own'), 'be') (('first element', 'list'), 'be') (('it', 'Kaggle Kernel'), 'build') (('block', 'hash'), 'have') (('hash', 'previous hash'), 'be') (('When new blocks', 'new block'), 'hash') (('we', 'succeeding blocks'), 'need') (('blockchain', 'case'), 'create') (('things', 'genesis simply block'), 'create') (('0 it', 'hash arbitrary previous parameter'), 'be') (('that', 'blockchain'), 'now') (('earlier block', 'previous block'), 'require') "}