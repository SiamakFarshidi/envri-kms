{"name": "pandas slow xyz fast parallel geometry features ", "full_name": " h1 Summary h1 New geometric features h1 Benchmark h2 Manipulating xyz files h2 Multiprocessing h1 Feature Evaluation h1 Generating the feature files ", "stargazers_count": 0, "forks_count": 0, "description": "flatness_metric is now changed to s_3 2 s_1 2 s_2 2 if the molecule is flat this number should be close to 0 and there is no leq 3 atoms molecule problem like the old one where np. bond_angle_plane and bond_angle_axis are unchanged from BigIronSphere s original kernel which represents the angles of the bonds with the plane and principle eigenvector respectively. But we have 7 million rows which you guys can compute. Recall that the higher this metric the less flat a molecule is. Let s start with a molecule that has a high flatness metric. Generating the feature filesNow let us generate all the features for train and test. thinness_metric is s_2 2 s_3 2 s_1 2 if the molecule is thin and long then this number should be close to 0. com scaomath parallelization of coulomb yukawa interaction even more Lastly multiprocessing is applied the groupby iterator to speed up the computation even more. nan has to be filled. Now onto the same routine. Denote these 3 singular values by s_i i 1 2 3 sorted from the biggest to the smallest. If you like to skip the explanation and directly the use the features just concat the features with the train and test dataframe you are good to go. Now let us optimize the code above by reading xyz files instead of reading the position from the struct dataframe. com borisdee how to easy visualization of molecules to show some feature examples. The first three features are all relative which may describe some invariant geometric features no matter a molecule is big or small. Feature EvaluationNow we can examine some of the results. The least flat molecule is location 0. it is a tetrahedron so. Here I changed it a little bit so we can have more features generated. I would like to demostrate how to make use of the xyz files provided by the competition organizers. For example you can speed up the bonds calculation https www. Simple example using 1 molecule dsgdb9nsd_133885 which has 16 atoms. com bigironsphere molecular geometry feature engineering eda in which he computed four extremely good features for small molecules and he used HOW TO Easy Visualization of Molecule https www. Manipulating xyz filesThe code above takes about 53 seconds to run for about 70 molecules 1800 rows of the train. 25s which is 250 times speed up. Yet here we want to utilize all 4 CPU cores without considering the setup overhead the speed is about triple of the original which should take only about 4 minutes for setting up and processing for all the training data. BenchmarkWe benchmark the code using first 100 molecule from the structures which contains about 70 molecules in the train. Except reading coordinates from the xyz files the main changes I have made are the bonds features are now extracted using groupby so that the for loop does not query molecule name that is not the dataframe molecule names that are in structures may not be in the train which further makes the execution slower. Yet when applying to the full training dataframe it takes about 8 minutes to generate all the features. In the original kernel SVD function only returns the first eigenvector which represents the principle direction of the molecule the direction with the most variance in terms of coordinates distribution. roundness_metric is s_2 s_1 if the molecule is flat or can be inscribed in a ball this number should be close to 1. The most flat as well as thinnest and longest molecule is train location 292. SummaryThis kernel is based on a seriously underrated kernel by BigIronSphere Molecular Geometry Feature Engineering EDA https www. Select a molecule Get atomic coordinates Get atomic symbols Display molecule quick PCA via singular value decomp obtain plane with minimum sum distance from nuclei obtain structure and bond information for each molecule number of constituent atoms nuclei coords principal axis of molecular alignment major axis vector obtain flatness metric and plane angles for binds if nuclei 3 calculate best fitting 2D plane calculate distances of each atom from plane obtain angle subtended by each atomic bind and plane obtain atom index numbers for this bond get 3D coords bond vector angle subtended by bond vector and molecule plane standardise to degrees 3 calculate best fitting 2D plane calculate distances of each atom from plane obtain angle subtended by each atomic bind and plane obtain atom index numbers for this bond get 3D coords bond vector angle subtended by bond vector and molecule plane standardise to degrees 3 calculate best fitting 2D plane calculate distances of each atom from plane obtain angle subtended by each atomic bind and plane obtain atom index numbers for this bond get 3D coords bond vector angle subtended by bond vector and molecule plane standardise to degrees 90 not needed but somewhat easier to visualise obtain atom index numbers for this bond get 3D coords bond vector angle subtended by bond vector and molecule principal axis standardise to degrees 90 not needed but somewhat easier to visualise use 4 CPU cores process each data frame combine chunks with transformed data into a single training set use 4 CPU cores process each data frame combine chunks with transformed data into a single training set. New geometric featuresFor an n times 3 matrix which represents a point cloud we can have 3 singular values by doing SVD. MultiprocessingThe same code takes about 0. In BigIronSphere s original kernel computing the only 4 features for all train and test data takes 13 hours I profiled his code offline and found that the culprit is pandas Everytime a huge dataframe is queried it takes hundreds more time than reading an xyz from structures folder. ", "id": "scaomath/pandas-slow-xyz-fast-parallel-geometry-features", "size": "4210", "language": "python", "html_url": "https://www.kaggle.com/code/scaomath/pandas-slow-xyz-fast-parallel-geometry-features", "git_url": "https://www.kaggle.com/code/scaomath/pandas-slow-xyz-fast-parallel-geometry-features", "script": "svd Atoms get_plane get_features PCA_SVD multiprocessing numpy.linalg matplotlib.pyplot view ase tqdm_notebook pandas norm Pool get_geometric_features tqdm numpy ", "entities": "(('Manipulating xyz filesThe code', '1800 train'), 'take') (('matter molecule', 'invariant geometric features'), 'be') (('we', 'SVD'), 'featuresfor') (('us', 'train'), 'let') (('it', 'structures folder'), 'take') (('that', 'high flatness metric'), 'let') (('test you', 'train'), 'concat') (('you guys', 'which'), 'have') (('Now us', 'struct dataframe'), 'let') (('number', 'atoms molecule leq 3 old one'), 'change') (('then number', '0'), 'be') (('same code', 'about 0'), 'take') (('further execution', 'train'), 'extract') (('which', 'coordinates distribution'), 'return') (('Feature EvaluationNow we', 'results'), 'examine') (('it', 'features'), 'take') (('SummaryThis kernel', 'BigIronSphere Molecular Geometry Feature Engineering EDA https www'), 'base') (('Lastly even more multiprocessing', 'computation'), 'parallelization') (('data frame', 'training single set'), 'select') (('number', '1'), 'be') (('which', 'plane eigenvector'), 'be') (('Denote', 'smallest'), 'sort') (('I', 'competition organizers'), 'like') (('dsgdb9nsd_133885 which', '16 atoms'), 'example') (('little bit we', 'more features'), 'change') (('you', 'bonds calculation https www'), 'speed') (('which', 'training data'), 'want') (('which', 'train'), 'benchmark') (('he', 'Molecule https www'), 'eda') "}