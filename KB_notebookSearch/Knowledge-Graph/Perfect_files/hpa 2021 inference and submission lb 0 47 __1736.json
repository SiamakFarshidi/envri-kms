{"name": "hpa 2021 inference and submission lb 0 47 ", "full_name": " h1 Project Overview h1 Cell Segmentation ", "stargazers_count": 0, "forks_count": 0, "description": "list_physical_devices GPU if gpus try tf. Project OverviewFor this competition the majority of my time was spent on the inference. py L591 rgb g ryb_g per model above rgb g ryb_g per model above dt for hpa_image to remove the small pseduo nuclei this is to remove the cell borders signal from cell mask. com qubvel efficientnet blob 8984e988ecccd9c3a15be2e793991845619a8a26 efficientnet model. Cell SegmentationFor the competition I used the cell segmentator and then a modified version of the label_cell function from this notebook. See get_image_masks and create_cell_images functions for those details. org api_docs python tf config experimental set_memory_growth. To save overall time and GPU resources my inference only predicted 2 images before submission. findContours is 2 then we are using either OpenCV v2. Tuned for segmentation hpa images exclude the green area first this part is to use green channel and extend cell label to green channel benefit is to exclude cells clear on border but without nucleus mt is the mitchondria er is the endoplasmic reticulum nu is the nuclei high is the protein if the length the contours tuple returned by cv2. 4 v4 beta or v4 official if the length of the contours tuple is 3 then we are using either OpenCV v3 v4 pre or v4 alpha otherwise OpenCV has changed their cv2. findContours return signature yet again and I have no idea WTH is going on return the actual contours array cover and crop image contour cell to maximum size for model. This was combine with my OpenCV code to pull images for my different models. With the cell segmentation processes taking up a significant amount of GPU I used 2 different methods to download my classification models for the competition. linear algebra data processing CSV file I O e. com samusram even faster hpa cell segmentation. com rdizzl3 hpa segmentation masks no internet and associated datasets which are inputs for this work. the most important augmentation proved to be a random crop that acts like a zoom inot the features of the images. logical_and with some revision to replace this func. Both can be found in the keras docuementation https www. set_virtual_device_configuration gpus 0 tf. VirtualDeviceConfiguration memory_limit 1024 except RuntimeError as e print e Here are the different view points that a supplied to each image for the model training and the inference prediction. com c hpa single cell image classification overview evaluation check input mask convert input mask to expected COCO API input RLE encode mask compress and base64 encoding For nuclei For full cells post processing Protein model image if modeltype rgb image tf. read_csv Stop Tensorflow From Eating All The Memory Currently memory growth needs to be the same across GPUs Memory growth must be set before GPUs have been initialized https github. The initial cell segmentation utilized this notebook. 25 padding to True which gave the cells the best masking. Test time augmentation was important for accurate prediction of the images. append image len cells Using weights estimates. resize to ratio of desired size Create padding for final square image at desired size Create top cover where white is what we want black otherwise Draw contour white over img blank black all 3 channels Code obtained form competition main page https www. Noting that the key to the segmentator is setting the scale factor to 0. ", "id": "akimball002/hpa-2021-inference-and-submission-lb-0-47", "size": "1736", "language": "python", "html_url": "https://www.kaggle.com/code/akimball002/hpa-2021-inference-and-submission-lb-0-47", "git_url": "https://www.kaggle.com/code/akimball002/hpa-2021-inference-and-submission-lb-0-47", "script": "_get_noise_shape create_cell_images filters __wsh weighted_predictions label_cell add_neglabel keras.preprocessing.image numpy skimage img_to_array image_predictions_exp clipimgtosquare scipy.ndimage print_cell _mask data_aug_exp layers label_nuclei keras.backend tqdm feature segmentation util tensorflow transform grab_contours _mask as coco_mask hpacellseg.cellsegmentator __fill_holes matplotlib.pyplot typing normalization get_image_masks backend pandas closing skimage.morphology disk hpacellseg.utils morphology pycocotools tensorflow.keras image_predictions create_cell_masks (binary_erosion build_image_names image_prediction_string measure FixedDropout(layers.Dropout) flatten_list_of_lists ", "entities": "(('GPU inference', 'submission'), 'predict') (('This', 'different models'), 'combine') (('Here', 'model training'), 'memory_limit') (('Code', 'page https form competition main www'), 'create') (('Cell I', 'notebook'), 'SegmentationFor') (('Test time augmentation', 'images'), 'be') (('random that', 'images'), 'prove') (('which', 'best masking'), 'padding') (('modeltype rgb image', 'Protein model image'), 'convert') (('key', '0'), 'note') (('then we', 'OpenCV v2'), 'use') (('WTH', 'model'), 'signature') (('Both', 'keras docuementation https www'), 'find') (('this', 'cell mask'), 'py') (('high tuple', 'cv2'), 'be') (('com', 'hpa cell even faster segmentation'), 'samusram') (('GPU gpus', 'tf'), 'list_physical_device') (('v4 otherwise OpenCV', 'cv2'), 'beta') (('GPUs', 'https initialized github'), 'Stop') (('org api_docs', 'config experimental'), 'python') (('majority', 'inference'), 'project') (('I', 'competition'), 'use') (('which', 'work'), 'com') (('cell initial segmentation', 'notebook'), 'utilize') "}