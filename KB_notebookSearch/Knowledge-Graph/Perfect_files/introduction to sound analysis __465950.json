{"name": "introduction to sound analysis ", "full_name": " h1 Introduction h3 Thanks to This Great Channel https www youtube com channel UCZPFjMe1uRSirmSpznqvJfQ h2 Content h1 Imports h1 What is Sound h2 What is Waveform h2 Simple Sine Wave h3 Coding Simple Sine Waves h2 Pitch h3 MIDI Notes h3 Coding Mapping Pitch to Frequency h2 Complex Waves Multiple sine waves h3 Coding Complex Waves h1 Analyzing Sound Data h2 Converting Analog Signal to Digital Signal h2 Preparing Files h2 Analyzing h2 Signal Domains h3 Fast Fourier Transform FFT h3 Spectrogram h2 MFCCs h1 Deep Learning with Audio h2 Preparing Data h2 ANN h3 Results h2 CNN h3 Results h1 Conclusion h3 Here is a notebook about generating audio with GANs https www kaggle com mrhippo audio generation with simple gans h3 My other kernels https www kaggle com mrhippo notebooks ", "stargazers_count": 0, "forks_count": 0, "description": "com mrhippo data science notes6 deep learning cnn We have to add a 4th dimention for keras Results Back to Introduction 0 You can increase accuracy by changing parameters. Thanks to This Great Channel https www. com mrhippo audio generation with simple gans My other kernels https www. In complex waves if peaks overlap in new wave the amplitude increases. com fizzbuzz beginner s guide to audio data https github. com mrhippo data science notes5 deep learning ann Results Back to Introduction 0 As you can see our model is not that good and has overfitting. But in this example our file recorded in 44100 Hz so when we change it we are facing with deformation normally there is no sample rate limit in nature. We will give MFCCs of audios as input. 4 Fast Fourier Transform FFT 3. MFCCs Back to Introduction 0 MFCC is a complicated topic and we will not cover everything here but in machine learning it is very important. Let s zoom in to our FFT Spectrogram Back to Introduction 0 As you can see most of the spectogram colored with black low decibels. If a peak and a dip overlap then they cancel eachother. In STFT we are taking just a small frame of signal. Fast Fourier Transform FFT Back to Introduction 0 As you can see our FFT is symetrical. You can define that period yourself but there is a common sampling rate 44100 Hz. Here is a notebook about generating audio with GANs https www. That pattern named octave. If you do not know what is CNN you can check out this kernel https www. If there is something wrong with this kernel please let me know in the comments. 1 Simple Sine Wave 2. Briefly it enables us to distinguish different instruments easily. In Spectrograms we have time on the x axis frequency on the y axis and decibels as colors. To do that we are using a technique called Fast Fourier Transform FFT. com rafalencar1997 Audio_Generation data analysis and visualization keras and scikitlearn deep learning 21 33 45 57 69 81 93 105 we will use saxophone samples 44100Hz in dataset the smaple file we will use the original sample rate of recording applying logarithm Path Load Read and Resample the audio Random offset Padding Rescale Data to be in range rangeMin rangeMax. Time Domain We saw that while analyzing the dataset. If you do not know what is ANN you can check out this kernel https www. com mrhippo notebooks References https www. This is an issue of FFT so we can cut the second half because we do not need it. Frequency Frequency is the reverse of period 1 T T is period. MIDI Notes Back to Introduction 0 Before pitch we have to understand MIDI Notes. So let s code it again with log. For all information we are using Spectrograms. Time Frequency Domain As you can see we are loosing information both of these techniques. We will choose 10 different instruments and train different models. 41 Spectrogram 3. As you can see our sample file s playing speed and time length changed. 32 Complex Waves Multiple sine waves 2. Frequency Domain In frequency domain we have frequency on the x axis and magnitude on the y axis. ANN Back to Introduction 0 In first part we will use a standard ANN. Preparing Data Back to Introduction 0 There are 41 different instruments we will use Hi hat Trumpet Cello Clarinet Snare_drum Flute Bass_drum Electric_piano Acoustic_guitar and Violin_or_fiddle. We will use Freesound General Purpose Audio Tagging Challenge https www. But we cannot convert continuous things to digital because to do that we need infinite memory. In audio processing you can use sampling rates like 22050 or 16000 Hz. Let s look at the features of sine wave 1. org wiki Sound When we are talking we are generating sound waves and these waves have compressions and rarefactions. Formula of multiple sine waves Coding Complex Waves Back to Introduction 0 Canceling Waves Analyzing Sound Data Back to Introduction 0 Converting Analog Signal to Digital Signal Back to Introduction 0 In real world sound is continuous. Frequency and amplitude comparisons Formula of a sine wave Coding Simple Sine Waves Back to Introduction 0 Not that necessary but here is how cosine wave look like Pitch Back to Introduction 0 We do not perceive frequency in a linear way we percieve frequency in a logarithmic way. In sampling there is a term named sampling rate. What is Waveform Back to Introduction 0 We will learn 2 types of waveforms Simple single sinewaves and Complex multiples sinewaves. Most of the time in machine learning we set the number of MFCCs to 13. Simple Sine Wave Back to Introduction 0 Sine wave is the simplest form of wave. If you look at the keyboard you can see a pattern that repeats itself. So after taking STFTs we are projecting them to ceate Spectrograms. com playlist list PL wATfeyAMNqIee7cH3q1bh4QJFAaeNv0 https www. So while converting them to digital we are taking samples from that wave using a certain period. Note Normally if sample rate is higher we should get a smoother result. As input we will give raw audio files. com c freesound audio tagging dataest for this kernel. To achive Spectrograms we use Short Time Fourier Transform STFT. Period Period is the distnace between 2 peaks. So store analog signals as digital signals we are using a technique called sampling. MIDI is a way to represent notes as numbers. 3 Signal Domains 3. 3 Results 4. If it is higher then amplitude is higher too. Reference https en. Next part we will train CNN on MFCCs. We have time on the x axis and amplitude on the y axis. Zooming into the sample As you can see this is a complex wave. Deep Learning with Audio Back to Introduction 0 In our dataset there are samples that are taken from different instruments. Since analog waves are continuous we cannot get every sample of a analog wave because there are infinite samples. 31 Coding Mapping Pitch to Frequency 2. 41 Analyzing Sound Data 3 Converting Analog Signal to Digital Signal 3. Conclusion Back to Introduction 0 We learned how to process sound. 2 Results 4. Phase The first peak of waves crest s time. 2 Analyzing 3. 31 Conclusion 5 Imports Back to Introduction 0 librosa is a python package for music and audio analysis. Preparing Files Back to Introduction 0 In the dataset we have a csv file that shows files labels wich instrument we will use that csv file for loading a spesific instrument s files. Mapping pitch to frequency formula Coding Mapping Pitch to Frequency Back to Introduction 0 Complex Waves Multiple sine waves Back to Introduction 0 Complex waves are made of multiple waves. 3 MIDI Notes 2. 5 Deep Learning with Audio 4 Preparing Data 4. In every octave 12 notes frequency doubles. Signal Domains Back to Introduction 0 There are 3 different domains for signal. Introduction In this kernel we will learn the basics of sound theory how to use librosa sound waves and training neural networks with sound. Amplitude How high perturbation in air pressure goes. Note Larger amplitude louder 1. 4 Coding Complex Waves 2. We will use Saxophone as a example instrument. CNN Back to Introduction 0 In this part we will use CNN. If you go up or down you will face with deformations. com channel UCZPFjMe1uRSirmSpznqvJfQ Content Imports 1 What is Sound 2 What is Waveform 2. Analyzing Back to Introduction 0 Let s listen to our sample. The reason of that is we do not perceive sound in a linear way as we plotted but in a logarithmic way. In an ocatve there are 12 notes. Let s play with the sample rate and see what is happening. It has time on the x axis MFCC coefficents on the x axis. It provides the building blocks necessary to create music information retrieval systems. What is Sound Back to Introduction 0 In physics sound is a vibration that propagates as an acoustic wave through a transmission medium such as a gas liquid or solid. 1 Preparing Files 3. 2 Coding Simple Sine Wave 2. ", "id": "mrhippo/introduction-to-sound-analysis", "size": "465950", "language": "python", "html_url": "https://www.kaggle.com/code/mrhippo/introduction-to-sound-analysis", "git_url": "https://www.kaggle.com/code/mrhippo/introduction-to-sound-analysis", "script": "wavfile keras.layers keras.models train_test_split IPython.display to_categorical rescale ReLU keras.utils.np_utils numpy seaborn Adam Dropout load_train_data BatchNormalization Dense LeakyReLU sine_wave keras.optimizers normalization matplotlib.pyplot Sequential pitch_to_frequency sklearn.model_selection pandas Model Input scipy.io cos_wave ", "entities": "(('We', 'different models'), 'choose') (('waves', 'compressions'), 'Sound') (('We', 'Freesound General Purpose Audio Tagging Challenge https www'), 'use') (('Period Period', '2 peaks'), 'be') (('MIDI', 'numbers'), 'be') (('we', 'smoother result'), 'note') (('We', 'example instrument'), 'use') (('How high perturbation', 'air pressure'), 'Amplitude') (('then they', 'eachother'), 'cancel') (('sample file', 'speed'), 'change') (('we', 'logarithmic way'), 'is') (('Here notebook', 'GANs https www'), 'be') (('what', 'sample rate'), 'let') (('we', 'both techniques'), 'Domain') (('that', 'gas such liquid'), 'be') (('0 s', 'sample'), 'let') (('we', 'spesific instrument files'), 'prepare') (('we', 'CNN'), 'CNN') (('we', 'colors'), 'have') (('we', 'Spectrograms'), 'project') (('Random', 'range rangeMin rangeMax'), 'com') (('you', 'deformations'), 'face') (('crest', 'waves'), 'phase') (('me', 'comments'), 'let') (('we', 'technique'), 'do') (('Briefly it', 'different instruments'), 'enable') (('we', 'Spectrograms'), 'use') (('that', 'itself'), 'see') (('31 Conclusion 5 Imports', 'python music'), 'be') (('we', 'infinite memory'), 'convert') (('0 We', 'waveforms'), 'be') (('we', 'analog wave'), 'get') (('T 1 T', 'period'), 'be') (('we', 'certain period'), 'take') (('amplitude', 'increases'), 'in') (('It', 'x axis'), 'have') (('we', 'y axis'), 'Domain') (('0 41 different we', 'Trumpet Cello Clarinet Snare_drum Flute Bass_drum Electric_piano hat Acoustic_guitar'), 'prepare') (('we', 'MIDI Notes'), 'note') (('you', '22050'), 'use') (('we', 'logarithmic way'), 'Formula') (('Sine 0 wave', 'simplest wave'), 'wave') (('we', 'Time Fourier Transform Short STFT'), 'use') (('0 We', 'how sound'), 'conclusion') (('we', 'standard ANN'), 'ANN') (('most', 'black low decibels'), 'let') (('that', 'different instruments'), 'learn') (('we', 'it'), 'be') (('it', 'here machine'), 'be') (('We', 'y axis'), 'have') (('we', 'technique'), 'use') (('0 Complex waves', 'multiple waves'), 'pitch') (('FFT', 'Fast Fourier Transform Introduction'), 'FFT') (('Time Domain We', 'dataset'), 'see') (('model', 'Back Introduction'), 'science') (('we', 'signal'), 'take') (('s', 'sine wave'), 'let') (('0 You', 'parameters'), 'science') (('you', 'kernel https www'), 'know') (('It', 'music information retrieval necessary systems'), 'provide') (('we', '13'), 'set') (('You', 'period'), 'define') (('we', 'sound'), 'introduction') (('we', 'sample rate normally nature'), 'record') (('this', 'sample'), 'zoom') "}