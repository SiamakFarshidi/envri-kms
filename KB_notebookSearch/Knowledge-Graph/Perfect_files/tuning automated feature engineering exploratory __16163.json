{"name": "tuning automated feature engineering exploratory ", "full_name": " h1 Introduction Tuning Automated Feature Engineering h3 Read in Data and Create Smaller Datasets h1 Properly Representing Variable Types h1 Time Variables h3 Replace Outliers h3 Plot for a sanity check h4 Bureau Balance h4 Previous Applications h4 Previous Credit and Cash h4 Installments Payments h1 Applying Featuretools h3 Entities h3 Relationships h2 Time Features h1 Interesting Values h1 Seed Features h1 Create Custom Feature Primitives h3 NormalizedModeCount and LongestSeq h3 MostRecent h1 Putting it all Together h2 Remove Features h1 Conclusions ", "stargazers_count": 0, "forks_count": 0, "description": "The next step from here would be to run the script on the entire dataset then use the features for modeling. As an example we can create a seed feature that determines whether or not a payment was late. com Featuretools featuretools blob master featuretools entityset entity. It has two date offset columns DAYS_INSTALMENT number of days before current application at Home Credit that previous installment was supposed to be paid DAYS_ENTRY_PAYMENT number of days before current application at Home Credit that previous installment was actually paidBy now the process should be familiar convert to timedeltas and then make time columns. Reading through the discussions other people had noticed this as well. There are a number of time offset columns in this dataset DAYS_DECISION number of days before current application at Home Credit that decision was made about previous application. com willkoehrsen applied automated feature engineering basics applied to the Home Credit Default Risk competition. These are user defined features that we provide to deep feature synthesis that can then be built on top of where possible. Let s visualize one of these new variables. CNT_PAYMENT WHERE NAME_CONTRACT_STATUS Approved. remove_low_information_features. These will represent the time_index of the data. We could use the feature importances from the model to determine the most relevant features perform feature selection and then go through another round of feature synthesis with a new set of of primitives seed features and interesting features. com automated_feature_engineering primitives. We will create an entityset named clients much as before but now we have time variables that we can use. I m still working on figuring out the most useful features to build by reading through other kernels finding features and figuring out how to recreate and build upon those in featuretools. This is the number of months before the current application at Home Credit of the previous application record. The first NormalizedModeCount builds upon the Mode function by returning the fraction of total observations in a categorical feature that the model makes up. However in this notebook we will not make any features by hand but rather let featuretools develop useful features for us. At this point we will just leave in the outliers. As with many aspects of machine learning feature creation is largely an empirical and iterative procedure. Some of these are Boolean flags only 1 or 0 and two columns are ordinal ordered discrete. This time when we make the dfs function call we need to pass in the seed_features argument. For example we can create new features that are conditioned on the value of NAME_CONTRACT_STATUS in the previous dataframe. The DAYS_INSTALMENT will serve as the time_index. com Featuretools featuretools. Any ideas would be much appreciated This work draws heavily on the featuretools documentation https docs. com and the featuretools GitHub repository https github. These four columns represent different offsets DAYS_CREDIT Number of days before current application at Home Credit client applied for loan at other financial institution. com JYLFamily Home_Credit_Default_Risk blob master 20180603 FeaturesV2 ApplicationTestFeatures. The second custom feature will record the longest consecutive run of a discrete variable. Time FeaturesLet s look at some of the time features we can make from the new time variables. Throughout this notebook we will pass in a chunk_size to the dfs call which specifies the number of rows if an integer or the fraction or rows to use in each chunk if a float. RelationshipsNot surprisingly the relationships between tables has not changed since the previous implementation. Only building a model and training it with the features will help us determine the answer. We will call this the closing date bureau_credit_close_date. These features could be completely useless or they may be helpful. Based on the most important features returned by a model we can create new interesting features. For example a client might be taking out larger and larger loans over time which could be an indicator that they are about to default or they could have a run of missed payments but then get back on track. For example in bureau the DAYS_CREDIT column represents How many days before current application did client apply for Credit Bureau credit. We will now do the same operation applied to the test set. Although we do not know the actual application date if we assume a starting application date that is the same for all clients then we can convert the MONTHS_BALANCE into a datetime. When we re done we probably want to save the results to a csv. For client 100002 the most recent type of credit was Credit card if we order by the application date but Consumer credit if we order by the end date of the loan. Remove Features Feature selection https en. One of the features is MEAN previous. Using the default feature primitives in the basic notebook did improve our score but to do better we will need some more advanced methods. Whether this is actually useful knowledge is hard to say Putting it all TogetherFinally we can run deep feature synthesis with the time variables with the correct specified categorical variables with the interesting features with the seed features and with the custom features. Introduction Tuning Automated Feature EngineeringIn this notebook we will expand upon the basic automated feature engineering https www. There are also two ordinal variables in the app data the rating of the region with and without the city. First we can establish an arbitrary date and then convert the time offset in months into a Pandas timedelta object. There are no explicit datetimes in the data but there are relative time offsets. com automated_feature_engineering dfs_usage_tips. This is an extremely powerful method that lets us expand the capabilities of featuretools. To tell featuretools to treat these as Boolean variables we need to pass in the correct datatype using a dictionary mapping variable_name variable_type. Here we will use a chunk size equal to the number of rows in the data so all the results will be calculated in one pass. When we create an entity featuretools will sort the entity https github. To build the custom feature primitive I adapted the existing TREND primitive code here https github. Replace OutliersThere are a number of day offsets that are recorded as 365243. However one thing we can do is use the built in featuretools selection function to remove https docs. Conclusions In this notebook we explored some of the advanced functionality in featuretools including Time Variables allow us to track trends over time Interesting Variables condition new features on values of existing features Seed Features define new features manually that featuretools will then build on top of Custom feature primitives design any transformation or aggregation feature that can incorporate domain knowledgeWe can use these methods to encode domain knowledge about a problem into our features or create features based on what others have found useful. Time VariablesTime can be a crucial factor in many datasets because behaviors change over time and therefore we want to make features to reflect this. We can look at the trend in credit size over time. EntitiesWhen creating the entities we specify the index the time_index if present and the variable_types if they need to be specified. We will explore a few different methods for improving the set of features and incorporating domain knowledge into the final dataset. We want to be careful because the index of the dataframe is the identifying column so we should keep the index. Plot for a sanity checkTo make sure the conversion went as planned let s make a plot showing the distribution of loan lengths. NormalizedModeCount and LongestSeqAs an example we will make three features building on code from the featuretools GitHub https github. Previous Credit and CashThe credit_card_balance and POS_CASH_balance each have a MONTHS_BALANCE column with the month offset. Because entities in the entityset are sorted by the time_index this will return the value that occurs the most number of times in a row with respect to time. We can compare the distribution of this feature to the MEAN previous. com guides performance. We also want to avoid making any features with the testing data so we pass in ignore_entities app_test. The following code has been adapted from a script on GitHub https github. We will call this the application date bureau_credit_application_date and make it the time_index of the entity. Create Custom Feature PrimitivesIf we are not satisfied with the existing primitives in featuretools we can write our own https docs. We will call this the ending date bureau_credit_end_date DAYS_ENDDATE_FACT For closed credits the number of days before current application at Home Credit that credit at other financial institution ended. To test whether this function works as intended we can compare the most recent variable of CREDIT_TYPE ordered by two different dates. Doing the calculations separately should prevent leakage from the testing data into the training data. Reading through discussions others replaced this number with np. DAYS_CREDIT_UPDATE Number of days before current application at Home Credit that the most recent information about the previous credit arrived. Later we can refactor this code into functions and put it in a script to run on a more powerful machine. DAYS_CREDIT_ENDDATE Number of days of credit remaining at time of client s application at Home Credit. This simply returns the most recent value of a discrete variable with respect to time columns in a dataframe. py by the time_index. html columns that only have one unique value or have all null values. py Sort the values by timestamps reversed Return the most recent occurence DFS with custom feature Run and create the features Run and create the features Remove low information features Save the feature matrix to a csv. This can help to optimize the dfs procedure and the chunk_size can have a significant effect on the run time https docs. com Featuretools featuretools blob master featuretools primitives aggregation_primitives. com a 15095 Set the longest element Iterate through the iterable DFS with custom features Building on the Trend Aggregation Primitive Copied from https github. This will be more as an exploration of the capabilities of featuretools than a complete implementation. It looks as if there are a number of loans that are unreasonably long. html defining custom primitives. Each stat will be calculated for the specified interesting values which can be useful when we know that there are certain indicators that are of greater importance in the data. This is one area where we can apply domain knowledge to feature creation. If we were doing manual feature engineering we might want to create new columns such as by subtracting DAYS_CREDIT_ENDDATE from DAYS_CREDIT to get the planned length of the loan in days or subtracting DAYS_CREDIT_ENDDATE from DAYS_ENDDATE_FACT to find the number of days the client paid off the loan early. To make date columns from the timedelta we simply add the offset to the start date. This can then be treated as a relative time that we can use to find trends or identify the most recent value of a variable. Another seed feature we can use is whether or not a previous loan at another institution was past due. LongestSeq takes in an array of discrete values and returns the element that appears the most consecutive times. Seed FeaturesAn additional extension to the default aggregations and transformations is to use seed features https docs. This shows the average term of previous credit on previous loans conditioned on the previous loan being approved. A positive value indicates that the loan size for the client is increasing over time. Bureau BalanceThe bureau balance dataframe has a MONTHS_BALANCE column that we can use as a months offset. org wiki Feature_selection is an entire topic to itself. pandas and numpy for data manipulation automated feature engineering Filter out pandas warnings Read in the datasets and limit to the first 1000 rows sorted by SK_ID_CURR This allows us to actually see the results in a reasonable amount of time Iterate through the columns and record the Boolean columns If column is a number with only two values encode it as a Boolean Record ordinal variables Record boolean variables in the previous data Replace all the day outliers Establish a starting date for all applications at Home Credit Convert to timedelta in days Create the date columns Set up default plot styles Drop the time offset columns Convert to timedelta Make a date column Select one loan and plot Convert to timedeltas in days Make date columns Drop the time offset columns Convert to timedelta objects Make a date column Make a date column Select on loan and plot Conver to time delta object Create time column and drop Select one loan and plot Make an entityset Entities with a unique index Entities that do not have a unique index Relationship between app and bureau Test Relationship between app and bureau Relationship between bureau and bureau balance Relationship between current app and previous apps Test Relationship between current app and previous apps Relationships between previous apps and cash installments and credit Add in the defined relationships Print out the EntitySet Assign interesting values Calculate the features with intereseting values Plot of client type when contract was approved Plot of client type where contract was refused Late Payment seed feature Rename the feature DFS with seed features Create a feed representing whether the loan is past due DFS with specified seed feature Count occurence of each value Find the mode Divide the occurences of mode by the total occurrences Function from https codereview. The resulting column of dates can be used as a time_index. All the time offset are measured from the current application at Home Credit and are measured in months or days. CNT_PAYMENT WHERE NAME_CONTRACT_STATUS Canceled to see how these loans differ. Specifying interesting values will calculate new features conditioned on values of existing features. The previous data also has two Boolean variables. Because these times are relative and not absolute we are only interested in values that show change over time such as trend or cumulative sum. In other words for a client with 5 total bureau_balance observations where 4 of the STATUS were X the value of the NormalizedModeCount would be 0. We will call this the update date bureau_credit_update_date. Interesting ValuesAnother method we can use in featuretools is interesting values. We also should align the training and testing dataframes to make sure they have the same columns. This will be the time_index of the data. Applying FeaturetoolsWe can now start making features using the time columns. These methods include Properly representing variable types Creating and using time variables Setting interesting values of variables Creating seed features Building custom primitivesReading through the discussion around this competition and working through some of the top kernels intricate feature engineering is a must. However in cases where there are multiple different time columns it might be useful to know the most recent value with respect to all of the times. com generated featuretools. We also will drop the time offset columns. Installments Payments The installments_payments data contains information on each payment made on the previous loans at Home Credit. We would not want to calculate values like the year or month since we choose an arbitrary starting date. DAYS_FIRST_DRAWING number of days before current application at Home Credit that first disbursement was made DAYS_FIRST_DUE number of days before current application at Home Credit that first due was suppoed to be DAYS_LAST_DUE_1ST_VERSION number of days before current application at Home Credit that first was DAYS_LAST_DUE number of days before current application at Home Credit of last due date of previous application DAYS_TERMINATION number of days before current application at Home Credit of expected terminationLet s convert all these into timedeltas in a loop and then make time columns. Read in Data and Create Smaller DatasetsWe will limit the data to 1000 rows because automated feature engineering is computationally intensive work. Credit Bureau refers to any other credit organization besides Home Credit. The idea is to record not only the most common value but also the relative frequency of the most common value compared to all observations. Therefore the built in aggregation primitive LAST calculates the most recent value based on the time index. To use interesting values we assign them to the variable and then specify the where_primitives in the dfs call. MostRecentThe final custom feature will be MOSTRECENT. If we don t do this Pandas will not be able to convert into a timedelta and throws an error that the number is too large. These will be aggregation primitives where the function takes in an array of values and returns a single value. Previous ApplicationsThe previous dataframe holds previous applications at Home Credit. Properly Representing Variable TypesThere are a number of columns in the app dataframe that are represented as integers but are really discrete variables that can only take on a limited number of features. To actually run this on the entire dataset we can take the code here put it in a script and then use more computational resources. html specifying list of aggregation functions. ", "id": "willkoehrsen/tuning-automated-feature-engineering-exploratory", "size": "16163", "language": "python", "html_url": "https://www.kaggle.com/code/willkoehrsen/tuning-automated-feature-engineering-exploratory", "git_url": "https://www.kaggle.com/code/willkoehrsen/tuning-automated-feature-engineering-exploratory", "script": "longest_repetition seaborn Counter AggregationPrimitive featuretools.primitives datetime make_agg_primitive replace_day_outliers matplotlib.pyplot normalized_mode_count timedelta most_recent selection featuretools pandas collections featuretools.variable_types numpy ", "entities": "(('This', 'time https run docs'), 'help') (('rather featuretools', 'us'), 'make') (('then we', 'datetime'), 'know') (('that', 'loans'), 'look') (('following code', 'GitHub https github'), 'adapt') (('we', 'months'), 'have') (('we', 'two different dates'), 'test') (('others', 'what'), 'explore') (('payment', 'seed feature'), 'create') (('client', 'Credit Bureau credit'), 'represent') (('we', 'that'), 'create') (('py Sort', 'csv'), 'reverse') (('These', 'data'), 'represent') (('This', 'dataframe'), 'return') (('we', 'ignore_entities app_test'), 'want') (('results', 'one pass'), 'use') (('application date it', 'entity'), 'call') (('one where we', 'creation'), 'be') (('credit', 'other financial institution'), 'call') (('We', 'time offset also columns'), 'drop') (('we', 'featuretools'), 'be') (('we', 'starting arbitrary date'), 'want') (('decision', 'previous application'), 'be') (('we', 'https docs'), 'be') (('features', 'this'), 'be') (('much work', 'featuretools documentation https heavily docs'), 'appreciate') (('blob master', 'entityset entity'), 'featuretool') (('that', 'most consecutive times'), 'take') (('client', 'loan'), 'do') (('they', 'time_index'), 'EntitiesWhen') (('com willkoehrsen', 'Home Credit Default Risk competition'), 'apply') (('We', 'final dataset'), 'explore') (('other people', 'this'), 'notice') (('that', 'time'), 'return') (('Specifying', 'existing features'), 'calculate') (('that', '365243'), 'be') (('Doing', 'training data'), 'prevent') (('we', 'just outliers'), 'leave') (('TogetherFinally we', 'custom features'), 'be') (('Later we', 'more powerful machine'), 'refactor') (('that', 'previous dataframe'), 'create') (('Previous ApplicationsThe previous dataframe', 'Home Credit'), 'hold') (('us', 'featuretools'), 'be') (('most relevant features', 'primitives seed features'), 'use') (('better we', 'more advanced methods'), 'need') (('they', 'same columns'), 'align') (('really discrete that', 'features'), 'be') (('DAYS_INSTALMENT', 'time_index'), 'serve') (('we', 'then more computational resources'), 'take') (('Consumer we', 'loan'), 'be') (('we', 'seed_features argument'), 'need') (('previous data', 'also two Boolean variables'), 'have') (('we', 'mapping variable_name dictionary variable_type'), 'tell') (('org wiki Feature_selection', 'entire itself'), 'be') (('that', 'time then columns'), 'number') (('idea', 'observations'), 'be') (('We', 'test set'), 'do') (('they', 'then back track'), 'take') (('we', 'variable'), 'treat') (('We', 'this'), 'call') (('feature automated engineering', '1000 rows'), 'limit') (('Seed FeaturesAn additional extension', 'seed features https docs'), 'be') (('s', 'loan lengths'), 'make') (('s', 'new variables'), 'let') (('I', 'existing TREND primitive code'), 'adapt') (('resulting column', 'time_index'), 'use') (('Therefore built', 'time index'), 'calculate') (('DAYS_CREDIT Number', 'other financial institution'), 'represent') (('com Featuretools', 'blob master featuretools'), 'featuretool') (('that', 'then top'), 'be') (('custom second feature', 'discrete variable'), 'record') (('Credit Bureau', 'Home Credit'), 'refer') (('I', 'featuretools'), 'work') (('mode', 'https codereview'), 'automate') (('create', 'entity https github'), 'sort') (('Boolean only 1 two columns', 'these'), 'be') (('This', 'complete implementation'), 'be') (('identifying so we', 'index'), 'want') (('previous loan', 'previous loans'), 'show') (('we', 'feature engineering https basic automated www'), 'introduction') (('aggregation where function', 'single value'), 'be') (('others', 'np'), 'replace') (('time where multiple different it', 'times'), 'be') (('This', 'application previous record'), 'be') (('actually now process', 'time then columns'), 'have') (('First we', 'Pandas timedelta object'), 'establish') (('We', 'MEAN'), 'compare') (('where 4', 'NormalizedModeCount'), 'be') (('we', 'https own docs'), 'primitivesif') (('html that', 'null values'), 'column') (('number', 'error'), 'be') (('that', 'such trend'), 'be') (('We', 'time'), 'look') (('we', 'dfs call'), 'assign') (('we', 'new interesting features'), 'base') (('Applying FeaturetoolsWe', 'time columns'), 'start') (('we', 'time new variables'), 'look') (('next step', 'modeling'), 'be') (('three features', 'featuretools'), 'NormalizedModeCount') (('previous loan', 'institution'), 'be') (('time offset', 'months'), 'measure') (('most recent information', 'previous credit'), 'Number') (('surprisingly relationships', 'previous implementation'), 'RelationshipsNot') (('using', 'feature intricate engineering'), 'include') (('which', 'chunk'), 'pass') (('Previous each', 'month offset'), 'Credit') (('certain that', 'data'), 'calculate') (('we', 'start date'), 'add') (('installments_payments data', 'Home Credit'), 'payment') (('model', 'categorical feature'), 'build') (('us', 'answer'), 'help') (('loan size', 'time'), 'indicate') (('we', 'csv'), 'want') "}