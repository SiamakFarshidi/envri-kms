{"name": "recommender systems in python 101 ", "full_name": " h1 Recommender Systems in Python 101 h1 Loading data CI T Deskdrop dataset h2 shared articles csv h2 users interactions csv h2 Data munging h1 Evaluation h1 Popularity model h1 Content Based Filtering model h1 Collaborative Filtering model h2 Matrix Factorization h2 Hybrid Recommender h2 Comparing the methods h1 Testing h1 Conclusion ", "stargazers_count": 0, "forks_count": 0, "description": "org wiki Vector_space_model it is to compute similarity between articles. com NicolasHug Surprise mrec https github. It contains about 73k logged users interactions on more than 3k public articles shared in the platform. It can be easily observed that among my main interests are machine learning deep learning artificial intelligence and google cloud platform. com Mendeley mrec or python recsys https github. In this notebook we use a dataset we ve shared on Kaggle Datasets Articles Sharing and Reading from CI T Deskdrop https www. Looking my profile it appears that the top relevant tokens really represent my professional interests in machine learning deep learning artificial intelligence and google cloud platform So we might expect good recommendations here With personalized recommendations of content based filtering model we have a Recall 5 to about 0. 2417 which means that about 24 of interacted items in test set were ranked by Popularity model among the top 5 items from lists with 100 random items. A reduced presentation could be utilized for either user based or item based neighborhood algorithms that are presented in the previous section. Hybrid RecommenderWhat if we combine Collaborative Filtering and Content Based Filtering approaches Would that provide us with more accurate recommendations In fact hybrid methods have performed better than individual approaches in many studies and have being extensively used by researchers and practioners. COMMENT CREATED The user created a comment in the article. There are more advanced techniques in RecSys research community specially advanced Matrix Factorization and Deep Learning models. org wiki Recommender_system RecSys techniques. Therefore if the model is allowed to memorize too much details of the original matrix it may not generalize well for data it was not trained on. Reducing the number of factors increases the model generalization. org stable modules generated sklearn. Here we perform the evaluation of the Popularity model according to the method described above. 2 and Recall 10 of 47. The value in each position represents how relevant is a token unigram or bigram for me. Popularity modelA common and usually hard to beat baseline approach is the Popularity model. Top N accuracy metrics consts Getting the items in test set Getting a ranked recommendation list from a model for a given user For each item the user has interacted in test set Getting a random sample 100 items the user has not interacted to represent items that are assumed to be no relevant to the user Combining the current interacted item with the 100 random items Filtering only recommendations that are either the interacted item or from a random sample of 100 non interacted items Verifying if the current interacted item is among the Top N recommended items Recall is the rate of the interacted items that are ranked among the Top N recommended items when mixed with a set of non relevant items if idx 100 0 and idx 0 print d users processed idx Computes the most popular items Recommend the more popular items that the user hasn t seen yet. Each article has its sharing date timestamp the original url title content in plain text the article lang Portuguese pt or English en and information about the user who shared the article author. It might be surprising to you that usually Popularity models could perform so well Content Based Filtering modelContent based filtering approaches leverage description or attributes from items the user has interacted to recommend similar items. org wiki Singular_value_decomposition. org wiki Learning_to_rank models like XGBoost Gradient Boosting Decision Trees with ranking objective Logistic models with categorical features One Hot encoded http scikit learn. Model based This approach models are developed using different machine learning algorithms to recommend items to users. You could leverage the available contextual information to model users preferences across time period of day day of week month location country and state district and devices browser mobile native app. You can find a reference to implement this metrics in this post http fastml. The underlying assumption of the collaborative filtering approach is that if a person A has the same opinion as a person B on a set of items A is more likely to have B s opinion for a given item than that of a randomly chosen person. These methods can also be used to overcome some of the common problems in recommender systems such as cold start and the sparsity problem. We have a new champion Our simple hybrid approach surpasses Content Based filtering with its combination with Collaborative Filtering. Indexing by personId to speed up the searches during evaluation Get the user s data and merge in the movie information. com ocelma python recsys and Spark ALS Matrix Factorization https spark. For the sake of simplicity we chose the first random approach for this notebook but you may want to try the second approach to better simulate how the recsys would perform in production predicting future users interactions. 2017 from CI T s Internal Communication platform DeskDrop. value if relevant item is in the first position. The recommendations really matches my interests as I would read all of them ConclusionIn this notebook we ve explored and compared the main Recommender Systems techniques on CI T Deskdrop https www. Matrix FactorizationLatent factor models compress user item matrix into a low dimensional representation in terms of latent factors. html implemenation of SVD because it is available on Kaggle kernels. com gspmoreira articles sharing reading from cit deskdrop which contains a real sample of 12 months logs Mar. It achieved the Recall 5 of 0. For textual items like articles news and books it is simple to use the raw text to build item profiles and user profiles. users_interactions. Other popular ranking metrics are NDCG N and MAP N whose score calculation takes into account the position of the relevant item in the ranked list max. We will demonstrate how to implement Collaborative Filtering Content Based Filtering and Hybrid methods in Python for the task of providing personalized recommendations to the users. com gspmoreira articles sharing reading from cit deskdrop dataset. Let s take a look in the profile. We chose a SciPy https docs. Recommender systems have a problem known as user cold start in which is hard do provide personalized recommendations for users with none or a very few number of consumed items due to the lack of information to model their preferences. This evaluation method works as follows For each user For each item the user has interacted in test set Sample 100 other items the user has never interacted. The objective of a RecSys is to recommend relevant items for users based on their preference. Content Based Filtering http recommender systems. Here we see some articles I interacted in Deskdrop from train set. Ignoring stopwords words with no semantics from English and Portuguese as we have a corpus with mixed languages Trains a model whose vectors size is 5000 composed by the main unigrams and bigrams found in the corpus ignoring stopwords Weighted average of item profiles by the interactions strength Computes the cosine similarity between the user profile and all item profiles Gets the top similar items Sort the similar items by similarity Ignores items the user has already interacted Creating a sparse pivot table with users in rows and items in columns The number of factors to factor the user item matrix. In Recommender Systems there are a set metrics commonly used for evaluation. It depends only on the user previous choices making this method robust to avoid the cold start problem. liked or commented will have a higher strength in the final user profile. EvaluationEvaluation is important for machine learning projects because it allows to compare objectivelly different algorithms and hyperparameter choices for models. org content based filtering This method uses only information about the description and attributes of the items users has previously consumed to model user s preferences. Also comparing similarity on the resulting matrix is much more scalable especially in dealing with large sparse datasets. org doc scipy reference generated scipy. The higher the number of factors the more precise is the factorization in the original matrix reconstructions. There are two possible event types at a given timestamp CONTENT SHARED The article was shared in the platform and is available for users. csv Take a look in this kernels for a better picture of the dataset Deskdrop datasets EDA DeskDrop Articles Topic Modeling shared_articles. In this case as the CF model is much more accurate than the CB model the weights for the CF and CB models are 100. The main objective of a recommender system is to leverage the long tail items to the users with very specific interests which goes far beyond this simple technique. Loading data CI T Deskdrop datasetIn this section we load the Deskdrop dataset https www. Data mungingAs there are different interactions types we associate them with a weight or strength assuming that for example a comment in an article indicates a higher interest of the user on the item than a like or than a simple view. Ask the recommender model to produce a ranked list of recommended items from a set composed one interacted item and the 100 non interacted non relevant items Compute the Top N accuracy metrics for this user and interacted item from the recommendations ranked list Aggregate the global Top N accuracy metricsThe Top N accuracy metric choosen was Recall N which evaluates whether the interacted item is among the top N items hit in the ranked list of 101 recommendations for a user. You can know more about state of the art methods published in Recommender Systems on ACM RecSys conference https recsys. html which is implemented in TensorFlow https docs. And Recall 10 was even higher 37 as expected. com c outbrain click prediction discussion 27897 157215 competition. csvContains logs of user interactions on shared articles. There is large room for improvements of the results. It handles the sparsity of the original matrix better than memory based ones. It is a unit vector https en. CONTENT REMOVED The article was removed from the platform and not available for further recommendation. Recommender Systems in Python 101This notebook is a practical introduction to the main Recommender System https en. Evaluating the Collaborative Filtering model SVD matrix factorization we observe that we got Recall 5 33 and Recall 10 46 values much higher than Popularity model and Content Based model. After the factorization we try to to reconstruct the original matrix by multiplying its factors. One key aspect of evaluation is to ensure that the trained model generalizes for data it was not trained on using Cross validation techniques. org wiki Collaborative_filtering This method makes automatic predictions filtering about the interests of a user by collecting preferences or taste information from many users collaborating. LIKE The user has liked the article. For the sake of simplicity we only consider here the CONTENT SHARED event type assuming naively that all articles were available during the whole one year period. The average is weighted by the interaction strength in other words the articles the user has interacted the most eg. The resulting matrix is not sparse any more. com gspmoreira articles sharing reading from cit deskdrop. Let s build a simple hybridization method as an ensemble that takes the weighted average of the normalized CF scores with the Content Based scores and ranking by resulting score. Take a look in the summary my solution shared for Outbrain Click Prediction https www. net gabrielspmoreira discovering users topics of interest in recommender systems tdc sp 2016 where I describe a production recommender system focused on Content Based Filtering and Topic Modeling techniques. As the popularity accounts for the wisdom of the crowds it usually provides good recommendations generally interesting for most people. All evaluation metrics reported here are computed using the test set. In other words these algorithms try to recommend items that are similar to those that a user liked in the past or is examining in the present. It can be joined to articles_shared. Now we have a Recall 5 of 34. One advantage of using this approach is that instead of having a high dimensional matrix containing abundant number of missing values we will be dealing with a much smaller matrix in lower dimensional space. Take a look in this presentation https www. 9 Comparing the methods TestingLet s test the best model Hybrid for my user. There are several advantages with this paradigm. As all items will be represented in the same Vector Space Model https en. The eventType values are VIEW The user has opened the article. Here we are using a very popular technique in information retrieval search engines named TF IDF https en. net gabrielspmoreira discovering users topics of interest in recommender systems tdc sp 2016 from slide 30 for more information on TF IDF and Cosine similarity. com tensorflow guide tutorials wide_and_deep. Preference and relevance are subjective and they are generally inferred by items users have consumed previously. FOLLOW The user chose to be notified on any new comment in the article. Those basic techniques were used for didactic purposes. Performs matrix factorization of the original user item matrix Converting the reconstructed matrix back to a Pandas dataframe Get and sort the user s predictions Recommend the highest predicted rating movies that the user hasn t seen yet. csv by contentId column. In Deskdrop users are allowed to view an article many times and interact with them in different ways eg. Here we naively assume those non interacted items are not relevant to the user which might not be true as the user may simply not be aware of those not interacted items. For this reason we are keeping in the dataset only users with at leas 5 interactions. In particular various candidate items are compared with items previously rated by the user and the best matching items are recommended. csv users_interactions. com evaluating recommender systems. org wiki Tf E2 80 93idf. Hybrid methods Recent research has demonstrated that a hybrid approach combining collaborative filtering and content based filtering could be more effective than pure approaches in some cases. com 2016 06 wide deep learning better together with. Getting the top 1000 Content based filtering recommendations Getting the top 1000 Collaborative filtering recommendations Combining the results by contentId Computing a hybrid recommendation score based on CF and CB scores Sorting recommendations by hybrid score. com Mendeley mrec python recsys https github. html distributed implementation for large datasets. To model the user profile we take all the item profiles the user has interacted and average them. io matrix factorization recommender. org wiki Feature_hashing and Wide Deep models https ai. org wiki Unit_vector of 5000 length. Here we a use popular latent factor model named Singular Value Decomposition SVD https en. csvContains information about the articles shared in the platform. See this presentation https www. We are using here a simple cross validation approach named holdout in which a random data sample 20 in this case are kept aside in the training process and exclusively used for evaluation. A more robust evaluation approach could be to split train and test sets by a reference date where the train set is composed by all interactions before that date and the test set are interactions after that date. It is composed of two CSV files shared_articles. There are many model based CF algorithms like neural networks bayesian networks clustering models and latent factor models such as Singular Value Decomposition SVD and probabilistic latent semantic analysis. com ocelma python recsys. We chose to work with Top N accuracy metrics which evaluates the accuracy of the top recommendations provided to a user comparing to the items the user has actually interacted in test set. 162 which means that about 16 of interacted items in test set were ranked by this model among the top 5 items from lists with 100 random items. A better approach would be to filter only articles that were available for users at a given time. The lower performance of the Content Based model compared to the Popularity model may indicate that users are not that fixed in content very similar to their previous reads. This approach is very simple to implement but usually do not scale well for many users. This contextual information can be easily incorporated in Learn to Rank https en. An important decision is the number of factors to factor the user item matrix. For a more precise evaluation and higher accuracy only articles that were available at a given time should be recommended but we let this exercice for you. And Recall 10 was 0. org docs latest mllib collaborative filtering. It could be observed that for articles recommendation content based filtering and a hybrid method performed better than Collaborative Filtering alone. This technique converts unstructured text into a vector structure where each word is represented by a position in the vector and the value measures how relevant a given word is for an article. The main families of methods for RecSys are Collaborative Filtering https en. A nice Python implementation of this approach in available in Crab http muricoca. html or Feature Hashed https en. This model is not actually personalized it simply recommends to a user the most popular items that the user has not previously consumed. BOOKMARK The user has bookmarked the article for easy return in the future. It was generated predictions for items the user have not yet interaction which we will exploit for recommendations. A typical example of this approach is User Neighbourhood based CF in which the top N similar users usually computed using Pearson correlation for a user are selected and used to recommend items those similar users liked but the current user have not interacted yet. Thus to model the user interest on a given article we aggregate all the interactions the user has performed in an item by a weighted sum of interaction type strength and apply a log transformation to smooth the distribution. Here are some tips In this example we ve completely ignored the time considering that all articles were available to be recommended to users at any time. Collaborative Filtering modelCollaborative Filtering CF has two main implementation strategies Memory based This approach uses the memory of previous users interactions to compute users similarities based on items they ve interacted user based approach or compute items similarities based on the users that have interacted with them item based approach. See an example of SVD on a movies dataset in this blog post https beckernick. If you are more like practioner than researcher you might try some Collaborative Filtering frameworks in this dataset like surprise https github. There are other matrix factorization frameworks more specific to CF you might try like surprise https github. But let s keep this assumption. ", "id": "gspmoreira/recommender-systems-in-python-101", "size": "18419", "language": "python", "html_url": "https://www.kaggle.com/code/gspmoreira/recommender-systems-in-python-101", "git_url": "https://www.kaggle.com/code/gspmoreira/recommender-systems-in-python-101", "script": "train_test_split inspect_interactions CFRecommender scipy.sparse numpy get_model_name get_item_profiles TfidfVectorizer build_users_profile ContentBasedRecommender build_users_profiles sklearn.feature_extraction.text ModelEvaluator recommend_items PopularityRecommender get_item_profile csr_matrix HybridRecommender matplotlib.pyplot MinMaxScaler evaluate_model_for_user evaluate_model scipy.sparse.linalg sklearn.model_selection pandas svds smooth_user_preference get_not_interacted_items_sample stopwords _verify_hit_top_n nltk.corpus cosine_similarity __init__ get_items_interacted sklearn.metrics.pairwise _get_similar_items_to_user_profile sklearn.preprocessing ", "entities": "(('we', 'Popularity much higher model'), 'evaluate') (('naively articles', 'year whole one period'), 'consider') (('it', 'item profiles'), 'be') (('Here we', 'information retrieval search engines'), 'use') (('It', 'platform'), 'contain') (('that', 'previous section'), 'utilize') (('items', 'previously user'), 'compare') (('which', 'months logs 12 Mar.'), 'com') (('contextual information', 'Rank https'), 'incorporate') (('about 24', '100 random items'), '2417') (('user', 'similar items'), 'be') (('We', 'exclusively evaluation'), 'use') (('Model', 'users'), 'develop') (('main families', 'RecSys'), 'be') (('I', 'train set'), 'see') (('that', 'them'), 'have') (('approach', 'very usually well many users'), 'be') (('current user', 'items'), 'be') (('simple hybrid approach', 'Collaborative Filtering'), 'have') (('items', 'Vector Space Model same https'), 'represent') (('we', '5 interactions'), 'keep') (('Deskdrop', 'DeskDrop Articles Topic Modeling shared_articles'), 'take') (('gspmoreira articles', 'cit deskdrop'), 'com') (('you', 'surprise https github'), 'try') (('users', 'very previous reads'), 'indicate') (('we', 'CI T Deskdrop https www'), 'use') (('weights', 'CF models'), 'be') (('It', 'CSV files two shared_articles'), 'compose') (('net gabrielspmoreira', 'TF IDF similarity'), 'discover') (('about 16', '100 random items'), '162') (('it', 'well data'), 'train') (('datasetIn we', 'Deskdrop dataset https www'), 'Loading') (('comment', 'simple view'), 'be') (('http scikit', 'features categorical One Hot'), 'encode') (('You', 'post http fastml'), 'find') (('Reducing', 'model generalization'), 'increase') (('we', 'you'), 'recommend') (('liked', 'user final profile'), 'have') (('users', 'previously preferences'), 'use') (('user', 'future'), 'BOOKMARK') (('interacted item', 'user'), 'ask') (('better how recsys', 'users future interactions'), 'choose') (('user', 'test actually set'), 'choose') (('We', 'users'), 'demonstrate') (('it', 'hyperparameter models'), 'be') (('article', 'users'), 'be') (('objective', 'preference'), 'be') (('user', 'user item matrix'), 'Trains') (('problem', 'preferences'), 'have') (('relevant item', 'first position'), 'value') (('It', 'Collaborative hybrid better Filtering'), 'observe') (('value', 'how token me'), 'represent') (('methods', 'such cold start'), 'use') (('evaluation metrics', 'test here set'), 'compute') (('Deskdrop users', 'different ways'), 'allow') (('user', 'article'), 'FOLLOW') (('important decision', 'user item matrix'), 'be') (('2016 where I', 'Content Based Topic Filtering techniques'), 'discover') (('we', 'factors'), 'try') (('user hasn t', 'that'), 'recommend') (('org wiki it', 'articles'), 'Vector_space_model') (('articles', 'time'), 'be') (('Python nice implementation', 'muricoca'), 'http') (('which', 'TensorFlow https docs'), 'html') (('we', 'lower dimensional space'), 'be') (('hybrid methods', 'extensively researchers'), 'RecommenderWhat') (('html', 'large datasets'), 'distribute') (('that', 'given time'), 'be') (('that', 'score'), 'let') (('we', 'CI T Deskdrop https www'), 'match') (('101This notebook', 'Recommender System practical main https'), 'Systems') (('we', 'recommendations'), 'generate') (('user', 'most eg'), 'weight') (('you', 'surprise https github'), 'be') (('hybrid approach', 'cases'), 'method') (('it', 'Cross validation techniques'), 'be') (('basic techniques', 'didactic purposes'), 'use') (('user', 'that'), 'personalize') (('users', 'generally items'), 'be') (('Content Based Filtering', 'recommender systems'), 'http') (('user', 'distribution'), 'aggregate') (('solution', 'Outbrain Click Prediction https www'), 'take') (('we', '5 about 0'), 'appear') (('it', 'generally most people'), 'provide') (('modelA', 'baseline common usually approach'), 'be') (('user', 'simply interacted items'), 'assume') (('which', 'far simple technique'), 'be') (('it', 'Kaggle kernels'), 'implemenation') (('top 1000 Content', 'hybrid score'), 'get') (('Also comparing', 'much more especially large sparse datasets'), 'be') (('The higher number', 'matrix more precise original reconstructions'), 'be') (('user hasn t', 'that'), 'const') (('It', 'better memory based ones'), 'handle') (('You', 'ACM RecSys conference https recsys'), 'know') (('Here we', 'method'), 'perform') (('method', 'start cold problem'), 'depend') (('how given word', 'article'), 'unstructured') (('Indexing', 'movie information'), 'get') (('NDCG MAP score calculation', 'list ranked max'), 'be') (('user', 'article'), 'be') (('who', 'article author'), 'have') (('that', 'present'), 'try') (('A', 'randomly chosen person'), 'be') (('user', 'them'), 'take') (('article', 'further recommendation'), 'remove') (('train where set', 'test date'), 'be') (('user', '100 other items'), 'work') (('You', 'state browser mobile native app'), 'leverage') (('automatic predictions', 'many users'), 'make') (('com c', 'prediction outbrain discussion'), 'click') (('It', 'deep artificial intelligence'), 'observe') (('user', 'article'), 'create') "}