{"name": "nuclei segmentation tensorflow u net 0 327 027909 ", "full_name": " h1 1 Modules and global settings h1 2 Analyse data h1 3 Manipulate data h1 4 Score Metric h1 5 Implement the Neural Network Class h1 6 Train the Neural Network h1 7 Validate the neural network h1 8 Make Test Prediction h1 9 Submit ", "stargazers_count": 0, "forks_count": 0, "description": "For the training images the nuclei are segmented by humans such that we know their number and location within each image. Display working train test directories. randint 0 len x_train Generate new images masks via transformations applied on the original images maks. 128 128 1 Loss tensor Optimisation tensor. randint len x_test Create submission file. len x_batch Valid data used for evaluation. Store parameters. Overview of train images masks. In case the current index is larger than one epoch. Second version 2 class variant of dice loss dice_coeff corr offset l2_true l2_pred offset corr_inv offset l2_pred_inv l2_true_inv offset Sigmoid cross entropy. Initialize summary writer. Remove background. Plot the worst 4 predictions. Make Test Prediction 9. Choosing an image size of 256x256 pixels the network requires roughly 30 training epochs before the training seems to converge. For using KFold For using image generation To measure running time For resizing images For using image labeling To read and manipulate images For filepath directory handling System specific parameters and functions Use smart progress meter For pairplots Python 2D plotting library Color map Global constants. On average the red green and blue channels have similar intensities for all images. Each mask has at least one identified object. The network can achieve a score of 0. Load neural network and make prediction for masks. Variable initialization. Create and start training of a new neural network or continue training of a pretrained model. Type of neural network Name of neural network For storing parameters Log results in terms of epochs Count number of mini batches True use augmented data True use TensorBoard summaries True save the session Parameters that should be stored. 4 on the validation set. Use augmented data. Check one sample prediction in more detail. It should be noted that the background can be dark black as as well as light white. indices from top to down segment image and label different objects loop over each object excluding the background labeled by 0 Load neural network make prediction for test masks resize predicted masks to original image size and apply run length encoding for the submission file. The properties of the network Prior to training the network we resize normalize and transform the images. Check the image transformation procedure resizing normalizing inverting by looking at a sample. in case that no object is identified in one of the masks Returning parameters. Each model can be saved loaded and the training process can be visualized with TensorBoard. Mini batch size Keeping probability with dropout regularization Step size in terms of epochs Reduction of learn rate for each step Starting learning rate 1 keep_probability Set helper variables. save parameters of the network TensorFlow saver TensorBoard summaries default session restore session save default graph load parameters define relevant tensors as variables load parameters of network Input tensors Tensors for training and prediction. Counting unique image shapes. The goal is to find the correct number and location of all nuclei shown in the test images. Prediction overlap with true mask. Make Test Prediction 8 bullet 9. Adam Optimizer adaptive moment estimation. Furthermore we implement data augmentation by making use of translations rotations horizontal vertical flipping and zoom. Transform lists into 4 dim numpy arrays. Train data used for evaluation. Adapt the learning rate. In case you want to reload and preprocess the raw data. Modules and global settings 2. Remove one object false postive Remove one object false negative Offset. Invert images such that each image has a dark background. Normalize all images and masks. Train the Neural Network 6 bullet 7. unit output layer. Read and resize test images. 128 128 1 Input tensor. Split training and validation data in the same way as was done for training the neural network. Looping over mini batches. False positives and false negatives. The performance of an algorithm is evaluated on the mean average precision at different intersection over union IoU thresholds which will be referred to as the score in the following. Current number of log steps. The input of the network are images of shape height width channels while the output are corresponding binary masks of shape height width 1. Note that the score is better than the true score since overlapping touching nuclei can not be separately identified in this version. Manipulate data 3 bullet 4. There is the possibility to transform images into the grayscale sepctrum and to invert images which have a very light background. Shuffle permutation array. Analyse data 2 bullet 3. Attach saver tensor. Stop after one iteration. Study the pixel intensity. Intersection over union. Read images masks from files and resize them. Save summaries for TensorBoard. Validate the Neural Network 7 bullet 8. Author Raoul Malm Abstract The 2018 Data Science Bowl Find the nuclei in divergent images to advance medical discovery provides in its first stage a training and test data set consisting of 670 and 65 microscopic images of varying size showing ensembles of cells and their nuclei. Training on original data. The pixels are one indexed and numbered from top to bottom then left to right 1 is pixel 1 1 2 is pixel 2 1 etc. Submit 9 bullet Reference U Net Convolutional Networks for Biomedical Image Segmentation https arxiv. Resize predicted masks to original image size. Train the Neural Network 7. Run length encoding of predicted test masks. Compute all intersections between the objects. For example 1 3 10 5 implies pixels 1 2 3 10 11 12 13 14 are to be included in the mask. Attach summaries. Implemented are functions to read images masks from files and to read basic properties of the train test data sets. Summary dataframe. Python lists to store the training images masks and test images. There is a lot of variation concerning the form size number of nuclei and the darkness lightness colorfulness of the images. Being constrained on kaggel hardware and running time we can train for 3 epochs which takes roughly 35 minutes. Array of different objects and occupied area. Create instance of neural network. Labels that are not assigned. This is a limiting factor for the overall performance. Modules and global settings 1 bullet 2. Training on augmented data. Overall score on train set. Continue training of a pretrained model. Recursive use of function. len x_batch Evaluate current loss and score Store losses and scores. Show intermediate losses and scores during the training session. For the task we implement a deep neural network of the U Net type consisting of several convolutional and max pooling layers. We use 10 of the training data for validation. Build U Net graph. Predicted mask with identified objects. for testing purpose Implement cross validations Start timer Split into train and validation Create and start training of a new model. Intersections over unions. Assign predicted to true objects if they have any overlap. Collection of methods for data operations. Study how many objects in the masks can be identified. Implement the Neural Network Class 6. Check the score metric for one sample. Start TensorBoard visualization. Extra operations required for batch normalization. Basic properties of images masks. Inspect a test prediction and check run length encoding. Default image width Default image height Default number of channels Image type Folder name including the image Folder name including the masks Folder name for TensorBoard summaries Folder name for storing network parameters Random seed for splitting train validation sets Minimal nucleous size in pixels Global variables. Generate new set of images Normalize images and masks Remove color and transform images into grayscale spectrum. Dice loss based on Jaccard dice score coefficent. Summary of scores for training and validations sets. Score Metric 4 bullet 5. Save parameters tensors summaries. Implement the Neural Network class 5 bullet 6. All summaries are written into the logs directory which is contained in the current working directory. randint len x_train Create predicted mask from true mask. Submit Import necessary modules and set global constants and variables. Furthermore we have not tuned the hyperparameters so there is still a lot of room for improvement. Read and resize train images masks. 128 128 3 Generic tensors. randint len x_train Collection of methods for run length encoding. A major reason for the score discrepancy can be explained by overlapping touching nuclei that are identified as a single nucleous by the current implementation. The network is written in TensorFlow. The network achieves a score of 0. next mini batch Store losses and scores. Compute score and assign parameters. Fixed learnrate Decreasing learnrate each step by factor 1 alpha At the start of the epoch. Manipulate data 4. Collection of methods for basic data manipulation like normalizing inverting color transformation and generating new images masks Convert pixel values from 0 255 to 0 1 by global factor Convert pixel values from 0 255 to 0 1 by local factor protect against too small pixel intensities Standardisation of each image Transformations. True mask with true objects. Overall score on validation set. The predicted mask is simulated and can be modified in order to check the correct implementation of the score metric. Start tensorflow session. Merge all summaries. Each image and mask is stored as a 3 dim array where the number of channels is 3 and 1 respectively. randint len x_train Keep only objects that are large enough. Validate the neural network 8. Data augmentations can be used for regularization. True mask with identified objects. Number of different labels. 327 on the validation test set. Create summary tensors for TensorBoard. Assign predicted to true background. Tunable hyperparameters for training. Set training and validation sets. ", "id": "fabsta/nuclei-segmentation-tensorflow-u-net-0-327-027909", "size": "3053", "language": "python", "html_url": "https://www.kaggle.com/code/fabsta/nuclei-segmentation-tensorflow-u-net-0-327-027909", "git_url": "https://www.kaggle.com/code/fabsta/nuclei-segmentation-tensorflow-u-net-0-327-027909", "script": "imshow_args mask_to_rle loss_tensor read_train_data_properties attach_saver save_model invert_imgs batch_norm_layer numpy get_score_summary preprocess_raw_data seaborn load_tensors get_loss build_graph activation read_test_data_properties rle_of_binary num_of_weights plot_score_summary weight_variable generate_images_and_masks build_UNet_graph summary_variable load_parameters generate_images trsf_proba_to_binary conv2d_transpose normalize_imgs train_graph read_image img_intensity_pairplot get_score get_iou tensorflow read_mask matplotlib.cm normalize_masks bias_variable conv2d matplotlib.pyplot dropout_layer leaky_relu load_session_from_file pandas get_prediction load_raw_data get_labeled_mask attach_summary next_mini_batch get_learn_rate imgs_to_grayscale plot_generated_image_mask __init__ normalize img_comparison_plot rle_to_mask max_pool_2x2 NeuralNetwork() optimizer_tensor ", "entities": "(('Read', 'them'), 'image') (('Resize', 'image original size'), 'predict') (('pixels', 'then right 1'), 'be') (('Implemented', 'train test data sets'), 'be') (('randint len x_train Create', 'true mask'), 'predict') (('Python', 'training images masks'), 'list') (('default graph load parameters', 'training'), 'define') (('goal', 'test images'), 'be') (('where number', 'channels'), 'store') (('average red green channels', 'images'), 'have') (('Data augmentations', 'regularization'), 'use') (('object', 'parameters'), 'in') (('output', 'shape'), 'be') (('you', 'raw data'), 'in') (('prediction', 'submission file'), 'loop') (('medical discovery', 'cells'), 'Abstract') (('This', 'limiting overall performance'), 'be') (('how many objects', 'masks'), 'study') (('Array', 'area'), 'occupy') (('Furthermore we', 'translations rotations'), 'implement') (('Default image width Default image height Default number', 'pixels Global variables'), 'set') (('l2_true_inv Sigmoid', 'entropy'), 'offset') (('training process', 'TensorBoard'), 'save') (('Invert such image', 'dark background'), 'image') (('that', 'current implementation'), 'explain') (('Implement', 'new model'), 'for') (('Furthermore we', 'improvement'), 'tune') (('they', 'overlap'), 'predict') (('Extra operations', 'batch normalization'), 'require') (('which', 'working current directory'), 'write') (('that', 'Parameters'), 'Log') (('current index', 'one epoch'), 'be') (('we', 'images'), 'normalize') (('training', 'training roughly 30 epochs'), 'require') (('We', 'validation'), 'use') (('which', 'very light background'), 'be') (('Python 2D', 'Global constants'), 'use') (('1 2 3 10 14', 'mask'), 'imply') (('batch Mini size', 'keep_probability Set helper learning rate 1 variables'), 'keep') (('such we', 'image'), 'segment') (('overlapping touching nuclei', 'separately version'), 'note') (('which', 'following'), 'evaluate') (('mask', 'at least one identified object'), 'have') (('predicted mask', 'score metric'), 'simulate') (('which', 'roughly 35 minutes'), 'train') (('we', 'several convolutional layers'), 'implement') "}