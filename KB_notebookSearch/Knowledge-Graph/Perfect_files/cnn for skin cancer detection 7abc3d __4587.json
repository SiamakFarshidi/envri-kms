{"name": "cnn for skin cancer detection 7abc3d ", "full_name": " h1 Step 1 importing Essential Libraries h1 Step 2 Loading pictures and making Dictionary of images and labels h1 Step 3 Categorical Labels h1 Step 4 Normalization h1 Step 5 Model Building h2 CNN h1 confusion matrix h1 Step 6 Cross Validating Model h1 Step 7 Testing the model h1 Step 8 ResNet50 ", "stargazers_count": 0, "forks_count": 0, "description": "e the area size pooled each time more the pooling dimension is high more the downsampling is important. It has 2 different classes of skin cancer which are listed below 1. This technique also improves generalization and reduces the overfitting. confusion matrix Precission Recall F1. Filters can be seen as a transformation of the image. The CNN can isolate features that are useful everywhere from these transformed images feature maps. Step 3 Categorical LabelsTurn labels into one hot encoding Step 4 NormalizationNormalize all Values of the pictures by dividing all the RGB values by 255 Step 5 Model Building CNNI used the Keras Sequential API where you have just to add one layer at a time starting from the input. As the dataset is pretty balanced the model will be tested on the accuracy score thus TP TN ALL. The kernel filter matrix is applied on the whole image. It is like a set of learnable filters. It consists of 1800 pictures of benign moles and 1497 pictures of malignant classified moles. It combines all the found local features of the previous convolutional layers. We have to choose the pooling size i. Dropout is a regularization method where a proportion of nodes in the layer are randomly ignored setting their wieghts to zero for each training sample. Step 6 Cross Validating Model Step 7 Testing the modelFirst the model has to be fitted with all the data such that no data is left out. Malignant In this kernel I will try to detect 2 different classes of moles using Convolution Neural Network with keras tensorflow in backend and then analyse the result to see how the model can be useful in practical scenario. It looks at the 2 neighboring pixels and picks the maximal value. Mole Classifier KernelSkin cancer is the most common human malignancy is primarily diagnosed visually beginning with an initial clinical screening and followed potentially by dermoscopic analysis a biopsy and histopathological examination. The second important layer in CNN is the pooling MaxPool2D layer. The rectifier activation function is used to add non linearity to the network. Finally the pictures are added together to a big training set and shuffeled. The Flatten layer is use to convert the final feature maps into a one single 1D vector. As the pictures do not have any labels these need to be created. I choosed to set 64 filters for the two firsts conv2D layers. This layer simply acts as a downsampling filter. The first is the convolutional Conv2D layer. The pictures have all been resized to low resolution 224x224x3 RGB. This flattening step is needed so that you can make use of fully connected layers after some convolutional maxpool layers. The dataset is taken from the ISIC International Skin Image Collaboration Archive. This drops randomly a propotion of the network and forces the network to learn features in a distributed way. Step 8 ResNet50The CNN above is not a very sophisticated model thus the resnet50 is also tried It s my lucky number used for converting labels to one hot encoding convert to one hot encoding Load in training pictures Load in testing pictures Create labels Merge data Shuffle data Display first 15 images of moles and how they are classified With data augmentation to prevent overfitting See learning curve and validation curve Set a learning rate annealer list all data in history summarize history for accuracy summarize history for loss define 3 fold cross validation test harness create model Fit the model evaluate the model Fitting model to all data Testing model on test data to evaluate save model serialize model to JSON serialize weights to HDF5 Clear memory because of memory overload Train ResNet50 on all the data list all data in history summarize history for accuracy summarize history for loss Testing model on test data to evaluate save model serialize model to JSON serialize weights to HDF5. Combining convolutional and pooling layers CNN are able to combine local features and learn more global features of the image. In this kernel I have followed following 14 steps for model building and evaluation which are as follows Step 1 Importing Essential Libraries Step 2 Loading pictures and making Dictionary of images and labels Step 3 Categorical Labels Step 4 Normalization Step 5 Train and Test Split Step 6 Model Building Step 7 Cross validating model Step 8 Testing model Step 9 ResNet50 Step 1 importing Essential Libraries Step 2 Loading pictures and making Dictionary of images and labelsIn this step I load in the pictures and turn them into numpy arrays using their RGB values. relu is the rectifier activation function max 0 x. Each filter transforms a part of the image defined by the kernel size using the kernel filter. As the pictures have already been resized to 224x224 there s no need to resize them. In the end i used the features in one fully connected Dense layer which is just artificial an neural networks ANN classifier. These are used to reduce computational cost and to some extent also reduce overfitting. The task of this kernel is to create a model which can classify a mole visually into benign and malignant. Automated classification of skin lesions using images is a challenging task owing to the fine grained variability in the appearance of skin lesions. ", "id": "mahamatnour/cnn-for-skin-cancer-detection-7abc3d", "size": "4587", "language": "python", "html_url": "https://www.kaggle.com/code/mahamatnour/cnn-for-skin-cancer-detection-7abc3d", "git_url": "https://www.kaggle.com/code/mahamatnour/cnn-for-skin-cancer-detection-7abc3d", "script": "classification_report keras.layers keras.models train_test_split keras.wrappers.scikit_learn keras build confusion_matrix precision_recall_curve keras.utils.np_utils cross_val_score Image accuracy_score seaborn numpy Dropout Adam keras.preprocessing.image ImageDataGenerator ResNet50 BatchNormalization Dense glob backend as K keras.layers.normalization keras.callbacks MaxPool2D plot_confusion_matrix RMSprop roc_auc_score keras.optimizers auc ReduceLROnPlateau KFold matplotlib.pyplot KerasClassifier Sequential backend PIL sklearn.model_selection pandas roc_curve Conv2D Model to_categorical # convert to one-hot-encoding to_categorical # used for converting labels to one-hot-encoding keras.applications.resnet50 GridSearchCV sklearn.metrics Flatten StandardScaler sklearn.preprocessing ", "entities": "(('how model', 'practical scenario'), 'try') (('pictures', 'labels'), 'have') (('filter', 'kernel filter'), 'transform') (('It', 'maximal value'), 'look') (('pretty model', 'accuracy score'), 'be') (('which', 'visually benign'), 'be') (('It', '1497 malignant classified moles'), 'consist') (('I', 'firsts conv2D two layers'), 'choose') (('step I', 'RGB values'), 'follow') (('such data', 'data'), 'step') (('Combining', 'image'), 'be') (('These', 'also overfitting'), 'use') (('Automated classification', 'skin lesions'), 'be') (('kernel filter matrix', 'whole image'), 'apply') (('most common human malignancy', 'dermoscopic potentially analysis'), 'be') (('regularization where proportion', 'training sample'), 'be') (('pictures', 'them'), 'resize') (('Flatten layer', '1D one single vector'), 'be') (('second important layer', 'CNN'), 'be') (('data', 'HDF5'), 'be') (('Filters', 'image'), 'see') (('activation rectifier function', 'network'), 'use') (('layer', 'downsampling simply filter'), 'act') (('Finally pictures', 'training together big set'), 'add') (('you', 'maxpool convolutional layers'), 'need') (('This', 'distributed way'), 'drop') (('technique', 'overfitting'), 'improve') (('which', '1'), 'have') (('where you', 'input'), 'use') (('It', 'previous convolutional layers'), 'combine') (('dataset', 'ISIC International Skin Image Collaboration Archive'), 'take') (('pictures', 'low resolution'), 'resize') (('that', 'images feature everywhere transformed maps'), 'isolate') (('which', 'Dense one fully connected layer'), 'use') "}