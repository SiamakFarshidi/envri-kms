{"name": "build your first deep learning model ", "full_name": " h1 Agenda h2 About the Dataset h2 Objective h2 Loading Libraries h2 Loading Data h2 View Data h1 Separating Input Features and Output Features h1 Splitting the data h1 Training our model h2 Neural Network Architecture h2 The 5 Step Model Life Cycle h3 1 Define the model h3 2 Compile the model h3 3 Fitting the model h3 4 Evaluate the model h4 Hyperparameter Tunning h3 Exercise 1 h3 Exercise 2 h3 Exercise 3 h3 Exercise 4 h4 Summary of hyperparameter tuning h4 Implementing hyperparameter tuning with Sklearn h4 Implementing hyperparameter tuning with Keras h4 5 Make a Prediction h4 Resources ", "stargazers_count": 0, "forks_count": 0, "description": "Loading LibrariesAll Python capabilities are not loaded to our working environment by default even they are already installed in your system. Then we evaluate the model using the evalate function and our testing set features X_test and real target values y_test 5. 1 is the learning rate compile the model fit the model evaluate the model Play with learning rate Replace with a floating point number compile the model fit the model Evaluate the model define the model 0. Neural Networks consists of an input and output layer with one or more hidden layers. We will build a Machine learning model i. Lowering the learning rate while increasing the number of epochs or the batch size is often a good combination. Lowering the learning rate can help one model converge efficiently but make another model converge much too slowly. The mean squared error we got here is 64. During each iteration the gradient descent algorithm multiplies the learning rate by the gradient. You can see above the cost loss value i. Models can be defined either with the Sequential API or the Functional API you will know this in later modules. Note that the oracle may interrupt the search before max_trial models have been tested. 63 2 where Bk is the proportion of blacks by town LSTAT lower status of the population MEDV Median value of owner occupied homes in 1000 USD s Target ObjectiveThe objective is to use linear regression to find the median value of owner occupied homes in 1000 USD s. That said here are a few rules of thumb Training loss should steadily decrease steeply at first and then more slowly until the slope of the curve reaches or approaches zero. Here we will define the model with Sequential API. It is why we wanted the model in the first place. 20 20 of the data will go for test set and 70 of the data will go for train set random_state 42 this will fix the split i. Splitting the dataWe want to check the performance of the model that we built. 01 is the learning rate compile the model If you build the model with given parameters set_random_seed will help you produce the same result on multiple execution Recommended by Keras 1. Prediction About the DatasetWe will be working on a data set that comes from the real estate industry in Boston US. From an API perspective you simply call a function to make a prediction of a class label probability or numerical value whatever you designed your model to predict. 1 is the learning rate compile the model fit the model evaluate the model Play with epochs Replace with an integer compile the model fit the model Evaluate the model play with learning rate and epochs Replace with a floating point number Replace with an integer compile the model fit the model Evaluate the model define the model 0. A traditional default value for the learning rate is 0. verbose 0 will show you nothing silent verbose 1 will show you an animated progress bar like this progres_bar https dphi courses. Run the GridSearchCV process 4. Let s first take a look at the implementation of GridSearchCV with Sklearn following the steps 1. The loss function used here is mean squared error. png verbose 2 will just mention the number of epoch like this verbose 2 https dphi courses. Random Search is a hyperparameter search procedure that is performed on a defined grid of hyperparameters. com tensorflow tutorial deep learning with tf keras https machinelearningmastery. Matplotlib is used for data visualization. Print the results of the best model Functional Tuning Option 1 using Sklearn Goal tune the batch size and epochs Import KerasRegressor class Define the model trhough a user defined function compile the model Define the hyperparameters grid to be validated Run the GridSearchCV process Print the results of the best model Import the cross validation evaluator Measure the model s performance Functional Tuning Option 2 using Keras Tuner Goal tune the learning rate 0. For real world datasets consisting of a very large number of examples the entire dataset might not fit into memory. The variations are sorted from lowest to highest performance which is why we see that the model with the best performance is the one with a learning rate of 0. don t worry if you don t know about the loss function mean squared error for the time being just know it s a function that helps you know the error or loss your model is giving. If you want to get the prediciton for X_test you can do model. Fitting the modelFitting the model requires that you first select the training configuration such as the number of epochs loops through the training dataset and the batch size number of samples in an epoch used to estimate model error. The iterative hyperparameter optimization process that has been completed has gone through the four defined Learning rate values 0. We chose alias names for our libraries for the sake of our convenience numpy np and pandas pd matplotlib. Epochs A full training pass over the entire dataset such that each example has been seen once. Each one of the hyperparameter combinations is used for training a new model while a cross validation process is executed to measure the performance of the provisional models. Fitting the model is the slow part of the whole process and can take seconds to hours to days depending on the complexity of the model the hardware you re using and the size of the training dataset. average of it the result you will get is 64. Loading DataPandas module is used for reading files. Once the process is done the hyperparameters and the model with the best performance are chosen. Print the summary results of the hyperparameter tuning procedure 4. The example below defines a Sequential MLP model that accepts one input i. We will take closer look into each of the steps and parallely build the deep learning model. Implementing hyperparameter tuning with Keras Implementing hyperparameter tuning with Sklearn Well we can automate the hyperparameter tunning using GridSearCV. 0001 Defining the optimizer Compiling the model Returning the defined model 2. The target variable refers to the median value of owner occupied homes in 1000 USD s. So input variables are also known as independent variables as its values are not dependent on any other quantity and output variable s are also known as dependent variables as its values are dependent on other variable i. It s one of the most popular gradient descent optimization algorithms for deep learning networks. This database contains 14 attributes. For this purpose we always split both input and output data the given data into training set which will be used to train the model and test set which will be used to check how accurately the model is predicting outcomes. The speed of model evaluation is proportional to the amount of data you want to use for the evaluation although it is much faster than training as the model is not changed. Note that setting the learning rate too high may also prevent training loss from converging. The activation function we have chosen is ReLU which stands for rectified linear unit. Like here in this data we are trying to predict the price of a houce so this is our target column i. Training applies the chosen optimization algorithm to minimize the chosen loss function and updates the model using the backpropagation don t worry if you don t know this term you will know it in the next module of error algorithm. This should be data not used in the training process i. A balance must be sought in the learning rate value which allows finding the best regression coefficients for which the loss is the minimum. We split 80 of the data to the training set while 20 of the data to test set using below code. define the model import RMSprop optimizer 0. This performance is due to the Gradient Descent process. As you can see above how the loss cost i. Neural Network ArchitectureHere we are giving you just an overview of the architecture of Neural Network. predict X_test Hyperparameter TunningThe hyperparameters here in this notebook are 1. Let s now look at the general performance of the model evaluated with our testing set. You will know more about it in next module. Note that the visible layer of the network is defined by the input_shape argument on the first hidden layer. Training our modelAfter splitting the data into training and testing sets it s time to train our first deep learning model. This function will block not return until the training process has finished. That means in the above example the model expects the input for one sample to be a vector of n_features i. MSE has changed by just changing the learning rate. Install and import all the packages needed1. Install and import all the packages needed 1. Exercise 1Test several learning rate values to see the impact of varying this value when defining your model. 0001 running a 10 epochs training processo per learning rate with a validation set of 20 of the general dataset. MEDV of new test data. The five steps in the life cycle are as follows 1. 0 and greater than 10 6. Remember the ideal combination of hyperparameters is data dependent so you must always experiment and verify. Then decrease the batch size until you see degradation. 1 is the learning rate compile the model 2. You must experiment to find the best set of hyperparameters for your dataset. Define the model s architecture 0. In such cases you ll need to reduce the batch size to enable a batch to fit into memory. We have our data in. png The 5 Step Model Life CycleA model has a life cycle and this very simple knowledge provides the backbone for both modeling a dataset and understanding the tf. 01 It is important to find a good value for the learning rate for your model on your training dataset. Run the GridSearchCV process4. Unfortunately we can t provide concrete tuning rules for every model. Compile the modelCompiling the model requires that you first select a loss function that you want to optimize such as mean squared error or cross entropy. com dphi official Datasets master Boston_Housing Testing_set_boston. It may also require that you select any performance metrics to keep track of during the model training process. csv Congratulations You have successfully build your first deep learning model and predicted the output i. layers seed helps you to fix the randomness in the neural network. For this purpose we have a class called train_test_split in the sklearn. GridSearchCV is a hyperparameter search procedure that is done over a defined grid of hyperparameters. Now what does it mean When you subtract the predicted values of X_test data from the acutal value of X_test data then square it and sum all the squares and finally take a mean i. Instead a good or good enough learning rate must be discovered via trial and error. Define the general architecture of the model through a creation function2. We have our new test data located at the given github location https raw. Make predictions on the test data. Define the general architecture of the model through a creation user defined function Tuning the learning rate four different values to test 0. Define the general architecture of the model2. Train the model The five step model life cycle 1. We access the best model model in position 0 by accessing the get_best_models num_models 1 0 where num_models refers to the number of models to extract and the 0 index to the index where the extraction of the models begins which in this case will be only the best one. model_selection module. com Deep Learning Bootcamp nn arch. MSE has changed just by changing the epochs and keeping the learning rate same as 0. 01 and the worst model the one with a learning rate of 0. Set numpy pseudo random generator at a fixed value Recommended by Keras 4. Set the tensorflow pseudo random generator at a fixed value define the model 0. By passing our X and y variables into the train_test_split method we are able to capture the splits in data by assigning 4 variables to the result. You will learn more about loss functions in the coming modules From an API perspective this involves calling a function to compile the model with the chosen configuration which will prepare the appropriate data structures required for the efficient use of the model you have defined. Evaluate the modelEvaluating the model requires that you first choose a holdout dataset used to evaluate the model. Split The Data into Train and Test Set8. pyplot pyplot is matplotlib s plotting framework. If the training loss does not converge train for more epochs. Define the modelDefining the model requires that you first select the type of model that you need and then choose the architecture or network topology. It is the most used module of matplotlib. Numpy is required for calculations like means medians square roots etc. From an API perspective this involves calling a function with the holdout dataset and getting a loss and perhaps other metrics that can be reported. If the training loss decreases too slowly increase the learning rate. In order to correct this error we will integrate Sklearn and Keras properly by a creating a create_model function that allows to create the model in an automated way and b defining a KerasRegressor model which is an implementation of the scikit learn regressor API for Keras. Print the results of the best modelWe can observe an error in the hyperparameter tuning procedure using native Sklearn because the defined model is a Sequential model implemented by Keras not a scikit learn estimator. The resulting product is called the gradient step. Set python built in pseudo random generator at a fixed value 3. From an API perspective this involves calling a function to perform the training process. Exercise 3Find the best possible combination of learning rate and epochs while testing some combinations Batch Size The number of examples in a batch. com Deep Learning Bootcamp epoch. add until you have added all of your layers. Evaluate the model Hyperparameter Tunning 5. So we import each and every library that we want to use. Set PYTHONHASHSEED environment variable at a fixed value 2. We will use read_csv function for loading the data. Print the results of the best model Load new test data make a prediction. Pandas is used for data processing and data frames. Note For the time being understand gradient descent as just an optimization algorithm. Make a PredictionMaking a prediction is the final step in the life cycle. Let s see the summary of the hyperparameter optimization process The summary shows the general performance measured in MSE for each of the learning rate variations in the hyperparameter tuning process. YearsExperience has one hidden layer with 1 node and then an output layer with one node to predict a numerical value. What is verbose By setting verbose 0 1 or 2 you just say how do you want to see the training progress for each epoch. The range of values to consider for the learning rate is less than 1. You will know more about it in the next module. 01 and this may represent a good starting point on your problem. RMSprop is an optimizer that s reliable and fast. Setting the batch size to a very small batch number can also cause instability. In data science numpy and pandas are most commonly used libraries. there will be same split for each time you run the code find the number of input features import Sequential from tensorflow. The sequential API is easy to use because you keep calling model. Learning rate is a key hyperparameter. It is referred to as sequential because it involves defining a Sequential class and adding layers to the model one by one in a linear manner from input to output. INDUS proportion of non retail business acres per town CHAS Charles River dummy variable 1 if tract bounds river 0 otherwise NOX nitric oxides concentration parts per 10 million RM average number of rooms per dwelling AGE proportion of owner occupied units built prior to 1940 DIS weighted distances to five Boston employment centres RAD index of accessibility to radial highways TAX full value property tax rate per 10 000 USD PTRATIO pupil teacher ratio by town B 1000 Bk 0. First try large batch size values. Implementing hyperparameter tuning with Keras Now we will go through the process of automating hyperparameter tuning using Random Search and Keras. Define the hyperparameters grid to be validated Takes hyperparameters hp and returns a Model instance Name of model metric to minimize or maximize Random seed for replication purposes Total number of trials model configurations to test at most. Summary of hyperparameter tuning Most machine learning problems require a lot of hyperparameter tuning. We can do a hyperparameter tuning procedure in two ways 1. Wait Before training the deep learning model let s understand the Deep Learning Model Life Cycle. the first model we built Exercise 2Test several epoch values to see the impact of varying this value when defining your model. Let s take a look at the implementation of Random Search with Keras following the steps 0. The test_size variable is where we actually specify the proportion of the test set. Why learning rate 0. While fitting the model a progress bar will summarize the status of each epoch and the overall training process. where you do not have the target values. we cannot analytically calculate the optimal learning rate for a given model on a given dataset. ai linear regression using keras and python 7cee2819a60c https heartbeat. You can see above how the loss cost i. com Deep Learning Bootcamp progress bar. If the training loss varies wildly that is the training loss jumps around decrease the learning rate. 1 is the learning rate compile the model fit the model evaluate the model play with batch size Replace with an integer compile the model fit the model Evaluate the model Import the GridSearchCV class 1. In other words the output is x if x is greater than 0 and the output is 0 if x is 0 or negative. Activation function decides whether a neuron should be activated or notReLU is defined mathematically as F x max 0 x. evaluate does this task automatically. Define the hyperparameters grid to be validated 3. From an API perspective this involves defining the layers of the model configuring each layer with a number of nodes and activation function and connecting the layers together into a cohesive model. ai linear regression using keras and python 7cee2819a60c Google Machine Learning Crash Course importing packages to perform calculations to read data to visualise In read_csv function we have passed the location to where the file is located at dphi official github page Input Variables features output variables features import train_test_split Assign variables to capture train test split output X_train independent input feature data for training the model y_train dependent output feature data for training the model X_test independent input feature data for testing the model will be used to predict the output values y_test original dependent output values of X_test We will compare this values with our predicted values to check the performance of our built model. Once the process is complete the hyperparameters and the best performing model are chosen. We re using RMSprop as our optimizer here. Linear Regression using tensorflow. Path to the working directory relative. Input variables are those quantities whose values are changed naturally in an experiment whereas output variable is the one whose values are dependent on the input variables. 01 Exercise 4Test several batch size values to see the impact of varying this value when defining your model. Implementing hyperparameter tuning with Sklearn2. It also requires that you select an algorithm to perform the optimization procedure. MEDV By convention input variables are represented with X and output variables are represented with y. CRIM per capita crime rate by town ZN proportion of residential land zoned for lots over 25 000 sq. View Data Separating Input Features and Output FeaturesBefore building any machine learning model we always separate the input variables and output variables. Resources https machinelearningmastery. Now what is Sequential API Sequential API The sequential API is the simplest API to get started with Deep Learning. com tensorflow tutorial deep learning with tf keras https heartbeat. However not all hyperparameter combinations are used to train a new model only some selected randomly while a process of cross validation to measure the performance of temporal models. RMSprop stands for Root Mean Square Propagation. MSE for batch size 40 while keeping epochs as 10 and learning rate as 0. keras import Dense from tensorflow. neural network architecture https dphi courses. Batch SizeWe can try and change the values of these parameters and see the performance of the model evaluate the model on X_test data Learning Rate A scalar used to train a model via gradient descent. Thus an epoch represents N batch size training iterations where N is the total number of examples. It requires you have new data for which a prediction is required e. Separate Input Features and Output Features7. Print the results of the best modelTo execute the hyperparameter tuning procedure we will use the keras tuner a library that helps you pick the optimal set of hyperparameters for your TensorFlow model. Define the hyperparameters grid to be validated3. ", "id": "manishkc06/build-your-first-deep-learning-model", "size": "19029", "language": "python", "html_url": "https://www.kaggle.com/code/manishkc06/build-your-first-deep-learning-model", "git_url": "https://www.kaggle.com/code/manishkc06/build-your-first-deep-learning-model", "script": "numpy.random train_test_split keras.wrappers.scikit_learn create_model kerastuner tensorflow.keras.layers cross_val_score numpy KerasRegressor model_builder Dense from tensorflow.keras.layers RMSprop matplotlib.pyplot seed     # seed helps you to fix the randomness in the neural network. Sequential from tensorflow.keras sklearn.model_selection pandas tensorflow.keras tensorflow.keras.optimizers GridSearchCV ", "entities": "(('result you', 'it'), 'be') (('pyplot pyplot', 'matplotlib framework'), 'plot') (('0 nothing', 'https dphi progres_bar courses'), 'show') (('this', 'training process'), 'involve') (('number', 'tensorflow'), 'be') (('visible layer', 'first hidden layer'), 'note') (('TunningThe Hyperparameter hyperparameters', 'here notebook'), 'predict') (('Set', 'model'), 'define') (('descent gradient algorithm', 'gradient'), 'multiply') (('DataPandas Loading module', 'files'), 'use') (('example', 'such'), 'pass') (('you', 'TensorFlow model'), 'print') (('max_trial models', 'search'), 'note') (('summary', 'hyperparameter tuning process'), 'let') (('input', 'i.'), 'mean') (('you', 'Keras'), 'be') (('don term you', 'error algorithm'), 'know') (('just how you', 'epoch'), 'verbose') (('where we', 'test set'), 'be') (('Setting', 'also instability'), 'cause') (('perhaps other that', 'loss'), 'involve') (('When you', 'finally mean i.'), 'mean') (('It', 'most used matplotlib'), 'be') (('you', 'memory'), 'need') (('Unfortunately we', 'model'), 'provide') (('s', 'steps'), 'let') (('five steps', '1'), 'be') (('you', 'such mean squared error'), 'require') (('that', 'one input'), 'define') (('we', 'input output always variables variables'), 'build') (('sequential API', 'Deep simplest Learning'), 'now') (('Matplotlib', 'data visualization'), 'use') (('as sequential it', 'output'), 'refer') (('also you', 'model training process'), 'require') (('median value', '1000'), 'be') (('MSE', 'learning just rate'), 'change') (('you', 'model'), 'do') (('model', '0'), 'sort') (('both', 'tf'), 'have') (('default traditional value', 'learning rate'), 'be') (('Summary', 'hyperparameter tuning'), 'require') (('RMSprop', 'Root Mean Square Propagation'), 'stand') (('hyperparameter search that', 'hyperparameters'), 'be') (('this', 'problem'), '01') (('Total number', 'trials model configurations'), 'define') (('best performance', 'hyperparameters'), 'choose') (('test Load new data', 'prediction'), 'print') (('you', 'layers'), 'add') (('how loss', 'cost i.'), 'see') (('also you', 'optimization procedure'), 'require') (('we', 'sklearn'), 'have') (('notReLU', 'F mathematically max'), 'decide') (('We', 'learning parallely deep model'), 'take') (('model', 'model'), 'be') (('We', 'two ways'), 'do') (('com dphi official', 'master Boston_Housing Testing_set_boston'), 'Datasets') (('Neural Network ArchitectureHere we', 'Neural Network'), 'give') (('you', 'then architecture'), 'require') (('GridSearchCV process', 'learning rate'), 'print') (('steadily steeply then more slowly slope', 'zero'), 'say') (('you', 'neural network'), 'help') (('20', 'code'), 'split') (('learning Instead good enough rate', 'trial'), 'discover') (('DIS', 'town B'), 'variable') (('why we', 'first place'), 'be') (('performance', 'gradient descent'), 'try') (('you', 'training dataset'), 'be') (('Neural Networks', 'one hidden layers'), 'consist') (('You', 'next module'), 'know') (('s', 'Deep Learning Model Life Cycle'), 'wait') (('first we', 'when model'), 'model') (('you', 'degradation'), 'decrease') (('best performing model', 'hyperparameters'), 'choose') (('2', 'https dphi verbose 2 courses'), 'verbose') (('Pandas', 'data processing frames'), 'use') (('We', 'optimizer'), 'use') (('loss', 'which'), 'seek') (('which', 'Keras'), 'integrate') (('which', 'case'), 'access') (('training loss', 'more epochs'), 'converge') (('prediction', 'life final cycle'), 'make') (('where N', 'total examples'), 'represent') (('you', 'model error'), 'require') (('you', 'model'), 'worry') (('that', 'Learning rate four defined values'), 'go') (('target variable', 'USD s.'), 'refer') (('that', 'Boston US'), 'work') (('even they', 'already system'), 'Loading') (('Functional you', 'later modules'), 'define') (('hyperparameter', 'GridSearCV'), 'implement') (('0001', 'general dataset'), 'run') (('crime rate', '25 000 sq'), 'zone') (('It', 'learning deep networks'), 's') (('it', 'learning first deep model'), 'set') (('hyperparameter However combinations', 'temporal models'), 'use') (('Now we', 'Random Search'), 'implement') (('we', 'that'), 'want') (('Here we', 'Sequential API'), 'define') (('performance', 'Gradient Descent process'), 'be') (('we', 'given dataset'), 'calculate') (('this', 'houce'), 'try') (('training loss', 'learning too slowly rate'), 'increase') (('sake', 'np'), 'choose') (('This', 'training process'), 'be') (('We', 'github location https given raw'), 'have') (('We', 'data'), 'use') (('values', 'variable other i.'), 'know') (('you', 'model'), 'require') (('cross validation process', 'provisional models'), 'use') (('s', 'testing set'), 'let') (('training loss', 'learning rate'), 'be') (('It', 'training dataset'), '01') (('prediction', 'which'), 'require') (('X variables', 'y.'), 'MEDV') (('defined model', 'estimator'), 'observe') (('we', 'result'), 'by') (('42 this', 'split i.'), 'go') (('We', 'Machine learning model i.'), 'build') (('You', 'dataset'), 'experiment') (('data you', 'hyperparameters'), 'remember') (('Then we', 'y_test 5'), 'evaluate') (('output', '0'), 'be') (('model', 'much training'), 'be') (('range', 'learning rate'), 'be') (('MSE', '0'), 'change') (('Numpy', 'medians square roots'), 'require') (('you', 'model'), 'call') (('1', 'learning rate model'), 'be') (('this', 'together cohesive model'), 'involve') (('values', 'input variables'), 'be') (('how accurately model', 'outcomes'), 'split') (('csv You', 'output i.'), 'congratulation') (('you', 'model'), 'learn') (('Lowering', 'epochs'), 'be') (('efficiently model', 'model one converge'), 'help') (('We', 'built model'), 'use') (('you', 'model'), 'be') (('setting', 'converging'), 'note') (('which', 'linear rectified unit'), 'be') (('model', 'GridSearchCV class'), 'be') (('entire dataset', 'memory'), 'dataset') (('YearsExperience', 'numerical value'), 'have') (('progress bar', 'epoch'), 'summarize') (('we', 'that'), 'import') "}