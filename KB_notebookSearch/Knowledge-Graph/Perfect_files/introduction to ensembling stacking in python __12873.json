{"name": "introduction to ensembling stacking in python ", "full_name": " h1 Introduction h1 Feature Exploration Engineering and Cleaning h2 Visualisations h1 Ensembling Stacking models h3 Helpers via Python Classes h3 Out of Fold Predictions h1 Generating our Base First Level Models h1 Second Level Predictions from the First level Output h3 Second level learning model via XGBoost h3 Conclusion ", "stargazers_count": 0, "forks_count": 0, "description": "Correlation Heatmap of the Second Level Training set There have been quite a few articles and Kaggle competition winner stories about the merits of having trained models that are more uncorrelated with one another producing better scores. Create a new feature Title containing the titles of passenger names Group all non common titles into one single grouping Rare Mapping Sex Mapping titles Mapping Embarked Mapping Fare Mapping Age Feature selection Some useful parameters which will come in handy later on for reproducibility set folds for out of fold prediction Class to extend the Sklearn classifier Class to extend XGboost classifer Put in our parameters for said classifiers Random Forest parameters max_features 0. A value of 0 suppresses all text while a value of 3 outputs the tree learning process at every iteration. Creating NumPy arrays out of our train and test sets Great. Anyway please check out his script here Stacking Starter 1 by Faron Now onto the notebook at hand and I hope that it manages to do justice and convey the concept of ensembling in an intuitive and concise manner. Therefore we will invoke this very useful attribute via our function earliand plot the feature importances as suchSo I have not yet figured out how to assign and store the feature importances outright. There you will find that there are a whole host of other useful parameters that you can play around with. In short a class helps to extend some code program for creating objects variables for old school peeps as well as to implement functions and methods specific to that class. Gradient Boosting classifer 5. Implementing a good cross validation strategy in training the models to find optimal parameter values 2. Anyways please feel free to leave me any comments with regards to how I can improve 1 https www. io en latest Anyways we call an XGBClassifier and fit it to the first level train and target data and use the learned model to predict the test data as follows Just a quick run down of the XGBoost parameters used in the model max_depth How deep you want to grow your tree. 5 AdaBoost parameters Gradient Boosting parameters max_features 0. This is good from a point of view of feeding these features into your learning model because this means that there isn t much redundant or superfluous data in our training set and we are happy that each feature carries with it some unique information. I ll still leave both features in for the purposes of this exercise. 2 Extra Trees Parameters max_features 0. To do so we will utilise the Seaborn plotting package which allows us to plot heatmaps very conveniently as follows Takeaway from the Plots One thing that that the Pearson Correlation plot can tell us is that there are not too many features strongly correlated with one another. com kaggle ensembling guide Load in our libraries Going to use these 5 base models for the stacking Load in the train and test datasets Store our passenger ID for easy access Some features of my own that I have added in Gives the length of the name Feature that tells whether a passenger had a cabin on the Titanic Feature engineering steps taken from Sina Create new feature FamilySize as a combination of SibSp and Parch Create new feature IsAlone from FamilySize Remove all NULLS in the Embarked column Remove all NULLS in the Fare column and create a new feature CategoricalFare Create a New feature CategoricalAge Define function to extract titles from passenger names If the title exists extract and return it. You hear of ensembles created at the highest level of Kaggle competitions which involves monstrous combinations of stacked classifiers as well as levels of stacking which go to more than 2 levels. Therefore I ll print out the values from the code above and then simply copy and paste into Python lists as below sorry for the lousy hack Create a dataframe from the lists containing the feature importance data for easy plotting via the Plotly package. AdaBoost classifer 4. As per the Sklearn documentation most of the classifiers are built in with an attribute which returns feature importances by simply typing in. Plotly Barplot of Average Feature Importances Having obtained the mean feature importance across all our classifiers we can plot them into a Plotly bar plot as follows Second Level Predictions from the First level Output First level output as new features Having now obtained our first level predictions one can think of it as essentially building a new set of features to be used as training data for the next classifier. In a nutshell stacking uses as a first level base the predictions of a few basic classifiers and then uses another model at the second level to predict the output from the earlier first level predictions. eta step size shrinkage used in each boosting step to prevent overfitting Producing the Submission file Finally having trained and fit all our first level and second level models we can now output the predictions into the proper format for submission to the Titanic competition as follows Steps for Further Improvement As a closing remark it must be noted that the steps taken above just show a very simple way of producing an ensemble stacker. Creating a Stacking ensemble Helpers via Python ClassesHere we invoke the use of Python s classes to help make it more convenient for us. For other excellent material on stacking or ensembling in general refer to the de facto Must read article on the website MLWave Kaggle Ensembling Guide 1. These base results will be used as new features Extra Trees Random Forest AdaBoost Gradient Boost Support Vector Classifier Create a dataframe with features Scatter plot size feature_dataframe AdaBoost feature importances. In creating my base classifiers I will only use the models already present in the Sklearn library and therefore only extend the class for that. However one cannot simply train the base models on the full training data generate predictions on the full test set and then output these for the second level training. Out of Fold PredictionsNow as alluded to above in the introductory section stacking uses predictions of base classifiers as input for training to a second level model. Ensembling Stacking modelsFinally after that brief whirlwind detour with regards to feature engineering and formatting we finally arrive at the meat and gist of the this notebook. The more uncorrelated the results the better the final score. Random Forest classifier 2. Interactive feature importances via Plotly scatterplots I ll use the interactive Plotly package at this juncture to visualise the feature importances values of the different classifiers via a plotly scatter plot by calling Scatter as follows Now let us calculate the mean of all the feature importances and store it as a new column in the feature importance dataframe. Beware if set to too high a number would run the risk of overfitting as one would be growing the tree too deep verbose Controls whether you want to output any text during the learning process. Till next time Peace Out 1 http mlwave. Support Vector Machine Parameters Just a quick summary of the parameters that we will be listing here for completeness n_jobs Number of cores used for the training process. com arthurtok titanic simple stacking with xgboost 0 808 Feature Exploration Engineering and Cleaning Now we will proceed much like how most kernels in general are structured and that is to first explore the data on hand identify possible feature engineering opportunities as well as numerically encode any categorical features. IntroductionThis notebook is a very basic and simple introductory primer to the method of ensembling combining base learning models in particular the variant of ensembling known as Stacking. Here are two most correlated features are that of Family size and Parch Parents and Children. For any newcomers to programming one normally hears Classes being used in conjunction with Object Oriented Programming OOP. 808 which is good enough to get to the top 9 and runs just under 4 minutes. Therefore this cuts out redundancy as won t need to write the same methods five times if we wanted to invoke five different classifiers. values xaxis dict title Pop ticklen 5 zeroline False gridwidth 2 Create the new column containing the average of values axis 1 computes the mean row wise xaxis dict title Pop ticklen 5 zeroline False gridwidth 2 Generate Submission File. Second level learning model via XGBoostHere we choose the eXtremely famous library for boosted tree learning model XGBoost. The Titanic dataset is a prime candidate for introducing this concept as many newcomers to Kaggle start out here. Essentially we have created a wrapper class to extend the various Sklearn classifiers so that this should help us reduce having to write the same code over and over when we implement multiple learners to our stacker. Some additional steps that may be taken to improve one s score could be 1. My other standalone Kaggle script 2 which implements exactly the same ensembling steps albeit with different parameters discussed below gives a Public LB score of 0. Having now concatenated and joined both the first level train and test predictions as x_train and x_test we can now fit a second level learning model. Bear with me for those who already know this but for people who have not created classes or objects in Python before let me explain what the code given above does. Therefore I am pretty sure there is a lot of room to improve and add on to that script. Introduce a greater variety of base models for learning. These models can all be conveniently invoked via the Sklearn library and are listed as follows 1. Please check out the full description via the official Sklearn website. n_estimators Number of classification trees in your learning model set to 10 per default max_depth Maximum depth of tree or how much a node should be expanded. ConclusionI have this notebook has been helpful somewhat in introducing a working script for stacking learning models. This means that when you want to create an object classifier you have to give it the parameters of clf what sklearn classifier you want seed random seed and params parameters for the classifiers. Again credit must be extended to Faron and Sina. Allow a handful of minutes for the chunk of code below to run. For further information about the algorithm check out the official documentation 1. The material in this notebook borrows heavily from Faron s script although ported to factor in ensembles of classifiers whilst his was ensembles of regressors. values xaxis dict title Pop ticklen 5 zeroline False gridwidth 2 Scatter plot size feature_dataframe AdaBoost feature importances. Well it is no surprise that our task is to somehow extract the information out of the categorical variables Feature Engineering Here credit must be extended to Sina s very comprehensive and well thought out notebook for the feature engineering ideas so please check out his work Titanic Best Working Classfier 1 by Sina 1 https www. Extra Trees classifier 3. Beware if set to too high a number might run the risk of overfitting. The rest of the code are simply methods of the class which simply call the corresponding methods already existing within the sklearn classifiers. def init Python standard for invoking the default constructor for the class. feature_importances_. As per the code below we are therefore having as our new columns the first level predictions from our earlier classifiers and we train the next classifier on this. Pairplots Finally let us generate some pairplots to observe the distribution of data from one feature to the other. Generating our Base First Level Models So now let us prepare five learning models as our first level classification. I myself am quite a newcomer to the Kaggle scene as well and the first proper ensembling stacking script that I managed to chance upon and study was one written in the AllState Severity Claims competition by the great Faron. Once again we use Seaborn to help us. Furthermore since having mentioned about Objects and classes within the OOP framework let us now create 5 objects that represent our 5 learning models via our Helper Sklearn Class we defined earlier. It was built to optimize large scale boosted tree algorithms. The larger the more conservative the algorithm will be. gamma minimum loss reduction required to make a further partition on a leaf node of the tree. com mmueller allstate claims severity stacking starter run 390867 2 https www. In the section of code below we essentially write a class SklearnHelper that allows one to extend the inbuilt methods such as train predict and fit common to all the Sklearn classifiers. Having prepared our first layer base models as such we can now ready the training and test test data for input into our classifiers by generating NumPy arrays out of their original dataframes as follows Output of the First level Predictions We now feed the training and test data into our 5 base classifiers and use the Out of Fold prediction function we defined earlier to generate our first level predictions. Feature importances generated from the different classifiers Now having learned our the first level classifiers we can utilise a very nifty feature of the Sklearn models and that is to output the importances of the various features in the training and test sets with one very simple line of code. com sinakhorami titanic titanic best working classifierAll right so now having cleaned the features and extracted relevant information and dropped the categorical columns our features should now all be numeric a format suitable to feed into our Machine Learning models. Furthermore even though stacking has been responsible for many a team winning Kaggle competitions there seems to be a dearth of kernels on this topic so I hope this notebook can fill somewhat of that void. However before we proceed let us generate some simple correlation and distribution plots of our transformed dataset to observe ho Visualisations Pearson Correlation Heatmap let us generate some correlation plots of the features to see how related one feature is to the next. If set to 1 all cores are used. 1 https xgboost. This runs the risk of your base model predictions already having seen the test set and therefore overfitting when feeding these predictions. 2 Support Vector Classifier parameters Create 5 objects that represent our 4 models Create Numpy arrays of train test and target Survived dataframes to feed into our models Creates an array of the train data Creats an array of the test data Create our OOF train and test predictions. ", "id": "arthurtok/introduction-to-ensembling-stacking-in-python", "size": "12873", "language": "python", "html_url": "https://www.kaggle.com/code/arthurtok/introduction-to-ensembling-stacking-in-python", "git_url": "https://www.kaggle.com/code/arthurtok/introduction-to-ensembling-stacking-in-python", "script": "get_oof predict SklearnHelper(object) xgboost sklearn.svm numpy seaborn train SVC plotly.tools KFold matplotlib.pyplot (RandomForestClassifier plotly.offline plotly.graph_objs pandas sklearn.cross_validation fit AdaBoostClassifier get_title __init__ sklearn.ensemble feature_importances ", "entities": "(('we', 'notebook'), 'arrive') (('Here two most correlated features', 'Family size'), 'be') (('which', 'feature importances'), 'build') (('Again credit', 'Faron'), 'extend') (('Therefore I', 'script'), 'be') (('2 which', '0'), 'give') (('notebook', 'void'), 'seem') (('It', 'tree large scale boosted algorithms'), 'build') (('which', 'enough top 9'), '808') (('I', 'exercise'), 'leave') (('you', 'learning process'), 'run') (('that', 'one s score'), 'be') (('I', 'that'), 'use') (('normally Classes', 'Object Oriented Programming OOP'), 'hear') (('as well which', 'more than 2 levels'), 'hear') (('five times we', 'five different classifiers'), 'cut') (('we', 'level earlier first predictions'), 'feed') (('material', 'regressors'), 'borrow') (('how I', 'https 1 www'), 'feel') (('notebook', 'Stacking'), 'be') (('one', 'Sklearn common classifiers'), 'write') (('it', 'intuitive manner'), 'check') (('Extra Random Forest AdaBoost Gradient Boost Support Vector Classifier', 'feature_dataframe AdaBoost feature importances'), 'use') (('title', 'it'), 'go') (('The', 'more results'), 'uncorrelate') (('how much node', 'max_depth Maximum tree'), 'set') (('it', 'more us'), 'invoke') (('I', 'feature yet how importances'), 'invoke') (('Therefore I', 'Plotly package'), 'print') (('steps', 'ensemble stacker'), 'output') (('which', 'sklearn already classifiers'), 'be') (('However one', 'level second training'), 'train') (('over when we', 'stacker'), 'create') (('general that', 'as well numerically categorical features'), 'simple') (('we', 'this'), 'have') (('com mmueller allstate claims severity', 'https starter 390867 2 www'), 'run') (('many newcomers', 'Kaggle'), 'be') (('values', 'xaxis dict title Scatter plot 5 zeroline False gridwidth 2 size'), 'ticklen') (('we', 'learning now second level model'), 'fit') (('This', 'therefore when predictions'), 'run') (('one', 'next classifier'), 'obtain') (('Now us', 'feature importance dataframe'), 'importance') (('we', 'Helper Sklearn Class'), 'let') (('more one', 'better scores'), 'set') (('So now us', 'level first classification'), 'generate') (('too high number', 'overfitting'), 'run') (('Finally us', 'other'), 'let') (('value', 'iteration'), 'suppresse') (('notebook', 'learning models'), 'be') (('that', 'code'), 'generate') (('you', 'that'), 'find') (('models', '1'), 'invoke') (('we', 'tree learning boosted model'), 'model') (('Pearson Correlation plot', 'too many strongly one'), 'utilise') (('how related one feature', 'next'), 'let') (('notebook', 'Titanic Best Working https 1 Sina 1 www'), 'be') (('feature', 'unique information'), 'be') (('How deep you', 'tree'), 'late') (('seed random seed', 'classifiers'), 'mean') (('code', 'what'), 'bear') (('study', 'great Faron'), 'be') (('that', 'OOF train predictions'), 'create') (('classifiers Random said Forest', 'parameters max_features'), 'create') (('features', 'Machine Learning now suitable models'), 'com') (('dict title mean row wise xaxis Pop', 'Generate Submission 5 zeroline False gridwidth 2 File'), 'ticklen') (('we', 'training process'), 'Parameters') "}