{"name": "hubmap seresnext50 unet dice loss ", "full_name": " h1 Change Log h1 Helpers h1 Image paths generation h1 View images and masks h1 Dataset class h1 Augmentations h1 Model h1 Train val dataloaders h1 Train loop h1 Results visualization h1 \u0421ombining prediction masks h1 Inference loop ", "stargazers_count": 0, "forks_count": 0, "description": "com bguberfain memory aware rle encoding with transposed mask the image should be transposed This simplified method requires first and last pixel to be zero extract tile numbers padded and reduced shape of corresponding image one slide predictions. 5 threshold Helpers Image paths generation View images and masks Dataset class Augmentations Model Train val dataloaders Train loop Results visualization \u0421ombining prediction masks Inference loop https www. com mariazorkaltseva hubmap train test patches generation Configuration Tile size 256 without overlaping contain artifactsreduce rate 4Batch_size 16 on train val set 1 on test setAugmentations YesModel UNET architecture with SeResNext 50_32x4d encoderOptimizer Adam with lr 0. 0001Scoring function Dice lossMetric IoU with 0. Change LogVersion 1 augmentations added UNET model with SeResNext 50_32x4d encoder predictions visualization Version 2 added predictions by one slide padded and resized images masks concatenation Version 5 added inference loop and submission This kernel is based on my previous one HuBMAP train test patches generation https www. ", "id": "mariazorkaltseva/hubmap-seresnext50-unet-dice-loss", "size": "928", "language": "python", "html_url": "https://www.kaggle.com/code/mariazorkaltseva/hubmap-seresnext50-unet-dice-loss", "git_url": "https://www.kaggle.com/code/mariazorkaltseva/hubmap-seresnext50-unet-dice-loss", "script": "torch.nn.functional extract_slide_tiles albumentations train_test_split segmentation_models_pytorch HuBMAPDataset(D.Dataset) get_training_augmentation Image numpy cv2 to_tensor display_pil_images torch.nn sort_by tqdm rle_encode_less_memory matplotlib.pyplot PIL sklearn.model_selection tifffile pandas tqdm.notebook torch.utils.data __len__ __init__ get_validation_augmentation get_preprocessing visualize __getitem__ ", "entities": "(('images masks inference concatenation 5 added kernel', 'train test patches generation https previous one HuBMAP www'), 'add') (('com mariazorkaltseva hubmap train test patches generation', 'lr'), 'set') (('tile zero numbers', 'corresponding image'), 'encode') "}