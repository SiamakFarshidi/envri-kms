{"name": "pokemon data analysis tutorial ", "full_name": " h2 Table of Contents h1 Exploratory Data Analysis h2 Missing Values h2 Find the top 10 Pokemon with the worse win percentage h2 Find the top 10 Pokemon with the best win percentage h2 Basic statistics of the data h2 Visualizing the Data h2 Seaborn Pairplot h3 Seaborn PairGrid h2 Correlation Table h1 Exploratory Data Analysis Conclusions h3 What else are we missing and further analysis h1 Machine Learning h2 Preprocessing Data h2 Feature Scaling h1 Regression Models h2 Multiple Linear Regression h2 Polynomial Regression h2 SVM h2 Decision Tree Regression h2 Random Forest h2 XGBoost h1 Principle Component Analysis h2 Validation h1 Conclusion ", "stargazers_count": 0, "forks_count": 0, "description": "I also would like to point out two other oberservations. 1 Select Data Select Data 2. Lastly we will utilize an unsupervised learning method called Principle Component Analysis which transforms the data space and reduces the dimensionality of the problem. In this kernal we will be using regression models such as Multiple Linear Regression Polynomial Regression SVM Decision Tree Regression Random Forest XGBoost. All models performed significantly worse under PCA. In addition some machine learning models we might want to standardize or normalize the data. A level 1 Pikachu would lose to a level 50 Blastoise regardless of the fact Pikachu has the type advantage. Parameter tuningI combine steps 4 and 5 together since step 5 is relatively short. Some Pokemon have secondary classification. Visualizing the DataAs I stated in the begining I think data analyst often get too excited not that there is anything wrong with that about the project and they begin their exploration with too much detail. The greater the slope m the more correlated the values are in determining the liklihood of winning. com rtatman which pokemon win the most notebook. I will do my best to explain each figure and calculation and how it could be useful to a business in the Pokemon Universe. Type 2 there is are NA values. Regression scatter plot in the upper right 2. Why did we plot the same figure twice The top plot with one solid color was to look at the relationship between the independent and dependent variable as a whole. There are 800 different pokemon in the dataset and 50k battles recorded Let s begin by finding the missing pokemon Assuming that the indexes follow the same numbering system as the National Pokedex Number we can look up the missing Pokemon that falls between the two by looking him up. It is a TV series that has expanded into video games card games movies merchandise and everything inbetween. We will want to explore that instance maybe we can fix it. For example one pokemon might be able to breath fire and fly. Speed and Attack Defense doesn t win championships in the Pokeverse. 1 Seaborn Pairplot Seaborn Pairplot 1. This gives the average amount our predictions were off. Flying dragon and electric type pokemon have a significant win percentage over the other types. I will then visualize some results using Matplotlib and Seaborn. In addition Schuckle was a pokemon that lost all of his battles. I appreciate any and all comments questions or suggestions and I will do my best to respond in a timely manner. I belive we shoud start very basic and take one step at a time. The most obvious reason to me are the vast differences in their stats. Since we know water pokemon are weak agaisnt grass or electric it might be a good idea to keep one of those types in our battle squad. Thus we would expect to see a simialr pattern if we were to build a heat map or a correlation table. The goal of this technique is to reduce the amount of features we are using for our model and simplify. Machine Learning Machine Learning 2. If we make some predictions and the data is well outside the range we are working with then we can make a reasonable assumption that our model is not working correctly. Lets aggregate our win percentage by type 1. 4 Regression Models Regression Models 2. While this seems stright forward given that we have looked at the data it might not always be apparent to those who have not. As you can tell I can have two different kinds of graphs on the upper and lower halves of the grid. Regression ModelsI put each regression model into a function so that I don t have to rewrite the code when I change the dimensionality of the data. So its Type 1 would be fire but it would also can fly so its Type 2 would be flying. 2 Polynomial Regression Polynomial Regression 2. Team Rocket should have pokemon in their battle squads to counter these types. For these reasons even though the Mega Aerodactyl wins more often the business cost might outweight the potential business revenue. Remeber its not enought to simply state the results. Exploratory Data Analysis ConclusionsThis is where we communicate all the insight we have developed into a concise manner. It is the process of using given data and combining it in come combination to create new variable or features to be used in the analysis and is an important part of machine learning. 3 Exploratory Data Analysis Conclusion Exploratory Data Analysis Conclusion 2. I did not expect these results. The Pokemon type that win the least are fairy rock steel poison. Exploratory Data Analysis Exploratory Data Analysis 1. My plans are as followsvisualization add several more seaborn bar plots pie charts ect Machine Learning I want to add these machine learning approaches as a simple implementation and practice. From there we notice that there are some pokemon that dont have any recoreded battles. However simply creating visualizations and preditions is not enough to drive decisions in the business world. I may eventually work on step 6 parameter tuning however this is a much more in depth and complex subject. Run the machine learning algorithms using the data after PCA. The loadings are the correlation coefficients between the variables and factors. This can be difficult because there in not much direction given for the analysis. In this section I will be exploreing these relationships as well as some other visualizations that will better explain the trends in the Pokeverse. Pokemon Type Weaknesses https pokemondb. The Pokemon type that win the most are flying dragon electric and dark. Think of it as a similar concept to baby boomers and millennials 2. Re run the code but change n_components from 2 to the desired number. If you have these pokemon fairy rock steel poison you should avoid wasting resources and release any you have into the wild so you can reduce your overhead cost. It could be because of a combiantion of the parameters I am using for each of the models. From a quick glance it appears that attack and speed are significantly higher in Pokemon that win. Below we develope the new feature add it to our data set then we merge the two datasets. I defined the indepenent variables to be HP Attack Defense Sp. It uses linear algebra to tranform the data into a new space of principle components. As you drive into the data there might be anolomlies that dont make sense but you have a gut feeling that there might be a correlation to the outcome. Missing Values Missing Values 1. I was thinking maybe we would see dragon type pokemon clustered at the higher end of win percentage. It our job to ask what else is missing or what further analysis can we do given more data What else are we missing and further analysis I m not sure if this data is similar to the video game but maybe pokemon level ie 1 100 plays a role in this. These are regression plots with a line of best fit. While it might be interesting to look at how the independent features are correlated I think for our business problem we investigate the features correlated to win. The model with the least error was the XGBoost with reduced factors. Win Percentage values range 0 1 while the independent vairables HP Attack. This is why understanding the buisness and where the data is coming from is so very crutial to helping the business out. This was the case where we only used attack and speed to predict the win percentage. Select Data Preprocessing DataThe data is broken into a testing and training to prevent against over fitting. Find the top 10 Pokemon with the worse win percentage Find the top 10 Pokemon with the best win percentageThere is a clear difference between Poekmon that win and lose. The reason I find this helpful is it gives a better understanding of the range of values we are working with and the average of these values. Thus we will want our analysis to be directed towards finding the best pokemon. We begin by replicating the regplot to that we can see it better. Mean Absolute Error2. We can see that water normal bug and grass are the most common type 1 and flying ground and poison are the most common type 2. If you have looked through the code you will see that I used mean absolute error. Water normal bug and grass are the most common type 1 and flying ground and poison are the most common type 2. Breaking down the data further it was subset by type 1 in hopes that a new pattern would appear. 3 SVM SVM 2. For most of the independent variables look realtively normal distribution with a right skew. There are several winning pokemon with the Prefix Mega. Geographic location of where to find the different Pokemon would be a tremendous help into advising Team Rocket. My hypothesis is that there are many pokemons whos attacks are ineffective while the other pokemon is flying thus giving the other pokemon a significant advantage. If variable A ranges 1 1million and variable B ranges 0 1 variable A will completly dominate B. But the message I want to send is to think of new ways to continue to break down the data and dive deeper. There are two sub categories of supervised learning and those are regression and classification. The more components the more variance the model will have. Getting textual review data about what people think about each pokemon could be helpful in understanding how Team Rocket could train them. 2 Preprocessing Data Preprocessing Data 2. However the density for the win percentage is different. Looking at the features with the highest correlation to winning which are speed and atatck. Looks like our inital hunch was correct There were some Pokemon that did not battle. 0 which is perfectly positively correlated. Update his name in the database. Conclusion Conclusion Data analysis is a powerful tool. Esentially the slope of the line y mx b where m is the slope is the correlation value between the two variables. Also if we were to fold the matrix in half down the diagonal it would be perfectly semmetical. Try and relate it back to the Team Rocket business model. In this case of Mega vs non Mega maybe finding Mega pokemon in the wild is much more difficult and cost a lot more resources ie Time pokeball quality more potions and stronger pokemon to catch it. Def Speed and the dependent variable to be Win Percentage. 5 Principle Component Analysis Principle Component Analysis 2. Start shallow and dive deeper As we explore the data I think its best practice to start the investigation at a higher lever then work our way down and traverse the data. Just by eye balling it not the most mathmematically correct method but it appears that speed and attack have the largest relationship to winning. ConclusionThis kernel and analysis are incomplete. If we look back at the top 10 most winning pokemon all have speeds over 100 and attacks over 100 except for Greninja s attack As data consultants it might not be enough to only work with this dataset. We need powerful attacks and quickness. The bivariate desity plots cannot plot due to the different scale of values. The figure with colors is more pleasant to look at and when discussing results with Team Rocket executives I would used the Pokemon Feature Correlation plot. 6 Validation Validation 3. To correct the issue we would need to run a grid search with k folds cross validation. net wiki List_of_Pok C3 A9mon_by_National_Pok C3 A9dex_number. 2 Visualizing the Data Visualizing the Data 1. Understand the business Team Rocket funds their illegal activities through winning pokemon battles and tournaments. 2 Correlation Table Correlation Table 1. We wil then try to reduce the number of features being used and run the model again. I will be looking at missing values and getting some simple calcualtions in. Let s break down the task. Bivariate Denisty plot with contour levels In the bottow row we see 6 empty graphs. Root Mean Squared Error4. The diagonal of the plot all the correlations are 1. In our case this would be Type 1 Type 2 Generation and Lengendary. Exploratory Data AnalysisWe begin by importing the proper libraries files and taking a look at what we re dealing with Missing ValuesSome quick notes on my initial thought and comments about the data. I chose to do 80 to 20 There is no correct ratio to split it depends on the size of the data you are working with. We know from the TV show that Pokemon have their own personalities some pokemon are stubborn don t work well with others or listen to their masters. 4 Regression Tree Regression Tree 2. It can also be normalized or transformed using PCA which we will use later. there are 1 million grass type 1 pokemon in the world what it doesnt tell me is which attributes are most apparent. I do realize the type of Pokemon is very important to the outcome of the battle for simplicity purposes I plan on leaving that out for now and may revisit this issue in the future. The structure is as follows Table of Contents 1. Validate model 6. For example a water type pokemon. Some poemon don t have a secondary type thus the NA value. I will conclude the venture with some machine learning and PCA to try and predict the win percentage of the pokemon. 3 Feature Scaling Feature Scaling 2. Primeape is the missing Pokemon. Could there be pokemon that didnt battle at all What I do now is caculate the win percentage of each pokemon and add that feature to the data frame. Poor Shuckle It appears that he has very strong defense but is very weak in all other catergories. I am interested in improving my python skills so I will replicate her work from R to python and develop further analysis. Even though it doesnt tell me the exact population ie. We can start to analyze what kinds of pokemon are used at the competative level. Explained Variance ScoreThe above table provides a comparision of the mean absolute error for each machine learning model and the different dimensionality approaches we took. Can we get the data of pokemon battle squads from previous tournaments. 1 Multiple Linear Regression Multiple Linear Regression 2. I broke up the data into a smaller subset for this section. Other metrics are as follows. I am not sure the difference between Mega Aerodactyl and regular Aerodactyl but I m confident that plays a role. Fit data to model predict 5. I suppose the saying the best offense is a good defense doesnt apply in the Pokemon universe. You will notice that the code looks pretty much identical for each model. Preprocess data 3. Part of this notebook is being built off the process used in Rachel Tatman s kernal https www. Pokemon is a global icon to children and adults everywhere. 6 XGBoost XGBoost 2. Standardizing is important because it brings all the variables withing the same range. Comparing the density plot with the frequency plot in the pairplot for Win Percentage we see a more uniformly distribution of the rate at which pokemon win with a slight decrease of the frequency at higher levels. Each principle component explains some variance of the dataset. This means a majority of the pokemon stats are on average higher than the median value for the set. Seaborn Pairplot Seaborn PairGridWow this figure has a lot going on But thats okay we only need to look at it peice by piece do derive some meaningful understanding. This is becase the diagonal compares each feature to itself. We can see that the number of dimensions is different in the total wins. As a data consultant Team Rocket gives you this data set and ask you to come up with some useful insight on how to improve their business. I used this link https bulbapedia. This can only mean there is one pokemon that was unable to win during it s fights. Transform Data 4. Lets take a closer look into these two plots given below. SVM Regression Tree Random Forrest XGboot improve the PCA section by looking at the loadings of the principle components validation add the other validation metrics Final thoughts relate back to our business example I will continue to edit the grammar and update my commentary of graphs throughout this process Thank you for taking the time to read my kernel If you found it useful or helpful please give it an upvote. This is what I am thinking. Which actually brings up a good point. Density Plot down the diagonal 3. The upper right section is the most easy to understand and probably the most useful for our analysis. Feature ScalingFrom there the data is standardized. Hopefully this can help us lean more about which pokemon win. One you look at how much variance each independent variable provide decide how many components you want for the model. range from 0 200. The principle components consist of component loadings. The diagonal shows the density plots. Drive Business Decisions Once out analysis is complete relate it back to the business and make suggestions for areas Team Rocket could improve in. How this can be usefull is possibly predicting the liklihood of battling a particular type of pokemon and having a counter type to it. This will make merging the two datasets easier. I keep Type 1 in the data because later on I want to see how the relationships break down by type. She has done some fanstatic work and does an excellent job explaing her thought process. I think this might be useful down the road. Thus we scale A to capture the variances of each vairable. Lets find the pokemon that did not win a single fight. Correlation TableThe table and the correlation figure provide the exact same information. The top half above the diagonal provides the same information as the lower half. B would essentially become negligible. The process for machine learning can be broken into several steps. The motivation behind this analysis is to further understand the dynamics of the pokemon universe through data. In the PairGrid above we see 3 types of graphs 1. In this stage we can also encode any categorical variables we may have. The question still remains how do we know how accurate our predictions are Well there are many metrics that the Sklearn library provides us. This is because I am a template that works very well for easy implementation Feel free to use this structure The only difference is the library we are using and when we initialize the regressor object. Validation So far we have fited our data to various regression models and predicted the likilhood of a pokemon winning a battle. Later on we will use some machine learning techniques to predict their liklihood of winning. What I am most interested in is the relationship between each independent variable and the dependent variable Win Percentage. We then look at the shape of the data frames and find a very interesting anomaly. Machine LearningWhat is a Kaggle kernel without throwing in some machine learning Machine learning is broken up into two categories supervised learning and unsupervised learing. There is one name that is missing. For this dataset we want to build a model that will predict the liklihood of a pokemon winning a battle. Lets say a new pokemon is discovered based on its stats can we predict how much it will win But before we do that let s do some more exploratory data analysis The process of creating the Win Percentage column is known as feature engineering. We can further break down the data by looking at type by generation legendary by generation stats by type stats by generation stats by lengendary and so on. There are 386 pokemon without a Type 2. The three approaches will be comapred. Basic statistics of the data The above table displays the basic statistics of each variable like the mean min max ect. I definetly didnt put very much effort into trying to optomize the results. Let s say there is a company called Team Rocket who makes millions of dollars off of pokemon battles I do not condone animal violence in any way shape or form and no Pokemon were injured during this analysis. 5 Rangom Forest Random Forest 2. To do this we will be testing several suprvised learning algortithms. To dive deeper lets take a look at if there any trends when we further break down the data into Type 1. Then we can dive deeper to try and determine which stats contribute most to winning or which type of pokemon win the most. Generation is which season of the show the pokemon come out. We can continually increase the granularity of our analysis to derive better understanding. I like the PairGrid better because it provides more customizable options compared to the Pairplot. From the combats dataset we will calculate the win percentage of each pokemon. Add Shuckle to the data so that the array lengths are the same. Multiple Linear Regression Polynomial Regression SVM Decision Tree Regression Random Forest XGBoost Principle Component Analysis Principle component analysis PCA is a dimensionality reduction technique. Communicating to Team Rocket Hey these are the kinds of Pokemon flying dragon electric and dark you should be spending your resources on because they win. For this data I did not use feature scaling. Perhaps asking my 7 year old cousin about the difference could help. ", "id": "mmetter/pokemon-data-analysis-tutorial", "size": "22113", "language": "python", "html_url": "https://www.kaggle.com/code/mmetter/pokemon-data-analysis-tutorial", "git_url": "https://www.kaggle.com/code/mmetter/pokemon-data-analysis-tutorial", "script": "math OneHotEncoder cm as cm train_test_split LinearRegression ml_svm pyplot pyplot as plt cm ml_decisiontree SVR sklearn.svm numpy RandomForestRegressor seaborn mean_absolute_error sklearn.tree sklearn.linear_model PCA correlation_matrix matplotlib.pyplot sklearn.model_selection pandas DecisionTreeRegressor ml_randomforest ml_linearreg matplotlib ml_xgboost LabelEncoder sklearn.decomposition sqrt sklearn.metrics sklearn.ensemble StandardScaler sklearn.preprocessing ", "entities": "(('maybe we', 'win percentage'), 'think') (('we', 'it'), 'begin') (('one pokemon', 'fire'), 'be') (('Thus we', 'vairable'), 'scale') (('Pokemon', 'global children'), 'be') (('I', 'data frame'), 'be') (('analysis', 'best pokemon'), 'want') (('model', 'reduced factors'), 'be') (('that', 'dragon electric'), 'fly') (('we', 'Multiple Linear Regression Polynomial Regression SVM Decision Tree Regression Random Forest such XGBoost'), 'use') (('min mean max', 'ect'), 'display') (('we', '6 empty graphs'), 'plot') (('pokemon', 'season show'), 'be') (('It', 'principle components'), 'use') (('that', 'clear Poekmon'), 'be') (('us', 'more which'), 'help') (('I', 'simple implementation'), 'be') (('he', 'very other catergories'), 'Shuckle') (('is', 'Pokemon good universe'), 'suppose') (('when we', 'Type'), 'take') (('who', 'always those'), 'be') (('that', 'least'), 'be') (('only one that', 'fights'), 'mean') (('then we', 'two datasets'), 'develope') (('Part', 'Rachel https kernal www'), 'build') (('as well other that', 'Pokeverse'), 'explore') (('we', 'concise manner'), 'be') (('I', 'Pokemon Feature Correlation plot'), 'be') (('when we', 'regressor object'), 'be') (('that', 'recoreded battles'), 'notice') (('that', 'battle'), 'want') (('we', 'which'), 'normalize') (('it', 'same range'), 'be') (('However density', 'win percentage'), 'be') (('array lengths', 'data'), 'Add') (('I', 'future'), 'realize') (('Pokemon', 'secondary classification'), 'have') (('that', 'significantly Pokemon'), 'appear') (('you', 'overhead cost'), 'avoid') (('where m', 'correlation two variables'), 'be') (('number', 'total wins'), 'see') (('Principle Component which', 'problem'), 'utilize') (('motivation', 'data'), 'be') (('1 100', 'this'), '-PRON-') (('it', 'diagonal'), 'be') (('we', 'previous tournaments'), 'get') (('It', 'machine important learning'), 'be') (('data consultant Team Rocket', 'how business'), 'give') (('this', 'case'), 'be') (('type Flying dragon pokemon', 'other types'), 'have') (('models', 'significantly PCA'), 'perform') (('we', 'also categorical variables'), 'encode') (('poemon don t', 'secondary type'), 'have') (('I', 'Matplotlib'), 'visualize') (('I', 'feature scaling'), 'use') (('they', 'resources'), 'communicate') (('predictions', 'average amount'), 'give') (('However simply creating', 'business world'), 'be') (('principle component', 'dataset'), 'explain') (('how relationships', 'type'), 'keep') (('how it', 'Pokemon Universe'), 'do') (('that', 'him'), 'be') (('we', 'pokemon'), 'dataset') (('pokemon', 'masters'), 'know') (('it', 'only dataset'), 'have') (('we', 'meaningful understanding'), 'have') (('those', 'sub two supervised learning'), 'be') (('above we', 'graphs'), 'see') (('features', 'business problem'), 'be') (('we', 'values'), 'be') (('A', 'completly B.'), 'range') (('better it', 'Pairplot'), 'like') (('kinds', 'competative level'), 'start') (('business Team Rocket', 'pokemon battles'), 'understand') (('She', 'thought process'), 'do') (('business more often cost', 'business potential revenue'), 'outweight') (('most type', 'most'), 'dive') (('it', 'upvote'), 'improve') (('where data', 'so very business'), 'be') (('diagonal', 'itself'), 'be') (('principle components', 'component loadings'), 'consist') (('agaisnt weak it', 'battle squad'), 'be') (('I', 'pokemon'), 'conclude') (('So far we', 'battle'), 'validation') (('attributes', 'me'), 'be') (('top half', 'lower half'), 'provide') (('we', 'heat map'), 'expect') (('we', 'model'), 'be') (('Later on we', 'liklihood'), 'use') (('that', 'single fight'), 'find') (('majority', 'set'), 'mean') (('code', 'pretty much model'), 'notice') (('structure', 'Contents'), 'be') (('I', 'mean absolute error'), 'look') (('they', 'too much detail'), 'think') (('com pokemon', 'most notebook'), 'rtatman') (('we', 'learning several suprvised algortithms'), 'test') (('bivariate desity plots', 'values'), 'plot') (('I', 'models'), 'be') (('speed', 'largest relationship'), 'ball') (('you', 'data'), 'choose') (('We', 'generation stats'), 'break') (('Even it', 'population exact ie'), 'tell') (('I', 'section'), 'break') (('process', 'feature engineering'), 'say') (('I', 'simple calcualtions'), 'look') (('Machine LearningWhat', 'learning'), 'be') (('I', 'results'), 'put') (('you', 'outcome'), 'be') (('upper right section', 'most probably most analysis'), 'be') (('TV that', 'movies merchandise'), 'be') (('Pikachu', 'type advantage'), 'lose') (('we', 'time'), 'belive') (('best practice', 'down data'), 'start') (('correlations', 'plot'), 'be') (('when I', 'data'), 'put') (('dimensionality different we', 'machine learning model'), 'Explained') (('Team Rocket', 'types'), 'have') (('I', 'grid'), 'have') (('new pattern', '1 hopes'), 'be') (('I', 'further analysis'), 'be') (('am', 'most independent variable'), 'be') (('Water normal bug', 'most common 1 ground'), 'be') (('pokemon', 'higher levels'), 'see') (('top plot', 'whole'), 'plot') (('4 together step', 'steps'), 'combine') (('non maybe finding', 'ie Time pokeball quality more stronger it'), 'in') (('We', 'better understanding'), 'increase') (('Team how Rocket', 'them'), 'be') (('Select Preprocessing DataThe data', 'fitting'), 'datum') (('this', 'road'), 'think') (('comments I', 'timely manner'), 'appreciate') (('the more values', 'liklihood'), 'slope') (('however this', 'much depth'), 'work') (('that', 'battles'), 'be') (('that', 'role'), 'be') (('I', 'also two other oberservations'), 'like') (('Perhaps asking', 'difference'), 'help') (('other pokemon', 'thus other significant advantage'), 'be') (('This', 'analysis'), 'be') (('Lets', 'type'), 'aggregate') (('Correlation TableThe table', 'correlation exact same information'), 'provide') (('be', 'it'), 'predict') (('maybe we', 'it'), 'fix') (('Lets', 'two plots'), 'take') (('model', 'reasonable assumption'), 'be') (('model', 'more variance'), 'have') (('machine learning we', 'data'), 'model') (('most obvious reason', 'vast stats'), 'be') (('process', 'several steps'), 'break') (('you', 'model'), 'decide') (('We', 'very interesting anomaly'), 'look') (('We', 'model'), 'try') (('we', 'folds cross k validation'), 'need') (('which', 'highest correlation'), 'look') (('loadings', 'correlation variables'), 'be') (('I', 'data'), 'be') (('we', 'data'), 'begin') (('water normal bug', 'most common 1 ground'), 'see') (('Sklearn many library', 'us'), 'remain') (('Pokemon', 'analysis'), 'let') (('I', 'indepenent variables'), 'define') (('Geographic location', 'Team tremendous Rocket'), 'be') (('These', 'best fit'), 'be') (('Team Rocket', 'areas'), 'Decisions') (('where we', 'win percentage'), 'be') "}