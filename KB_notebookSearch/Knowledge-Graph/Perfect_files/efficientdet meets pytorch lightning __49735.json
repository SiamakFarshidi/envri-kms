{"name": "efficientdet meets pytorch lightning ", "full_name": " h1 Table of Content h1 Introduction h1 Modern Computer Vision h2 Different Detection Tasks h2 Object Detection 101 h2 Object Detection Models Zoology h1 EfficientDet Explained h2 EfficientNet as a Backbone h2 BiFPN as a Multi Scale Fusion Layer h2 Two Heads h2 Compound Scaling h1 Application to Global Wheat Challenge h2 Understanding the Task h2 Evaluation Metric h2 The Model h2 The Dataset h2 Pytorch Lightning Complete Pipeline h1 Evaluation h2 Inference h1 Advanced Concepts h2 Mosaic Augmentation h2 TTA h2 WBF Blending h1 To Wrap Up h2 To Go Beyond ", "stargazers_count": 0, "forks_count": 0, "description": "For that we also need to run pip install timm. More on this in the next section. In the following sections we will explore each part in more details. com albumentations team albumentations is a great library for that. Let s go EfficientNet as a BackboneThis is the first part of the archtiecture. Here is the table for the different EfficientDet variants the bigger phi is the bigger the model To finish this section notice that the 1. Everything is set time to create the EfficientDet model using the code snippet presented above the new create_model code snippet instead of the get_train_efficientdet function since we are using the latest effdet version. pdf and pytorch implementation. That s it our WheatModel is ready now. Let s move to the next step the prediction networks. xa0Had to comment these since the evaluation doesn t work yet. BiFPN as a Multi Scale Fusion LayerOnce we have a classification network one important question to ask is how to move from the classification model to an object detection one This is cleverly solved by using features maps i. as_tensor iou xa0self. Indeed the evaluation part is tied to the torchvision repo and I haven t found a simple way to import it. com nainaakash012 efficientdet scalable and efficient object detection ea05ccd28427 A paper comparing human level performance vs some deep learning algorithms on vision tasks https arxiv. xa0New way that works xa0checkpoint_path. different values are tested and the one giving the best score is selected over 1. com c global wheat detection discussion 149770 discussion. Data Science Bowl 2018 https www. pdf detailing object detection metrics and how they are computed. 01 Attach the head net. These will be fixed in the private part as far as I know. com playlist list PL5 TkQAfAZFbzxjBHtzdVCWE0Zbhomg7r More specifically this video is great for object detection https www. You can find resized datasets here https www. com shonenkov training efficientdet notebook to get started training an EfficientDet model on this competition dataset. What does that mean In short more 0s everywhere in the network Max pooling instead of average pooling ReLU layer Dropout Thus less parameters. Here is the 4th place solution. Here is a sample code from effdet import create_modelnet create_model tf_efficientdet_d5 bench_task train num_classes 1 bench_labeler True In what follows we will use this code snippet to create the model. For that we will create a Trainer and set it to fast_dev_run True for a quicker demo. com object detection faster r cnn yolo ssd and this slides deck https fr. 01497 that adds instance segmentation on top of object detection. io convolutional networks layers followed by max pooling then a fully connected layer. To finish this section here is an illustration again using cats p tta_resized. Predict using the trained model you will have the prediction for the original image plus the augmented ones. com paper efficientdet scalable and efficient object. In other words it is localization plus classification of objects. The train images come from 7 different sources. networks got too many parameters2. intermediate learned representations. com PyTorchLightning pytorch lightning to implement the model. If you want a very complete blog post check this one https medium. Models are typically evaluated according to a Mean Average Precision metric. In fact instead of using only one BiFPN and one prediction networks these components are repeated. ipynb scrollTo DBIoe_tHTQgV where they have cloned the torchvision part from the Pytorch s repo then copying the necessary parts using cp instead of manually doing it. org and COCO https cocodataset. com task object detection latest Object detection is the task of detecting instances of objects of a certain class within an image. xa0As an exercise try doing it for the other folds and chaning the Trainer. pdf and pytorch tutorial https pytorch. There are 3 channels R G B. RetinaNET paper https arxiv. To experiment with the model and learn more check this colab notebook https github. Another instance segmentation competition. This is an important aspect of the competition for sure. ai library for the three phases train validation and test. InferenceMostly inspired i. Grab something to drink and enjoy Introduction intro Modern Computer Vision modern cv Different Detection Tasks different tasks Object Detection 101 od 101 Object Detection Models Zoology od zoology EfficientDet Explained efficientdet EfficientNet as a Backbone effnet backbone BiFPN as a Multi Scale Fusion bifpn Two Heads heads Compound Scalings scalings Application Global Wheat Detection application Understanding the Task understanding Evaluation Metric evaluation metric Data processing processing The Model model The Dataset dataset Pytorch Complete Training Pipeline pipeline Evaluation evaluation Inference inference Advanced Concepts advanced Mosaic Augmentation augmentation TTA tta WBF wbf To Wrap up wrap up To Go Beyond going beyond One last thing before I start I have benefited immensely from the following two notebooks A Pytorch Lightning end to end training pipeline https www. In contrast to the R CNN family SSD YOLO RetinaNet CeneterNet and EfficientDet fall into the faster one step family. png DETR DETR is short for detection with transformer Paper accepted in 2020 Uses a transformer layer after the feature extraction one Developed by FAIR To learn more check the paperwithcodes page https paperswithcode. CenterNet paper https arxiv. Notice there are some data wrangling to get the correct format while using the EfficientDet implementation. xa0Some processing to add some metadata to the labels DataFrame xa0Create stratified folds here using the source. ipynb the original paper https arxiv. com c global wheat detection discussion 163263. 3 which was 10 better than pervious year s performance the lower the better. com googles efficientdet an overview 8d010fa15860 Another EfficientDet Medium post https medium. automated neural architecture search transfer learning application of attention ideas from the recent NLP progress. com self attention in computer vision 2782727021f6 for some details. As stated in the introduction we will be using the EfficientDet model introduced above. Again thanks Alex Shonenkov. pth xa0Create a model for one fold. One possible explanation is that deep neural networks are good at distilling features from noisy inputs and this can be explained by the information bottleneck theory https en. com yhenon pytorch retinanet. com method detr That was a lot of new concepts to groak so as a reward here is an approximate timeline in red the one step models and green the two steps ones. First let s start with the model s architecture As you can see there are 3 main building blocks 1. The interesting thing is that some parts of it were designed using automatic architecture search i. It is the image with id 35b935b6c. ai chapter_computer vision multiscale object detection. Finally to learn more about these two families of models check this blog post https cv tricks. Previous similar competitions TGS Salt Identification https www. Something else happened code discovery sharing and reproducibility got better. md models page models section where you can find this table and click on the weights you want COCO AP average precision vs FLOPS number of operations per second graph SOTA according to paperwithcode https paperswithcode. com jonathan_hui understanding feature pyramid networks for object detection fpn 45b227b9106c as well. R_ input 512 phi. com google automl blob master efficientdet tutorial. Here is a link the first place https www. I also like this definition from paperswithcode https paperswithcode. Indeed winning solutions used EfficientDet augmented with few more tricks. org docs stable torchvision index. That s the competition s banner and that s what we are predicting finding the bounding boxes of wheat heads. com facebookresearch detr. If you made it this far congratulations By now you should have acquired basic knowledge of object detection and computer vision more generally you can now go and build models. com c global wheat detection discussion 172418 from the winning competition solution. Fortunately we don t need to really understand what goes inside our brains. Draw img bboxes train_labels_df. png attachment custom_mosaic_augmentation. com c global wheat detection discussion 159578 or missing masks https www. Check the notebook if you want to learn about these final steps. 35 value in the first equation has been optimized using grid search i. From there we can compute the average precision this is the sum over 11 break points of the precision vs recall curve. This is an object detection competition with exactly the same metric. com nvnnghia awesome augmentation Another EfficientDet Pytorch implementation https github. Bottom computer perspective. com shonenkov so thanks So how does it work and how is it different Let s have a look at the following schema from the WBF paper wbf_schema. accumulate xa0self. The code to get this python from pathlib import Path test_paths Path path to test len list test_paths. Let s get started To make things easier DRY principle I will be using the following EfficientDet model https github. Here we go Modern Computer Vision Before focusing on object detection let s move one step back and explore the modern computer vision landscape. DETR model detection using the transformer architecture. Indeed this was according to many one of the moments that launched again the field of deep learning from the last AI winter https en. From Wikipedia s object detection https en. Predict the bounding box for each wheat head and give a confidence score2. a class and bounding box networks blockIn more details we have an EfficientNet Net and not Det backbone. So what does this network contain The AlexNet network is quite simple different CNN https cs231n. com jonathan_hui object detection series 24d03a12f904 xa0Using a small image size so it trains faster but do try bigger images xa0for better performance. png attachment wbf_schema. Before that one small detour to process the labels DataFrame and add some useful metadata such as the bounding box area andthe lower corner s coordiantes. pdf and pytorch implementation https github. EfficientDet paper https arxiv. validation_step validation_step xa0WheatModel. Notice that FPN stands for Feature Pyramid Networks. read_csv path to train labels. com ultralytics yolov5 Detectron2 https github. html Learn more about efficientdet here https blog. com c severstal steel defect detection. image_size 256 Add the head with the updated parameters head HeadNet config num_outputs config. com yassinealouini roberta meets tpus if you haven t yet already there will be a mix of theory practice and an application to the global wheat competition dataset https www. Then we have two fully connected layers before getting the final values. save call at the end. com google automl tree master efficientdet A great notebook https www. com 2019 05 efficientnet improving accuracy and. To create the model the code snippet is quite simple D5 EfficientDet here but you can use the one that suits your needs pythonfrom effdet import get_efficientdet_config EfficientDet DetBenchTrainfrom effdet. Severstal Steel Defect Detection https www. com github pytorch vision blob temp tutorial tutorials torchvision_finetuning_instance_segmentation. Short code snippets Load an image and overlay the corresponding mask s python from pathlib import Path img_id ID_OF_IMAGE img_path Path f path to train img_id. Mask RCNN paper https arxiv. target masks None xa0These are needed as well by the efficientdet model. This backbone was found using NAS neural architecture search through the use of the MnasNet framework. How does it work The basic idea is quite simple 1. for instance segmentation the instances of each label are predicted much more numnbers i. com questions 52015 what is the difference between semantic segmentation object detection and instaAll three tasks share the following thing given an object the aim is to locate some pixels that identify it for object detection 4 numbers are predicted either two corners or center and width and height check the figure below for more details and a label s probability. Mosaic AugmentationThis technique consists in stitching together different images to form a bigger one. A Pytorch no Lightning this time end to end training pipeline https www. Pytorch Lightning Complete PipelineAlright time to build a model. com media files papers YOLOv3. To Wrap UpThat s it for today. org tutorials intermediate torchvision_tutorial. Notice that since this step happens during inference time and since code competitions have time limits you can t use a lot of augmentation. com non maximum suppression nms 93ce178e177c for more details the figure above is from it. com ybabakhin kaggle_salt_bes_phalanx and a paper https arxiv. net pfi a brief history of object detection tommi kerola telling a brief history of object detection. xywh to xyxy not necessary. png attachment mosaic_augmentation_resized. The ModelEnough with theory let s move to the implementation Similarly the the previous NLP notebook I will be using Pytorch Lightning https github. To learn more about this EfficientNet backbone read the original paper here https arxiv. num_classes 1 config. com jonathan_hui yolov4 c9901eaa8e61 and the paperswithcode https paperswithcode. Now we can compute the recall and precision for the ranked bounding boxes5. Next we install the efficientdet https github. Check this blog post https towardsdatascience. Setup the WheatDataset. Here are some graphs from the paper Test images Only 10 images have been made public. update res xa0self. for each pixel predict to which class it belongs. load path to weights net. png attachment object_detection_bbox. com artgor object detection with pytorch lightning by the great Andrew Lukyanenko https www. So we need to change these to x1 y1 and x2 y2 where they are the upper left and lower right corners for bbox in bboxes x y w h eval bbox transformed_bbox x y x w y h draw. Object Detection Models ZoologyAs stated above it seems that deep learning models particularly convolutional ones are very good at image processing tasks and in particular object detection. com jsbroks coco annotator. copied from here https www. With these shoutouts out of the way let s start. Two HeadsThe third ingredient to the mix is the two heads network one for predicting the coordinates of the bounding box one for predicting the class the probability of each class to be more precise Each of the two networks take as input all the ouptuts of the previous BiFPN layer. com c airbus ship detection. png The two most popular ways to annotate a bounding box. com darknet yolo and v3 paper https pjreddie. The evaluation metric is exactly the same. Left for the reader how to move from one to the other Now that we are more familiar with the general detection tasks we can move to object detection. glob Don t worry though there is a real test dataset that runs when you submit your inference kernel. 12872 and pytorch implementation https github. pdf Train using one loss for some epochs then use another one Average over the last n snapshots for more generalization Evaluation MetricThe evaluation metric for object detection is quite tricky when compared to object classification. Yet another semantic segmentation competition. io The Last 5 Years in Deep Learning Most of these systems share similar architectures and modern tips to make them work best. Also the code ecosystem got much better. com shonenkov inference efficientdet. EfficientDet ExplainedWhat is EfficientDet and how does it work In short it is a recent first submitted at the end of 2019 accepted in CVPR in 2020 very efficient surprise surprise object detection model. xa0Test case xa0Could be one or many rows. png WBF BlendingIf you are accustomed to object detection tasks and challenges you may have heard about NMS short for non maximum suppresion. Then average over the thresholds given the AP and over images given mAP mean average prediction. getting performance better than human level for the first time see the graph below. com c tgs salt identification challenge discussion 69291 solution the code repo https github. Let s explore further this rich ecosystem of models. In the EfficientDet model the EffincientNet backbone is scaled reusing the same values in the original network. Let s now move to the subfield of object detection. tolist The box contains the upper left corner x y coordinates then width and height. xa0Convert to Numpy array there is only one class so always 1. All the train images have the same size 1024 x 1024. We won t explore why this is the case so feel free to explore this subject on your own. Notice that SSD stands for Single Shot MultiBox Detector. com c global wheat detection discussion 160408. com google automl tree master efficientdet backbone from the efficientdet repo. The code to get this number python from pathlib import Path train_paths Path path to train len list train_paths. Here we will go over another technique called weighted boxes fusion or WBF in short. com ultralytics yolov5. However translating this task into an algorithm is on another level of hard. 2 or 3 additional images per original test one is more than enough. Check his work he has many other great CV notebooks. Notice that it should be divisible by 128 since we take features from levels 3 to 7 128 2 7. html on how to fine tune it. Process the data so that it can be used with an efficientdet model3. For the WBF case the main objective is to compute a new confidence score C from existing confidence scores and then use it to compute the blended bounding box coordinates and confidence as a weighted mean or other functions. Re order the predictions from highest score to lowest4. png Here is a simple explanation using cat images mosaic_augmentation_resized. That s it for the model s architecture. Finally for object detection since there is a bounding box to predict the augmentation step should preserve the shape of the bounding box. Notice that the efficientdet library needs timm PyTorch Image Models library. This isn t exactly an object detection competition but rather an semantic segmentation one. csv x y w h for bbox in train_labels_df bbox bbox eval bbox x. paper https arxiv. Indeed given the latest ImageNet http www. Indeed it has achieved in 2012 a top 5 error of 15. com new vision technologies for real world applications To read more about what happened over the last years in the field of deep learning check the following blog post https adeshpande3. It contains a lot of statistics and data acquisition methodolgy descritption so make sure to check it. As the website claims it is 100 times faster than Mask RCNN. com c global wheat detection. png attachment tta_resized. Different Detection TasksWe will mainly focus on three similar detection tasks from simpler to more complex object detection semantic segmentation instance segmentationObject detection is the easiest one. Use BCE binary cross entropy Jaccard as a loss given some weight to each or Lovasz https arxiv. png img Extracting bounding boxes coordinates width height and area python import pandas as pd train_labels_df pd. com facebookresearch detectron2 this isn t a single model but rather a collection of object detection models. Here are some advanced concepts to get you better results Mosaic augmentation TTA WBF blendingLet s start with mosaic augmentation. com 2016 11 07 intersection over union iou for object detection scores then for some threshold t the wheat head is a TP if the IoU is above it finally we compute the precision https en. Need yxyx format for EfficientDet. The most popular benchmark is the MSCOCO dataset. As stated by Karpathy in one talk haven t found the link yet if you know it please share in the comments more zeros better performance. com Erlemar wheat as well if you want better organised code. com zylo117 Yet Another EfficientDet Pytorch A very thorough series of object detection medium posts https medium. There are some data quality issues masks too big https www. One last trick is to use a weighted feature fusion instead of the unweighted FPN approach the weights are learned as well and normalize these weights using a fast normalization procedure i. Understand the dataset the task and the evaluation metric2. One for predicting the most likely label and one for predicting the detected bounding box if any. Notice that FPN doesn t have a category since it is used in both That s enough general architecture for now In the remaining parts we will be focusing on the EfficienDet family of models more specifically on the following Pytorch implementation https github. Thus there are two levels of averaging over the thresholds and then over the images. org wiki AlexNet network revolution. So we need to change these to x1 y1 and x2 y2 where they are the upper left and lower right corners xa0No longer works. pdf and the original implementation https github. More on this in the next section BiFPN as a multi scale fusion layer once we have a classification network we need to efficiently extract features for the detection step. We will see one additional trick applied in the next and last section. It contains Faster R CNN RetinaNet and many more. RetinaNet Uses focal loss Uses FPN as its features extraction layer CenterNet Paper accepted in 2019 Estimates the center of the bounding box in addition to the corners Belongs to the one stage family of models Claims to have the best performance for the one stage family and not very far from the best in two stages as well Has two networks one for finding the center and one for finding the corners As usual to learn more check the paperswithcode page https paperswithcode. Finally width W depth D and input resolution R in the different sections are scaled usign one single parammeter phi in this fashion 1. The interesting additional thing is the scaling of the BiFPN and prediction networks. Two heads finally everything is connected to two output networks. V4 paper accepted in 2020 EfficientDet Originally developed by the google brain team using architecture search. Indeed that s one of the big differences between the two how different proposals are merged. even less parameters. Finally some of the recent research trends more efficient architectures i. In the above figure you can see a patch of wheat heads. Airbus Ship Detection https www. com questions 238684 what are the difference between dice jaccard and overlap coefficients A complete explanation of EfficientDet https towardsdatascience. xa0Let s add the train and validation data loaders. The images have a varying number of wheat heads colors orientations and so on making the task more challenging. Compound ScalingOne last ingredient to the mix is how the network is scaled. a multi scale features fusion block3. If this explanation isn t clear enough check the following paper https raw. class_net head return DetBenchTrain net config Notice that for the most recent version of the effdet library you can use the create_model and or the create_mode_from_config functions for a cleaner code. Create additional test images from the provided ones using augmentation techniques. for semantic segmentation the countours of each label are predicted more numbers i. org hub nvidia_deeplearningexamples_ssd. Fast forward to 2020 a lot of things happened and the performances kept improving year after year ImageNet is now considered a solved kind of in most cases at least dataset. com watch v TB fdISzpHQ list PL5 TkQAfAZFbzxjBHtzdVCWE0Zbhomg7r index 16 t 0s A good explanation of the differences between evaluation metrics https stats. If youy don t know who Andrew artgor is now is the time to discover lots of cool notebooks. In more details it is a family of models designed by researchers from Google brain. To get started you can check the Github implementation here https github. It consists in placing bounding boxes around detected objects. open img_path draw ImageDraw. validation_epoch_end validation_epoch_end Create a model for one fold. Introduction Computer vision went through a fast cycle of innovations and improvements starting in 2012 with the AlexNet https en. I am sure it works eventually but I won t do this here since the notebook is long enough already and I am being a little lazy. Notice that there are some edge cases where the precision will be 0 no mask is predicted and there is at least one a mask is predicted but there aren t any. Evaluation Believe it or not this is a part where I struggled the most. As usual we will start with the model building block then add the processing steps. com xingyizhou CenterNet. com c data science bowl 2018 overview evaluation. Blend the predictions more on this in the next section For the augmentation step horizantal and vertical flips are quite common strategies for TTA. In fact it has been solved since at least 2015 with the introduction of the ResNet https en. The most common way to do it is to scale the backbone s width and depth. Here is the top solution https www. append bbox 0 y. I won t show this part since it is tedious and not very elegant. Here is one example of a BiFPN computation from the paper All these tricks make the BiFPN layer both efficient and accurate. For instance papers with code https paperswithcode. append bbox 2 h. Among the recent code libraries and tools Pytorch https pytorch. It uses the EfficientNet architecture and includes pre trained weights. detections 2 detections 0 detections 3 detections 1 iou self. Well this list isn t very informative is it Based on my own experience basically reading a lot of blog posts and papers there are two major families Two steps networks One step networksR CNN and its cousins fall into the first family of models. To dig deeper here are some more details SSD SSD is short for single shot detector As it is clear from its name it belonges to the one step family Paper accepted around 2016 end of FPN FPN is short for feature pyarmic network This isn t an object detection network per say but rather a part It is used in many architecture as the features extraction part Paper accepted in 2017 Mask R CNN From the region proposals series of models this is the latest one It is an extension of faster r cnn for instance segmentation It seems that it gives better results even for object detection To learn more read this https medium. BiFPN as its name indicates builds upon the ideas of the FPN layer and adds one simple idea instead of simply aggregating the different representations in a top down fashion it takes the PANet approach i. load_state_dict checkpoint Change the number of classes to 1 only predicting wheat config. Another route I have tried is a similar one used here https colab. The two remaining tasks are best described in the image below Source https datascience. png generation 1594242665230885 amp alt media For more details about the dataset creation check this paper https arxiv. efficientdet_cover attachment object_detection_101_new. There are few images in the test dataset that aren t 1024 x 1024. These two challenges are solved efficiently using the BiFPN layer. as_tensor metric tensorboard_logs main_score metric return val_loss metric log tensorboard_logs progress_bar tensorboard_logs xa0Had to comment these since the evaluation doesn t work yet. ai and its CV module for an intrigated experience with latest CV best practices. For that we will be using the belvoed Pytorch Lightning. save path to output img_id. FPN paper https openaccess. for each pixel predict to which class it belongs its id. YOLO website https pjreddie. normalize by the sum instead of using softmax. com download storage v1 b kaggle user content o inbox 2F172860 2F6397d02cd4ada74403ae0eaa955394ce 2Fhist_truncated. This isn t because of the tool but it was due to the code that I was using. It appears that deep learning models are very good at that. The following example is extracted from the same post thanks again to DungNB https www. png Table of ContentWelcome to this beginner friendly guide to object detection using EfficientDet. 8 masks per image The image with the most masks contains 116. This will be a very long notebook so use the following table of content if necessary. Also in a better world I would have made this part using Pytorch Lightning but I am little overwhelmed with this very lengthy notebook so it is enough for now. Time to move to the application Application to Global Wheat ChallengeNow that the theory makes hopefully more sense let s move to the application side of things. xa0coco convert_to_coco_api valid_dataset xa0self. Finally if you want even more blending techniques you can explore these techniques Soft NMS similar to NMS non maximum suppression but with a soft selection criterion Non maximum weighted NMW this is the same as the NMS but computing a weighted a bounding box insteadof computing only one. Here is the distribution python arvalis_1 1055 arvalis_2 204 arvalis_3 559 ethz_1 747 inrae_1 176 rres_1 432 usask_1 200 3 of these sources are probably similar arvalis_1 arvalis_2 and arvalis_3. pdf or this great notebook https www. com method centernet YOLO Uses a different format for the outputted bounding box the center width and height instead of top left and bottom right corners. Here is a short description of its pseudo code Check this post https towardsdatascience. org wiki Object_detection page Region Proposals R CNN Fast R CNN Faster R CNN cascade R CNN and so on Single Shot MultiBox Detector SSD You Only Look Once YOLO Single Shot Refinement Neural Network for Object Detection RefineDet Retina Net Deformable convolutional networksWe can also add EfficientDet. ai breaking down efficientdet If you want to learn more about computer vision using deep learning A great playlist if you like videos https www. One extra challenge is to do so for multiple scales learn more about this here https d2l. W_ pred W_ bifpn and D_ bifpn 3 phi for the prediction part 3. Similarly to what I have done in the NLP guide check it here https www. object_detection_bbox. com method mask r cnn paperswithcode page. In what follows I will detail some of what makes the modern computer vision ecosystem. Then the idea was to make the networks deeper to get better performances. pdf Train a classifier first to find images without wheat heads Randomly cropping the train images Using augmentation. As a first step we install the Pytorch Lightning library using pip pip install pytorch_lightning. The state of the art methods can be categorized into two main types one stage methods and two stage methods. All these things make the modern days computer vision ecosystem. num_classes norm_kwargs dict eps 0. Some interesting ideas Multi rounds pseudo labelling graph below from here https arxiv. 128 for the input image resolution. There is a Github repo https github. there was a meta model that was trained to find the best hyper parameters of the trained model automatically. com rafaelpadilla Object Detection Metrics master paper_survey_on_performance_metrics_for_object_detection_algorithms. Download TorchVision repo to use some files from references detection. com pestipeti pytorch starter fasterrcnn train so go check it out and thank Peter https www. org wiki AI_winter for the first time it was possible to train neural networks unsing large dataset s and lots of compute well according to 2012 s standards anyway p. test dataset must have some values so that transforms work. com shonenkov training efficientdet by the great Alex Shonenkov https www. com c data science bowl 2018 discussion 54741. input efficientdet efficientdet_d5 ef44aea8. Instead let s explore some SOTA state of the art models and see what they have in common SSD paper https arxiv. The original accompanying code could be found here https github. I will try to make this section work later on. _calculate_iou targets res IMG_SIZE iou torch. Here is graph that shows that EfficientDet D7x largest model achieves it on the COCO object detection benchmark coco_object_detection_score. The DatasetBefore I start notice that some of the code mostly is inspired from this notebook https www. Looks fine awesome Time to move to the training pipeline. append bbox 3 processed_train_labels_df train_labels_df. To further understand the task let s explore the wheat images and the associated bounding boxes Train images There is a toal of 3422 unique train images. org and the torchvision https pytorch. com PyTorchLightning pytorch lightning for easier training Fastai https www. com What is the F2 score in machine learning score. glob There is a total of 3373 unique images with masks Thus some images don t have any masks There is a toal of 147793 masks Thus on average there are 43. In most modern object detection architectures both problems are solved at once using an FPN layer. More insights about the test dataset could be found in this https www. Here is a link to the first place https www. pdf the blog post https ai. convergence wasn t fast or happening at allTo solve these issues few interesting ideas were introduced. Hurray we have predictions Advanced ConceptsBefore finishing this lengthy notebook I wanted to talk about few advanced concepts to get better resultsparticularly for object detection but they do work for many computer vision tasks. org wiki Information_bottleneck_method. Indeed where do you even start object_detection_explained. Among the one stage family of models Fast predictions with great mAP Latest versions use FPN as a features extracting layer Has been through many iterations latest being v4. Indeed this is a trick often used to improve the performance of networks. xa0Apply some augmentation on the fly. There is finally omegaconf and pycocotools same using pip. To get the backbon weights go to the README https github. So the next question is how to design a good neural network for object detection Let s have a look at the most common techniques to have a feel for what works. Notice that this model is a generalization of Faster RCNN https arxiv. com review fpn feature pyramid network object detection 262fc7482610 and this one https medium. Here is a rough sketch of the plan 1. If you are curious you can check an example of how to use it here https www. One stage methods prioritize inference speed and example models include YOLO SSD and RetinaNet. Thanks to Alex Shonenkov https www. a classification backbone block2. copy processed_train_labels_df x x processed_train_labels_df y y processed_train_labels_df w w processed_train_labels_df h h processed_train_labels_df area processed_train_labels_df w processed_train_labels_df h processed_train_labels_df x2 processed_train_labels_df x processed_train_labels_df w processed_train_labels_df y2 processed_train_labels_df y processed_train_labels_df h Metric There are many components to this metric first we compute Jaccard IoU https www. top down and bottom up connections and optimizes cross scale connections. Two main problems appeared then 1. png attachment object_detection_explained. org wiki Precision_and_recall for this threshold. The organizers are working on a fix for the private test dataset as far as I know. com nguyenbadung for the write up custom_mosaic_augmentation. Check the following graph to learn more about other FPN variations including PANet and BiFPN Finally to learn more about FPN and BiFPN check the papeswithcode page https paperswithcode. The first step was making CNNs work that s roughly what happened around 2012 and has been improved ever since as discussed in the previous section. com rwightman efficientdet pytorch. This isn t the most optimal way to do it but I will leave it to you xa0to find a better one. jpg img Image. com c tgs salt identification challenge overview. More on this in the following sections. Since we have only one class this is also the mAP. org home benchmarks deep learning models are beating human level performance that was the case on the ImageNet dataset since 2015 and that s the case for the COCO dataset since. Thus I needed to copy a lot of code as was done in artgor s notebook. As simple as that We close this section with the last trick compound scaling. com rwightman efficientdet pytorch blob master README. suppose all instances are not crowd. png TTATTA short for test time augmentation is a popular technique for getting better performance for computer vision tasks and you will often encounter it when doing Kaggle computer vision competitions. com shonenkov wbf approach for ensemble again from Alex Shonenkov https www. Here is how it is computed 1. pdf Some augmentations notebook https www. rectangle transformed_bbox outline black width 3 img. com c severstal steel defect detection discussion 114254 solution. 35 phi and D_ bifpn 3 phi for the BiFPN part 2. Again more on this in the next section. Source https semiengineering. Object Detection 101What is object detection For humans this is a straightforward question given an image and a label draw a bounding box around the detected objects. append bbox 1 w. coco_evaluator CocoEvaluator coco iou_types xa0TODO What should be changed in order to make it work separate losses variable number of instances so the entire structure can be forced to tensor separate losses variable number of instances so the entire structure can be forced to tensor xa0Back to xyxy format. The metric here is close to the current competition but instead of AP it uses F2 https www. This is what made the model achive state of the art performance on ImageNet http www. Two stage methods prioritize detection accuracy and example models include Faster R CNN Mask R CNN and Cascade R CNN. To finish this section let s make some predictions. png Legend on top human perspective. Defined some transforms using the albumentations https albumentations. Next let s see how we can create a WheatDataset if you aren t familiar with Pytorch s Dataset concept check it here https pytorch. Thus some augmentations aren t allowed for instance 90 degrees rotations. png If you may have noticed the WBF algorithm made a bounding box that isn t any of the proposed ones whereas NMS came up with one from the proposals. summarize coco main metric metric self. For that we will start by defining the model part then move to the data processing evaluation and prediction. If you have found a better method please share it with me in the comments section. I won t go over the formatting step to make a proper submission file. png attachment coco_object_detection_score. Here is a look at the overall archtitecture As you can see the interesting thing is that many elements of the model have been optimized using neural automatic search width depth number of channels and resolution. com method yolov4 page. Most likely the breakdown is by the competition sponsors organisers Bounding boxes where added using this tool https github. com pestipeti for making it So what have we done above 1. Albumentations https github. org wiki Residual_neural_network model i. I don t have any data to back this claim but that s what I have observed through experience. loc lambda df df image_id img_id bbox. The more diverse the images the better it is. stats 0 metric torch. com ZFTurbo Weighted Boxes Fusion the paper https arxiv. The average bounding box area is 6843 the smallest is only 2 and the largest is 529788 Here attached the two images with the largest upper right including many smaller and the smallest it is the in the lower right corner at the edge bounding boxes The bbox area histogram with the top 1000 values truncated and the bottom 100 as well https www. This technique is used to merge many boxes called proposals from one model and can be used to merge the results of many models as well. Let s check that this implementation works by sampling from the WheatDataset. Let s dive in more details. Predict on test images Understanding the TaskAs you have guessed it the task of this competition is to predict the bounding boxes of wheat heads in different images. com is probably the best place to look for a code implementation. The test dataset has been collected from different sources than the train. Congratulations on gaining a new super power Stay tuned for the next notebook and in the meantime happy kaggling To Go BeyondGoing further check these resources to expand your understanding Pytorch s torchvision object detection tutorialn very https pytorch. Another question is how to detect multiple objects having different sizes for example a small cat and a car on the same image This is solved by taking features maps having different sizes. Some backbone models that work well for object detection YOLOv5 https github. com google automl tree master efficientdet. There is even a v5 now https github. Compute the intersection over union of each bounding box 3. com rwightman efficientdet pytorch library again using pip pip install effdet. com content_cvpr_2017 papers Lin_Feature_Pyramid_Networks_CVPR_2017_paper. Also since it is in this mode the Trainer doesn t automatically save the weights at the end correct me if I am wrong of course so weneed to add a torch. xa0We need to set a folder to get images xa0This is the transforms for the training phase The box contains the upper left corner x y coordinates then width and height. com method bifpn this blog post https towardsdatascience. com jonathan_hui what do we learn from region based object detectors faster r cnn r fcn fpn 7e354377a7c9 blog post and this https paperswithcode. html library particularly for computer vision tasks Pytorch Lightning https github. Notice that YOLO stands for You Only Look Once. efficientdet import HeadNetdef get_train_efficientdet Get the model s config config get_efficientdet_config tf_efficientdet_d5 Create the model net EfficientDet config pretrained_backbone False Load pretrained EfficientDet weights checkpoint torch. As you might have seen the results you get from training the model presented above are quite good but not enough to be competitive. html and the implementation here https github. ", "id": "yassinealouini/efficientdet-meets-pytorch-lightning", "size": "49735", "language": "python", "html_url": "https://www.kaggle.com/code/yassinealouini/efficientdet-meets-pytorch-lightning", "git_url": "https://www.kaggle.com/code/yassinealouini/efficientdet-meets-pytorch-lightning", "script": "albumentations.pytorch.transforms make_predictions DataLoader albumentations plot_image_with_bboxes pathlib configure_optimizers create_model WheatModel(LightningModule) validation_step matplotlib.pylab ImageDraw DetBenchTrain get_train_transforms DetBenchPredict SequentialSampler numpy Image ToTensorV2 Path RandomSampler get_test_efficientdet loggers get_valid_transforms validation_epoch_end get_efficientdet_config training_step val_dataloader collate_fn StratifiedKFold effdet forward PIL sklearn.model_selection pandas Trainer get_test_transforms get_train_efficientdet pytorch_lightning seed_everything torch.utils.data __len__ effdet.efficientdet Dataset WheatDataset(Dataset) __init__ EfficientDet train_dataloader HeadNet LightningModule __getitem__ ", "entities": "(('we', 'pip pip install pytorch_lightning'), 'install') (('target None', 'efficientdet as well model'), 'mask') (('implementation', 'WheatDataset'), 'let') (('graph', 'first time'), 'see') (('Here link', 'place https first www'), 'be') (('com', 'code probably best implementation'), 'be') (('s', 'things'), 'time') (('we', 'Pytorch implementation https more specifically following github'), 'notice') (('I', 'it'), 'check') (('Indeed winning', 'few more tricks'), 'augment') (('this', 'detected objects'), 'detection') (('Pytorch Lightning', 'training pipeline https time www'), 'end') (('FPN', 'Feature Pyramid Networks'), 'notice') (('as far I', 'test private dataset'), 'work') (('x2 where they', 'x1 y1'), 'work') (('F2 score', 'machine learning score'), 'com') (('more Each', 'previous BiFPN layer'), 'be') (('how network', 'mix'), 'ScalingOne') (('It', 'data acquisition methodolgy so it'), 'contain') (('load_state_dict checkpoint', 'wheat only config'), 'change') (('net EfficientDet config pretrained_backbone False Load', 'EfficientDet weights checkpoint torch'), 'import') (('two corners', 'below more details'), 'com') (('many elements', 'channels'), 'be') (('one', '1'), 'test') (('two challenges', 'efficiently BiFPN layer'), 'solve') (('model', 'Faster RCNN https arxiv'), 'notice') (('DataFrame', 'here source'), 'stratify') (('finally everything', 'output two networks'), 'connect') (('Thus images', '147793 masks'), 'glob') (('detection', 'paperwithcodes page https paperswithcode'), 'be') (('that', 'AI winter last https'), 'be') (('I', 'experience'), 'have') (('where I', 'most'), 'believe') (('pdf', 'augmentation'), 'Train') (('some', 'notebook https mostly www'), 'notice') (('Mosaic augmentation TTA WBF better blendingLet', 'mosaic augmentation'), 'be') (('they', 'computer vision many tasks'), 'have') (('you', 'https here pytorch'), 'let') (('blog very complete post', 'https one medium'), 'check') (('one', 'enough'), 'be') (('One extra challenge', 'https here d2l'), 'be') (('model achive state', 'www'), 'be') (('ai library', 'validation'), 'train') (('COCO AP average precision', 'paperwithcode https paperswithcode'), 'section') (('figure', 'it'), 'suppression') (('com c tgs', 'code repo https 69291 github'), 'solution') (('it', 'F2 https www'), 'be') (('Only 10 images', 'paper Test images'), 'be') (('learning deep models', 'very that'), 'appear') (('we', '1'), 'pestipeti') (('it', 'Mask 100 times RCNN'), 'claim') (('s', 'models'), 'let') (('what', 'blog post following https'), 'check') (('entire structure', 'xyxy format'), 'iou_types') (('two remaining tasks', 'Source https datascience'), 'describe') (('Then we', 'final values'), 'have') (('learning deep models', 'particular object detection'), 'state') (('evaluation doesn', 'these'), 'xa0Had') (('com googles', 'EfficientDet Medium post https medium'), 'efficientdet') (('then use', 'quite when classification'), 'be') (('weights', 'normalization procedure fast i.'), 'be') (('com jonathan_hui understanding', 'object'), 'fpn') (('it', 'well standards'), 'be') (('xa0New that', 'xa0checkpoint_path'), 'way') (('task', 'different images'), 'guess') (('segmentationObject detection', 'object segmentation simpler more complex detection semantic instance'), 'focus') (('finish', 'cats p here again tta_resized'), 'be') (('few interesting ideas', 'issues'), 'introduce') (('Thus I', 'notebook'), 'need') (('tolist box', 'upper left corner'), 'contain') (('s', 'bounding Train train associated 3422 unique images'), 'understand') (('train images', 'same size'), 'have') (('modern them', 'similar architectures'), 'io') (('it', 'https medium'), 'be') (('It', 'CNN RetinaNet'), 'contain') (('we', 'more details'), 'explore') (('html', 'https efficientdet here blog'), 'Learn') (('Mosaic AugmentationThis technique', 'bigger one'), 'consist') (('things', 'days computer vision modern ecosystem'), 'make') (('problems', 'FPN at once layer'), 'in') (('test dataset', 'train'), 'collect') (('that', 'effdet'), 'be') (('I', 'so torch'), 'save') (('This', 'important competition'), 'be') (('one This', 'features maps cleverly i.'), 'bifpn') (('finally we', 'precision https'), 'com') (('most common way', 'width'), 'be') (('html library', 'computer vision particularly tasks'), 'github') (('get_train_efficientdet instead we', 'effdet latest version'), 'set') (('com method That', 'step steps here approximate red one two ones'), 'detr') (('you', 'architecture'), 'let') (('AlexNet network', 'So what'), 'contain') (('backbon weights', 'https README github'), 'get') (('com facebookresearch isn t', 'object detection single rather models'), 'detectron2') (('NMS', 'proposals'), 'png') (('you', 'augmentation'), 'notice') (('1055 204 arvalis_3 559 ethz_1 747 176 432 usask_1 200 3', 'sources'), 'be') (('which', '10 pervious performance'), '3') (('png img Extracting bounding boxes', 'pd train_labels_df pd'), 'coordinate') (('Max', 'everywhere network'), 'mean') (('SSD', 'Single Shot MultiBox Detector'), 'notice') (('efficientdet library', 'PyTorch Image Models timm library'), 'notice') (('This', 'detection object exactly same metric'), 'be') (('width W depth Finally D', 'one single parammeter fashion'), 'scale') (('explanation isn t', 'paper https enough following raw'), 'check') (('I', 'A Pytorch training pipeline https end www'), 'grab') (('part it', 't show'), 'win') (('Check', 'post https towardsdatascience'), 'be') (('we', 'object region based detectors'), 'com') (('you', 'create_mode_from_config cleaner code'), 'return') (('I', 'that'), 't') (('_ calculate_iou targets', 'iou torch'), 'res') (('we', 'detection'), 'move') (('blog post https', 'cv tricks'), 'learn') (('we', 'pip install also timm'), 'need') (('you', 'videos https www'), 'break') (('I', 'EfficientDet model https following github'), 'let') (('main objective', 'weighted mean'), 'be') (('We', 'next section'), 'see') (('Indeed this', 'networks'), 'be') (('that', 'COCO dataset'), 'beat') (('this', 'recall curve'), 'compute') (('countours', 'label'), 'predict') (('This', 'different sizes'), 'be') (('this', 'insteadof only one'), 'explore') (('Introduction Computer vision', 'AlexNet https'), 'go') (('really what', 'brains'), 'don') (('Indeed it', '15'), 'achieve') (('it', 'i d'), 'predict') (('Latest versions', 'many iterations'), 'among') (('ipynb scrollTo where they', 'instead manually it'), 'DBIoe_tHTQgV') (('Now we', 'boxes5'), 'compute') (('how different proposals', 'two'), 's') (('what', 'computer vision modern ecosystem'), 'detail') (('Congratulations', 'https very pytorch'), 'tune') (('Andrew artgor', 'cool notebooks'), 'be') (('evaluation doesn', 'these'), 'return') (('vertical flips', 'quite common TTA'), 'blend') (('you', 'comments section'), 'share') (('s', 'way'), 'let') (('inference speed', 'example YOLO SSD'), 'prioritize') (('it', 'efficientdet'), 'process') (('com Erlemar as well you', 'better organised code'), 'wheat') (('instances', 'much more numnbers'), 'predict') (('com method', 'blog post https towardsdatascience'), 'bifpn') (('you', 'how it'), 'check') (('computer more generally you', 'now models'), 'make') (('However translating', 'hard'), 'be') (('enough already I', 'this'), 'be') (('we', 'model'), 'be') (('you', 'wheat competition dataset https global www'), 'meet') (('we', 'EfficientDet model'), 'use') (('I', 'submission proper file'), 'win') (('specifically video', 'detection https object www'), 'PL5') (('we', 'detection step'), 'BiFPN') (('it', 'xa0for better performance'), 'object') (('NLP Similarly previous I', 'Pytorch Lightning https github'), 'let') (('roughly what', 'ever previous section'), 'make') (('Models', 'Average Precision typically Mean metric'), 'evaluate') (('xa0to', 'better one'), 't') (('s', 'object detection'), 'let') (('Object latest detection', 'image'), 'be') (('difference', 'EfficientDet https towardsdatascience'), 'com') (('you', 'original image'), 'have') (('xa0As exercise', 'Trainer'), 'try') (('he', 'CV many other great notebooks'), 'check') (('s', 'predictions'), 'let') (('original accompanying code', 'https here github'), 'find') (('parts', 'architecture search automatic i.'), 'be') (('we', '7'), 'notice') (('I', 'it'), 'tie') (('state', 'two main types'), 'categorize') (('com review fpn feature pyramid network', 'detection'), 'object') (('you', 'https here github'), 'check') (('it', 'approach PANet i.'), 'bifpn') (('it', 'The more images'), 'be') (('that', 'work'), 'have') (('networks', 'better performances'), 'be') (('Most likely breakdown', 'tool https where github'), 'be') (('you', 'short non maximum suppresion'), 'BlendingIf') (('s', 'prediction networks'), 'let') (('we', 'quicker demo'), 'create') (('we', 'wheat heads'), 's') (('com method centernet YOLO', 'center width'), 'use') (('trick last compound', 'scaling'), 'simple') (('More insights', 'https www'), 'find') (('technique', 'many models'), 'use') (('backbone that', 'https well object detection YOLOv5 github'), 'model') (('EfficientDet D7x largest model', 'detection benchmark coco_object_detection_score'), 'be') (('You', 'resized datasets'), 'find') (('you', 'wheat heads'), 'see') (('EffincientNet backbone', 'original network'), 'scale') (('it', 'ResNet https'), 'solve') (('it', 'little very lengthy notebook'), 'make') (('This', 'content'), 'be') (('h h processed_train_labels_df area processed_train_labels_df processed_train_labels_df processed_train_labels_df processed_train_labels_df y2 processed_train_labels_df many metric first we', 'IoU https Jaccard www'), 'copy') (('amp alt 1594242665230885 media', 'paper https arxiv'), 'check') (('steps step networksR two major Two One CNN', 'models'), 'be') (('35 value', 'grid search i.'), 'optimize') (('s', 'first archtiecture'), 'let') (('train images', '7 different sources'), 'come') (('this', 'only one class'), 'be') (('detection accuracy', 'example Faster R'), 'prioritize') (('CenterNet Paper', 'paperswithcode page https paperswithcode'), 'use') (('Next we', 'efficientdet https github'), 'install') (('x2 where they', 'y w h'), 'need') (('bbox area histogram', 'top 1000 values'), 'be') (('code Short snippets', 'ID_OF_IMAGE img_path Path f img_id'), 'Load') (('Multi', 'https below arxiv'), 'round') (('we', 'data processing then evaluation'), 'start') (('It', 'detected objects'), 'consist') (('com albumentations team albumentations', 'great that'), 'be') (('image_size', 'config num_outputs HeadNet config'), 'Add') (('this', 'information bottleneck theory https'), 'be') (('I', 'paperswithcode https paperswithcode'), 'like') (('blockIn more we', 'EfficientNet Net Det backbone'), 'detail') (('what', 'feel'), 'be') (('YOLO', 'You'), 'notice') (('bounding augmentation step', 'bounding box'), 'for') (('Finally some', 'more efficient architectures'), 'i.') (('interesting additional thing', 'prediction BiFPN networks'), 'be') (('so task', 'wheat heads colors orientations'), 'have') (('it', 'more zeros better performance'), 'find') (('chapter_computer vision ai multiscale', 'detection'), 'object') (('usual we', 'processing then steps'), 'start') (('box', 'upper left corner'), 'need') (('components', 'prediction one networks'), 'repeat') (('you', 'Kaggle computer vision when competitions'), 'be') (('bigger phi', 'the bigger section'), 'be') (('as far I', 'private part'), 'fix') (('this', 'https fr'), 'deck') (('why this', 'own'), 'win') (('how they', 'detection metrics'), 'object') (('BiFPN layer', 'paper'), 'be') (('It', 'trained weights'), 'use') (('YOLO Single Shot Refinement Neural Only Once Network', 'networksWe also EfficientDet'), 'page') (('s', 'computer vision one step back modern landscape'), 'go') (('image', '116'), 'mask') (('following example', 'DungNB https again www'), 'extract') (('when you', 'inference kernel'), 'worry') (('at least one mask', 't there any'), 'notice') (('In short it', 'surprise surprise object detection very efficient model'), 'be') (('meta that', 'trained model'), 'be') (('they', 'SSD paper https common arxiv'), 'let') (('augmentations aren Thus t', 'degrees 90 rotations'), 'allow') (('it', 'Google brain'), 'be') (('you', 'model'), 'be') (('we', 'belvoed Pytorch Lightning'), 'use') (('Here we', 'technique'), 'go') (('W _', 'prediction part'), 'pre') (('ImageNet', 'now solved kind most cases'), 'happen') (('png', 'cat Here simple images'), 'be') (('backbone', 'MnasNet framework'), 'find') (('35 phi _', 'BiFPN part'), 'bifpn') (('you', 'final steps'), 'check') (('that', 'object detection'), '01497') (('s', 'WBF paper'), 'shonenkov') (('it', 'objects'), 'be') "}