{"name": "hpa classifier explainability segmentation ", "full_name": " h1 Intro h1 Plan h1 Libraries h1 Data Generators h2 One hot encoding classes h2 Stratified split into train val h2 Generator class h1 PR AUC based Callback h1 Classifier h2 Defining a model h2 Initial tuning of the added fully connected layer h2 Training the whole model h2 Visualizing train and val PR AUC h1 Extracting Integrated gradients h1 Cell segmentation h1 Cell level predictions h1 Submission ", "stargazers_count": 0, "forks_count": 0, "description": "As not the whole true positive cell must be lightened up by Integrated Gradients we ll use the 95th percentile of the cell s to compare it with the value corresponding to the global image conf. Cell segmentation Cell segmentation 7. Finally we ll output only cells with confidence values reaching at least 60 of the image level confidence. Classifier Classifier Defining a model Defining a model Initial tuning of the added fully connected layer Initial tuning of the added fully connected layer Training the whole model Training the whole model Visualizing train and val PR AUC Visualizing train and val PR AUC 5. efficientnet model but using tensorflow. disable_eager_execution please note that locally I ve trained a keras. Callback instances Classifier Defining a model Initial tuning of the added fully connected layer Training the whole model Visualizing train and val PR AUCI left the model to train longer on my local GPU. I ll build a classifier on top of image level labels multi label classification then use an explainability technique Guided GRADCAM to extract regions responsible for particular class prediction and then assign the segmented cells to particular classes based on the overlap with Grad CAM outputs. to early stop after 5 epochs of no improvement in mean PR AUC 3. com thedrcat hpa baseline cell segmentation. Generator classUsing green filter as the green filter should be used to predict the label and the other filters are used as references. Next we ll focus on Integrated Gradients output on top of the cell region. save a model with the best PR AUC in validation 4. Data Generators Data Generators One hot encoding classes One hot encoding classes Stratified split into train val Stratified split into train val Generator class Generator class 3. The unique combinations will be put into train. Cell segmentation Cell level predictionsLet s use the following heuristics we ll use the 95th percentile of Integrated Gradients output to estimate value roughly corresponding to the image level confidence. EfficientNetB0 should lead to the same results from https www. IntroIn this notebook I d create a simple baseline. level is the predicted class confidence from our classifier. Credits To segment cells offline I ll use this notebook by RDizzl3 https www. com rdizzl3 hpa segmentation masks no internet the corresponding datasets. Using these two levels we ll estimate the cell level confidence the higher the Integrated Gradients output the higher the confidence. Cell level predictions Cell level predictions 8. Submission Submission Libraries Data Generators One hot encoding classes Stratified split into train valLet s stratify based on combination of labels. com c hpa single cell image classification data Generator instances PR AUC based CallbackThe callback would be used 1. PR AUC based Callback PR AUC based Callback 4. I then upload the best model and plots from the model training. Extracting Integrated gradients Extracting Integrated gradients 6. from the data page https www. com c hpa single cell image classification data dictionary for fast access to ohe vectors sorting present classes in lexicographical order just to be sure to speed up private set submission if no training is expected to store per each class and also mean PR AUC remove previous checkpoints to save space estimate AUC under precision recall curve for each class early stop after early_stopping_patience 4 epochs of no improvement in mean PR AUC save a model with the best PR AUC in validation reduce learning rate on PR AUC plateau for the 260x260 effnetb0 mt is the mitchondria er is the endoplasmic reticulum nu is the nuclei nothing interesting there check input mask convert input mask to expected COCO API input RLE encode mask compress and base64 encoding for the case when there s just a single incomplete batch nothing interesting there to save the time for the public test set run. I also checked out the batched version from this notebook by Darek K\u0142eczek https www. to reduce learning rate on PR AUC plateau. Extracting Integrated gradientsUsing the awesome tf explain library. to estimate AUC under precision recall curve for each class 2. Libraries Libraries 2. ", "id": "samusram/hpa-classifier-explainability-segmentation", "size": "3358", "language": "python", "html_url": "https://www.kaggle.com/code/samusram/hpa-classifier-explainability-segmentation", "git_url": "https://www.kaggle.com/code/samusram/hpa-classifier-explainability-segmentation", "script": "numpy.random tensorflow.python.framework efficientnet.keras EfficientNetB0 albumentations keras.layers Rotate keras.models train_test_split deepcopy on_epoch_start IPython.display read_img seed encode_binary_mask label_cell precision_recall_curve numpy Image Adam DataGenenerator(Sequence) is_patience_lost Dense Callback _mask VerticalFlip Sequence PrAucCallback(Callback) on_epoch_end plot_with_dots keras.callbacks label_nuclei compute_pr_auc keras.backend tqdm keras.optimizers HorizontalFlip auc tensorflow get_pr_auc_history IntegratedGradients _mask as coco_mask hpacellseg.cellsegmentator matplotlib.pyplot typing get_predictions_string copy Compose __getitem__ cuda tqdm.auto get_model get_masks sklearn.model_selection pandas numba get_labels load_model ops early_stopping_check Model model_checkpoint vis_masks_test GridDistortion tf_explain.core.integrated_gradients hpacellseg.utils pycocotools keras.utils display __len__ __init__ reduce_lr_on_plateau build_image_names sklearn.metrics Flatten ", "entities": "(('locally I', 'keras'), 'note') (('I', 'Darek K\u0142eczek https www'), 'check') (('Integrated the higher Gradients', 'the higher confidence'), 'estimate') (('PR AUC', 'Callback PR AUC'), 'base') (('I', 'model training'), 'upload') (('other filters', 'references'), 'filter') (('Submission Submission Libraries Data encoding One hot classes', 'labels'), 'generator') (('Extracting Integrated', 'explain awesome tf library'), 'gradientsuse') (('Visualizing train', 'val PR train'), 'define') (('Data Generators Data encoding encoding Generators One hot One hot classes', 'train val Generator class Generator class'), 'class') (('I', 'RDizzl3 https www'), 'use') (('unique combinations', 'train'), 'put') (('Finally we', 'image level confidence'), 'will') (('level', 'class predicted classifier'), 'be') (('EfficientNetB0', 'https www'), 'lead') (('I d', 'simple baseline'), 'IntroIn') (('Visualizing PR val AUCI', 'longer local GPU'), 'define') (('Next we', 'cell region'), 'focus') (('value', 'image level roughly confidence'), 'predictionsLet') (('internet', 'rdizzl3 hpa segmentation masks'), 'com') (('we', 'image global conf'), 'use') (('label multi classification', 'Grad CAM outputs'), 'build') (('nothing', 'test public set run'), 'dictionary') "}