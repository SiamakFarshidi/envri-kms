{"name": "tsp swapper ", "full_name": " h1 Local neighborhood search swapping by solving the Traveling Salesman Problem ", "stargazers_count": 0, "forks_count": 0, "description": "This is a simple hack 0 will be a dummy starting location. You can play around with the hyper parameters SUBSEQ_LEN and TIME_LIMIT to get a better score. Create Routing Model. Local neighborhood search swapping by solving the Traveling Salesman ProblemIn this notebook I show how we can iteratively improve our solution by taking subsequences and then solving the TSP using Google OR Tools on that subsequence. com group16 greedy solution lb 400k. Convert from routing variable Index to distance matrix NodeIndex. Define cost of each arc. This already improves a strong greedy solution but is still not yet optimal due to the fact that I only swap the order of subsequences of slides around. i 1 because our 0 corresponds to the dummy and 1 corresponds to sequence 0 The swapping could reduce the score due to the transitions of the beginning and ending of the subsequence in the total sequence CHECKS 1 We dont want duplicates 2 We want vertical pictures to always be paired with another vertical picture 3 We don t want horizontal pictures to be paired 4 Preferably we assign all of the pictures to slides 5 We cannot assign a picture to two different slides. We use the last element of the previous subsequence as starting point to determine the costs and the first element of the next subsequence as ending point. If you like the notebook or you use it for your submission please do not forget to upvote it I do not like to ask for this but apparently it is needed in this competition. Create the routing index manager. I will not look for better pairs of vertical photos to put on a slide. Setting initial solution Solve the problem. The initial greedy solution was generated in this notebook https www. My previous notebook has more forks than upvotes Read our input Read our submission TSP will minimize costs but we want to maximize. ", "id": "group16/tsp-swapper", "size": "923", "language": "python", "html_url": "https://www.kaggle.com/code/group16/tsp-swapper", "git_url": "https://www.kaggle.com/code/group16/tsp-swapper", "script": "ortools.constraint_solver pywrapcp cost2 routing_enums_pb2 cost defaultdict sequence_cost distance_callback collections tqdm numpy ", "entities": "(('5 We', 'two different slides'), 'i') (('I', 'slides'), 'improve') (('We', 'point'), 'use') (('apparently it', 'competition'), 'forget') (('Setting', 'problem'), 'solve') (('how we', 'subsequence'), 'swap') (('initial greedy solution', 'notebook https www'), 'generate') (('I', 'slide'), 'look') (('we', 'costs'), 'have') (('You', 'better score'), 'play') "}