{"name": "fast mtcnn detector 55 fps at full resolution ", "full_name": " h1 Fast MTCNN detector h2 Algorithm h2 Other resources h2 Imports h2 The FastMTCNN class h2 Full resolution detection h2 Half resolution detection ", "stargazers_count": 0, "forks_count": 0, "description": "709 than the original MTCNN algorithm to construct the scaling pyramid applied to input images. Furthermore ensuring that faces are cropped with a small margin mitigates the impact of face drift. com timesler guide to mtcnn in facenet pytorch Imports The FastMTCNN classThe class below is a thin wrapper for the MTCNN implementation in the facenet pytorch package that implements the algorithm described above. Other resourcesSee the following kernel for a guide to using the MTCNN functionality of facenet pytorch https www. Although this assume that faces do not move between frames significantly this is generally a good approximation for low stride numbers. If the stride is 3 we are assuming that the face does not significantly alter position for an additional 2 frames or 0. Multi threading A modest performance gain comes from loading video frames with cv2. Install facenet pytorch with internet use pip install facenet pytorch. 02878 for details of the scaling pyramid approach. Scale pyramid The algorithm uses a slightly smaller scaling factor 0. Algorithm Striding The algorithm used is a strided modification of MTCNN in which face detection is performed on only every _N_ frames and applied to all frames. For example with a batch of 9 frames we could pass frames 0 3 and 6 to MTCNN. Half resolution detectionIn this example we demonstrate how to detect faces using half resolution frames i. Fast MTCNN detectorThis notebook demonstrates how to achieve 45 frames per second speeds for loading frames and detecting faces on full resolution videos. Then the bounding boxes and potentially landmarks returned for frame 0 would be naively applied to frames 1 and 2. If faces are moving faster than this they are likely to be extremely blurry anyway. VideoCapture using threading. For details of the scaling pyramid see the original paper https arxiv. This functionality is provided by the FileVideoStream class of the imutils package. Full resolution detectionIn this example we demonstrate how to detect faces using full resolution frames i. Similarly the detections for frame 3 are applied to frames 4 and 5 and the detections for frames 6 are applied to frames 7 and 8. ", "id": "timesler/fast-mtcnn-detector-55-fps-at-full-resolution", "size": "2265", "language": "python", "html_url": "https://www.kaggle.com/code/timesler/fast-mtcnn-detector-55-fps-at-full-resolution", "git_url": "https://www.kaggle.com/code/timesler/fast-mtcnn-detector-55-fps-at-full-resolution", "script": "__call__ tqdm facenet_pytorch __init__ run_detection MTCNN PIL Image FileVideoStream FastMTCNN(object) tqdm.notebook imutils.video ", "entities": "(('example we', 'resolution frames half i.'), 'detectionIn') (('that', 'algorithm'), 'guide') (('we', '0 3 MTCNN'), 'pass') (('functionality', 'imutils package'), 'provide') (('4 detections', '6 frames'), 'apply') (('they', 'faster this'), 'be') (('faces', 'face drift'), 'mitigate') (('Multi', 'cv2'), 'come') (('significantly this', 'stride generally good low numbers'), 'be') (('Fast notebook', 'resolution full videos'), 'MTCNN') (('Then bounding boxes', '0 naively frames'), 'return') (('face', 'additional 2 frames'), 'assume') (('example we', 'resolution frames full i.'), 'detectionIn') (('Scale algorithm', 'slightly smaller scaling factor'), 'pyramid') (('strided modification', 'frames'), 'stride') (('original MTCNN', 'input images'), 'algorithm') "}